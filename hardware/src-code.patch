diff --color -burN ./corundum-rtl/axis_fifo_w_delays.v ./hp-rtl/axis_fifo_w_delays.v
--- ./corundum-rtl/axis_fifo_w_delays.v	1969-12-31 19:00:00.000000000 -0500
+++ ./hp-rtl/axis_fifo_w_delays.v	2024-09-12 17:14:43.101796026 -0400
@@ -0,0 +1,315 @@
+/*
+
+Copyright (c) 2013-2021 Alex Forencich
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the "Software"), to deal
+in the Software without restriction, including without limitation the rights
+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+copies of the Software, and to permit persons to whom the Software is
+furnished to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in
+all copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+THE SOFTWARE.
+
+*/
+
+// Language: Verilog 2001
+
+`resetall
+`timescale 1ns / 1ps
+`default_nettype none
+
+/*
+ * AXI4-Stream FIFO
+ */
+module axis_fifo_w_delays #
+(
+    // FIFO depth in words
+    // KEEP_WIDTH words per cycle if KEEP_ENABLE set
+    // Rounded up to nearest power of 2 cycles
+    parameter DEPTH = 4096,
+    // Width of AXI stream interfaces in bits
+    parameter DATA_WIDTH = 8,
+    // Propagate tkeep signal
+    // If disabled, tkeep assumed to be 1'b1
+    parameter KEEP_ENABLE = (DATA_WIDTH>8),
+    // tkeep signal width (words per cycle)
+    parameter KEEP_WIDTH = ((DATA_WIDTH+7)/8),
+    // Propagate tlast signal
+    parameter LAST_ENABLE = 1,
+    // Propagate tid signal
+    parameter ID_ENABLE = 0,
+    // tid signal width
+    parameter ID_WIDTH = 8,
+    // Propagate tdest signal
+    parameter DEST_ENABLE = 0,
+    // tdest signal width
+    parameter DEST_WIDTH = 8,
+    // Propagate tuser signal
+    parameter USER_ENABLE = 1,
+    // tuser signal width
+    parameter USER_WIDTH = 1,
+    // number of output pipeline registers
+    parameter PIPELINE_OUTPUT = 2,
+    // Frame FIFO mode - operate on frames instead of cycles
+    // When set, m_axis_tvalid will not be deasserted within a frame
+    // Requires LAST_ENABLE set
+    parameter FRAME_FIFO = 0,
+    // tuser value for bad frame marker
+    parameter USER_BAD_FRAME_VALUE = 1'b1,
+    // tuser mask for bad frame marker
+    parameter USER_BAD_FRAME_MASK = 1'b1,
+    // Drop frames larger than FIFO
+    // Requires FRAME_FIFO set
+    parameter DROP_OVERSIZE_FRAME = FRAME_FIFO,
+    // Drop frames marked bad
+    // Requires FRAME_FIFO and DROP_OVERSIZE_FRAME set
+    parameter DROP_BAD_FRAME = 0,
+    // Drop incoming frames when full
+    // When set, s_axis_tready is always asserted
+    // Requires FRAME_FIFO and DROP_OVERSIZE_FRAME set
+    parameter DROP_WHEN_FULL = 0,
+    parameter DELAY_CYCLES = 0
+)
+(
+    input  wire                   clk,
+    input  wire                   rst,
+
+    /*
+     * AXI input
+     */
+    input  wire [DATA_WIDTH-1:0]  s_axis_tdata,
+    input  wire [KEEP_WIDTH-1:0]  s_axis_tkeep,
+    input  wire                   s_axis_tvalid,
+    output wire                   s_axis_tready,
+    input  wire                   s_axis_tlast,
+    input  wire [ID_WIDTH-1:0]    s_axis_tid,
+    input  wire [DEST_WIDTH-1:0]  s_axis_tdest,
+    input  wire [USER_WIDTH-1:0]  s_axis_tuser,
+
+    /*
+     * AXI output
+     */
+    output wire [DATA_WIDTH-1:0]  m_axis_tdata,
+    output wire [KEEP_WIDTH-1:0]  m_axis_tkeep,
+    output wire                   m_axis_tvalid,
+    input  wire                   m_axis_tready,
+    output wire                   m_axis_tlast,
+    output wire [ID_WIDTH-1:0]    m_axis_tid,
+    output wire [DEST_WIDTH-1:0]  m_axis_tdest,
+    output wire [USER_WIDTH-1:0]  m_axis_tuser,
+
+    /*
+     * Status
+     */
+    output wire                   status_overflow,
+    output wire                   status_bad_frame,
+    output wire                   status_good_frame
+);
+
+parameter ADDR_WIDTH = (KEEP_ENABLE && KEEP_WIDTH > 1) ? $clog2(DEPTH/KEEP_WIDTH) : $clog2(DEPTH);
+
+// check configuration
+initial begin
+    if (PIPELINE_OUTPUT < 1) begin
+        $error("Error: PIPELINE_OUTPUT must be at least 1 (instance %m)");
+        $finish;
+    end
+
+    if (FRAME_FIFO) begin
+        $error("Error: does not support FRAME_FIFO (instance %m)");
+        $finish;
+    end
+
+    if (FRAME_FIFO && !LAST_ENABLE) begin
+        $error("Error: FRAME_FIFO set requires LAST_ENABLE set (instance %m)");
+        $finish;
+    end
+
+    if (DROP_OVERSIZE_FRAME && !FRAME_FIFO) begin
+        $error("Error: DROP_OVERSIZE_FRAME set requires FRAME_FIFO set (instance %m)");
+        $finish;
+    end
+
+    if (DROP_BAD_FRAME && !(FRAME_FIFO && DROP_OVERSIZE_FRAME)) begin
+        $error("Error: DROP_BAD_FRAME set requires FRAME_FIFO and DROP_OVERSIZE_FRAME set (instance %m)");
+        $finish;
+    end
+
+    if (DROP_WHEN_FULL && !(FRAME_FIFO && DROP_OVERSIZE_FRAME)) begin
+        $error("Error: DROP_WHEN_FULL set requires FRAME_FIFO and DROP_OVERSIZE_FRAME set (instance %m)");
+        $finish;
+    end
+
+    if (DROP_BAD_FRAME && (USER_BAD_FRAME_MASK & {USER_WIDTH{1'b1}}) == 0) begin
+        $error("Error: Invalid USER_BAD_FRAME_MASK value (instance %m)");
+        $finish;
+    end
+end
+
+localparam KEEP_OFFSET = DATA_WIDTH;
+localparam LAST_OFFSET = KEEP_OFFSET + (KEEP_ENABLE ? KEEP_WIDTH : 0);
+localparam ID_OFFSET   = LAST_OFFSET + (LAST_ENABLE ? 1          : 0);
+localparam DEST_OFFSET = ID_OFFSET   + (ID_ENABLE   ? ID_WIDTH   : 0);
+localparam USER_OFFSET = DEST_OFFSET + (DEST_ENABLE ? DEST_WIDTH : 0);
+localparam WIDTH       = USER_OFFSET + (USER_ENABLE ? USER_WIDTH : 0);
+
+reg [ADDR_WIDTH:0] wr_ptr_reg = {ADDR_WIDTH+1{1'b0}};
+reg [ADDR_WIDTH:0] wr_ptr_cur_reg = {ADDR_WIDTH+1{1'b0}};
+reg [ADDR_WIDTH:0] rd_ptr_reg = {ADDR_WIDTH+1{1'b0}};
+
+(* ramstyle = "no_rw_check" *)
+reg [WIDTH-1:0] mem[(2**ADDR_WIDTH)-1:0];
+reg [WIDTH-1:0] mem_read_data_reg;
+reg mem_read_data_valid_reg = 1'b0;
+
+wire [WIDTH-1:0] s_axis;
+
+reg [WIDTH-1:0] m_axis_pipe_reg[PIPELINE_OUTPUT-1:0];
+reg [PIPELINE_OUTPUT-1:0] m_axis_tvalid_pipe_reg = 1'b0;
+
+// full when first MSB different but rest same
+wire full = wr_ptr_reg == (rd_ptr_reg ^ {1'b1, {ADDR_WIDTH{1'b0}}});
+wire delayed_full = $unsigned(wr_ptr_reg - rd_ptr_reg) >= 2**ADDR_WIDTH - DELAY_CYCLES;
+wire full_cur = wr_ptr_cur_reg == (rd_ptr_reg ^ {1'b1, {ADDR_WIDTH{1'b0}}});
+// empty when pointers match exactly
+wire empty = wr_ptr_reg == rd_ptr_reg;
+// overflow within packet
+wire full_wr = wr_ptr_reg == (wr_ptr_cur_reg ^ {1'b1, {ADDR_WIDTH{1'b0}}});
+
+reg drop_frame_reg = 1'b0;
+reg send_frame_reg = 1'b0;
+reg overflow_reg = 1'b0;
+reg bad_frame_reg = 1'b0;
+reg good_frame_reg = 1'b0;
+
+assign s_axis_tready = FRAME_FIFO ? (!full_cur || (full_wr && DROP_OVERSIZE_FRAME) || DROP_WHEN_FULL) : !delayed_full;
+
+generate
+    assign s_axis[DATA_WIDTH-1:0] = s_axis_tdata;
+    if (KEEP_ENABLE) assign s_axis[KEEP_OFFSET +: KEEP_WIDTH] = s_axis_tkeep;
+    if (LAST_ENABLE) assign s_axis[LAST_OFFSET]               = s_axis_tlast;
+    if (ID_ENABLE)   assign s_axis[ID_OFFSET   +: ID_WIDTH]   = s_axis_tid;
+    if (DEST_ENABLE) assign s_axis[DEST_OFFSET +: DEST_WIDTH] = s_axis_tdest;
+    if (USER_ENABLE) assign s_axis[USER_OFFSET +: USER_WIDTH] = s_axis_tuser;
+endgenerate
+
+assign m_axis_tvalid = m_axis_tvalid_pipe_reg[PIPELINE_OUTPUT-1];
+
+assign m_axis_tdata = m_axis_pipe_reg[PIPELINE_OUTPUT-1][DATA_WIDTH-1:0];
+assign m_axis_tkeep = KEEP_ENABLE ? m_axis_pipe_reg[PIPELINE_OUTPUT-1][KEEP_OFFSET +: KEEP_WIDTH] : {KEEP_WIDTH{1'b1}};
+assign m_axis_tlast = LAST_ENABLE ? m_axis_pipe_reg[PIPELINE_OUTPUT-1][LAST_OFFSET]               : 1'b1;
+assign m_axis_tid   = ID_ENABLE   ? m_axis_pipe_reg[PIPELINE_OUTPUT-1][ID_OFFSET   +: ID_WIDTH]   : {ID_WIDTH{1'b0}};
+assign m_axis_tdest = DEST_ENABLE ? m_axis_pipe_reg[PIPELINE_OUTPUT-1][DEST_OFFSET +: DEST_WIDTH] : {DEST_WIDTH{1'b0}};
+assign m_axis_tuser = USER_ENABLE ? m_axis_pipe_reg[PIPELINE_OUTPUT-1][USER_OFFSET +: USER_WIDTH] : {USER_WIDTH{1'b0}};
+
+assign status_overflow = overflow_reg;
+assign status_bad_frame = bad_frame_reg;
+assign status_good_frame = good_frame_reg;
+
+// Write logic
+always @(posedge clk) begin
+    overflow_reg <= 1'b0;
+    bad_frame_reg <= 1'b0;
+    good_frame_reg <= 1'b0;
+
+    if (!full && s_axis_tvalid) begin
+        // transfer in
+        if (!FRAME_FIFO) begin
+            // normal FIFO mode
+            mem[wr_ptr_reg[ADDR_WIDTH-1:0]] <= s_axis;
+            wr_ptr_reg <= wr_ptr_reg + 1;
+        end else if ((full_cur && DROP_WHEN_FULL) || (full_wr && DROP_OVERSIZE_FRAME) || drop_frame_reg) begin
+            // full, packet overflow, or currently dropping frame
+            // drop frame
+            drop_frame_reg <= 1'b1;
+            if (s_axis_tlast) begin
+                // end of frame, reset write pointer
+                wr_ptr_cur_reg <= wr_ptr_reg;
+                drop_frame_reg <= 1'b0;
+                overflow_reg <= 1'b1;
+            end
+        end else begin
+            // store it
+            mem[wr_ptr_cur_reg[ADDR_WIDTH-1:0]] <= s_axis;
+            wr_ptr_cur_reg <= wr_ptr_cur_reg + 1;
+            if (s_axis_tlast || (!DROP_OVERSIZE_FRAME && (full_wr || send_frame_reg))) begin
+                // end of frame or send frame
+                send_frame_reg <= !s_axis_tlast;
+                if (s_axis_tlast && DROP_BAD_FRAME && USER_BAD_FRAME_MASK & ~(s_axis_tuser ^ USER_BAD_FRAME_VALUE)) begin
+                    // bad packet, reset write pointer
+                    wr_ptr_cur_reg <= wr_ptr_reg;
+                    bad_frame_reg <= 1'b1;
+                end else begin
+                    // good packet or packet overflow, update write pointer
+                    wr_ptr_reg <= wr_ptr_cur_reg + 1;
+                    good_frame_reg <= s_axis_tlast;
+                end
+            end
+        end
+    end else if (s_axis_tvalid && full_wr && FRAME_FIFO && !DROP_OVERSIZE_FRAME) begin
+        // data valid with packet overflow
+        // update write pointer
+        send_frame_reg <= 1'b1;
+        wr_ptr_reg <= wr_ptr_cur_reg;
+    end
+
+    if (rst) begin
+        wr_ptr_reg <= {ADDR_WIDTH+1{1'b0}};
+        wr_ptr_cur_reg <= {ADDR_WIDTH+1{1'b0}};
+
+        drop_frame_reg <= 1'b0;
+        send_frame_reg <= 1'b0;
+        overflow_reg <= 1'b0;
+        bad_frame_reg <= 1'b0;
+        good_frame_reg <= 1'b0;
+    end
+end
+
+// Read logic
+integer j;
+
+always @(posedge clk) begin
+    if (m_axis_tready) begin
+        // output ready; invalidate stage
+        m_axis_tvalid_pipe_reg[PIPELINE_OUTPUT-1] <= 1'b0;
+    end
+
+    for (j = PIPELINE_OUTPUT-1; j > 0; j = j - 1) begin
+        if (m_axis_tready || ((~m_axis_tvalid_pipe_reg) >> j)) begin
+            // output ready or bubble in pipeline; transfer down pipeline
+            m_axis_tvalid_pipe_reg[j] <= m_axis_tvalid_pipe_reg[j-1];
+            m_axis_pipe_reg[j] <= m_axis_pipe_reg[j-1];
+            m_axis_tvalid_pipe_reg[j-1] <= 1'b0;
+        end
+    end
+
+    if (m_axis_tready || ~m_axis_tvalid_pipe_reg) begin
+        // output ready or bubble in pipeline; read new data from FIFO
+        m_axis_tvalid_pipe_reg[0] <= 1'b0;
+        m_axis_pipe_reg[0] <= mem[rd_ptr_reg[ADDR_WIDTH-1:0]];
+        if (!empty) begin
+            // not empty, increment pointer
+            m_axis_tvalid_pipe_reg[0] <= 1'b1;
+            rd_ptr_reg <= rd_ptr_reg + 1;
+        end
+    end
+
+    if (rst) begin
+        rd_ptr_reg <= {ADDR_WIDTH+1{1'b0}};
+        m_axis_tvalid_pipe_reg <= {PIPELINE_OUTPUT{1'b0}};
+    end
+end
+
+endmodule
+
+`resetall
diff --color -burN ./corundum-rtl/cpl_queue_manager.v ./hp-rtl/cpl_queue_manager.v
--- ./corundum-rtl/cpl_queue_manager.v	2024-09-12 17:15:07.561794868 -0400
+++ ./hp-rtl/cpl_queue_manager.v	2024-09-12 17:14:43.101796026 -0400
@@ -193,7 +193,7 @@
 reg [PIPELINE-1:0] op_commit_pipe_reg = {PIPELINE{1'b0}}, op_commit_pipe_next;
 
 reg [QUEUE_INDEX_WIDTH-1:0] queue_ram_addr_pipeline_reg[PIPELINE-1:0], queue_ram_addr_pipeline_next[PIPELINE-1:0];
-reg [2:0] axil_reg_pipeline_reg[PIPELINE-1:0], axil_reg_pipeline_next[PIPELINE-1:0];
+reg [3:0] axil_reg_pipeline_reg[PIPELINE-1:0], axil_reg_pipeline_next[PIPELINE-1:0];
 reg [AXIL_DATA_WIDTH-1:0] write_data_pipeline_reg[PIPELINE-1:0], write_data_pipeline_next[PIPELINE-1:0];
 reg [AXIL_STRB_WIDTH-1:0] write_strobe_pipeline_reg[PIPELINE-1:0], write_strobe_pipeline_next[PIPELINE-1:0];
 reg [REQ_TAG_WIDTH-1:0] req_tag_pipeline_reg[PIPELINE-1:0], req_tag_pipeline_next[PIPELINE-1:0];
@@ -285,10 +285,10 @@
 assign s_axil_rresp = 2'b00;
 assign s_axil_rvalid = s_axil_rvalid_reg;
 
-wire [QUEUE_INDEX_WIDTH-1:0] s_axil_awaddr_queue = s_axil_awaddr >> 5;
-wire [2:0] s_axil_awaddr_reg = s_axil_awaddr >> 2;
-wire [QUEUE_INDEX_WIDTH-1:0] s_axil_araddr_queue = s_axil_araddr >> 5;
-wire [2:0] s_axil_araddr_reg = s_axil_araddr >> 2;
+wire [QUEUE_INDEX_WIDTH-1:0] s_axil_awaddr_queue = s_axil_awaddr >> 6;
+wire [3:0] s_axil_awaddr_reg = s_axil_awaddr >> 2;
+wire [QUEUE_INDEX_WIDTH-1:0] s_axil_araddr_queue = s_axil_araddr >> 6;
+wire [3:0] s_axil_araddr_reg = s_axil_araddr >> 2;
 
 wire queue_active = op_table_active[queue_ram_read_data_op_index] && op_table_queue[queue_ram_read_data_op_index] == queue_ram_addr_pipeline_reg[PIPELINE-1];
 wire queue_full_idle = ($unsigned(queue_ram_read_data_head_ptr - queue_ram_read_data_tail_ptr) & ({QUEUE_PTR_WIDTH{1'b1}} << queue_ram_read_data_log_size)) != 0;
diff --color -burN ./corundum-rtl/desc_fetch.v ./hp-rtl/desc_fetch.v
--- ./corundum-rtl/desc_fetch.v	2024-09-12 17:15:07.561794868 -0400
+++ ./hp-rtl/desc_fetch.v	2024-09-12 17:14:43.101796026 -0400
@@ -392,33 +392,33 @@
     /*
      * DMA read descriptor input
      */
-    .s_axis_read_desc_ram_addr(dma_read_desc_ram_addr_reg),
-    .s_axis_read_desc_len(dma_read_desc_len_reg),
-    .s_axis_read_desc_tag(dma_read_desc_tag_reg),
-    .s_axis_read_desc_id(dma_read_desc_id_reg),
-    .s_axis_read_desc_dest(0),
-    .s_axis_read_desc_user(dma_read_desc_user_reg),
-    .s_axis_read_desc_valid(dma_read_desc_valid_reg),
-    .s_axis_read_desc_ready(dma_read_desc_ready),
+    .s_axis_read_desc_ram_addr      (dma_read_desc_ram_addr_reg),
+    .s_axis_read_desc_len           (dma_read_desc_len_reg),
+    .s_axis_read_desc_tag           (dma_read_desc_tag_reg),
+    .s_axis_read_desc_id            (dma_read_desc_id_reg),
+    .s_axis_read_desc_dest          (0),
+    .s_axis_read_desc_user          (dma_read_desc_user_reg),
+    .s_axis_read_desc_valid         (dma_read_desc_valid_reg),
+    .s_axis_read_desc_ready         (dma_read_desc_ready),
 
     /*
      * DMA read descriptor status output
      */
-    .m_axis_read_desc_status_tag(dma_read_desc_status_tag),
-    .m_axis_read_desc_status_error(),
-    .m_axis_read_desc_status_valid(dma_read_desc_status_valid),
+    .m_axis_read_desc_status_tag    (dma_read_desc_status_tag),
+    .m_axis_read_desc_status_error  (),
+    .m_axis_read_desc_status_valid  (dma_read_desc_status_valid),
 
     /*
      * AXI stream read data output
      */
-    .m_axis_read_data_tdata(m_axis_desc_tdata),
-    .m_axis_read_data_tkeep(m_axis_desc_tkeep),
-    .m_axis_read_data_tvalid(m_axis_desc_tvalid),
-    .m_axis_read_data_tready(m_axis_desc_tready),
-    .m_axis_read_data_tlast(m_axis_desc_tlast),
-    .m_axis_read_data_tid(m_axis_desc_tid),
-    .m_axis_read_data_tdest(),
-    .m_axis_read_data_tuser(m_axis_desc_tuser),
+    .m_axis_read_data_tdata         (m_axis_desc_tdata),
+    .m_axis_read_data_tkeep         (m_axis_desc_tkeep),
+    .m_axis_read_data_tvalid        (m_axis_desc_tvalid),
+    .m_axis_read_data_tready        (m_axis_desc_tready),
+    .m_axis_read_data_tlast         (m_axis_desc_tlast),
+    .m_axis_read_data_tid           (m_axis_desc_tid),
+    .m_axis_read_data_tdest         (),
+    .m_axis_read_data_tuser         (m_axis_desc_tuser),
 
     /*
      * RAM interface
@@ -487,21 +487,26 @@
 
     // queue query
     // wait for descriptor request
-    s_axis_req_ready_next = enable && active_count_reg < DESC_TABLE_SIZE && !desc_table_active[desc_table_start_ptr_reg & DESC_PTR_MASK] && ($unsigned(desc_table_start_ptr_reg - desc_table_finish_ptr_reg) < DESC_TABLE_SIZE) && (!m_axis_desc_dequeue_req_valid_reg || (m_axis_desc_dequeue_req_valid_reg & m_axis_desc_dequeue_req_ready));
+    s_axis_req_ready_next = enable && active_count_reg < DESC_TABLE_SIZE && 
+        !desc_table_active[desc_table_start_ptr_reg & DESC_PTR_MASK] && 
+        ($unsigned(desc_table_start_ptr_reg - desc_table_finish_ptr_reg) < DESC_TABLE_SIZE) && 
+        (!m_axis_desc_dequeue_req_valid_reg || (m_axis_desc_dequeue_req_valid_reg & m_axis_desc_dequeue_req_ready));
     if (s_axis_req_ready && s_axis_req_valid) begin
         s_axis_req_ready_next = 1'b0;
 
         // initiate queue query
         m_axis_desc_dequeue_req_queue_next = s_axis_req_queue;
         m_axis_desc_dequeue_req_tag_next = s_axis_req_tag;
-        m_axis_desc_dequeue_req_valid_next = 1 << s_axis_req_sel;
+        m_axis_desc_dequeue_req_valid_next = 1 << s_axis_req_sel; // sel 0 --> tx, 1 --> rx
 
         inc_active = 1'b1;
     end
 
     // descriptor fetch
     // wait for queue query response
-    if (dequeue_resp_enc_valid && !m_axis_dma_read_desc_valid_reg && !desc_table_active[desc_table_start_ptr_reg & DESC_PTR_MASK] && ($unsigned(desc_table_start_ptr_reg - desc_table_finish_ptr_reg) < DESC_TABLE_SIZE)) begin
+    if (dequeue_resp_enc_valid && !m_axis_dma_read_desc_valid_reg && 
+        !desc_table_active[desc_table_start_ptr_reg & DESC_PTR_MASK] && 
+        ($unsigned(desc_table_start_ptr_reg - desc_table_finish_ptr_reg) < DESC_TABLE_SIZE)) begin
         s_axis_desc_dequeue_resp_ready_next = 1 << dequeue_resp_enc;
 
         // store in descriptor table
@@ -551,8 +556,11 @@
     // return descriptor
     // wait for descriptor fetch completion
     // TODO descriptor validation?
-    if (desc_table_active[desc_table_desc_read_ptr_reg & DESC_PTR_MASK] && desc_table_desc_read_ptr_reg != desc_table_start_ptr_reg) begin
-        if (desc_table_desc_fetched[desc_table_desc_read_ptr_reg & DESC_PTR_MASK] && !(m_axis_desc_dequeue_commit_valid & 1 << desc_table_sel[desc_table_desc_read_ptr_reg & DESC_PTR_MASK]) && !dma_read_desc_valid_reg) begin
+    if (desc_table_active[desc_table_desc_read_ptr_reg & DESC_PTR_MASK] 
+        && desc_table_desc_read_ptr_reg != desc_table_start_ptr_reg) begin
+        if (desc_table_desc_fetched[desc_table_desc_read_ptr_reg & DESC_PTR_MASK] 
+            && !(m_axis_desc_dequeue_commit_valid & 1 << desc_table_sel[desc_table_desc_read_ptr_reg & DESC_PTR_MASK])
+            && !dma_read_desc_valid_reg) begin
             // update entry in descriptor table
             desc_table_desc_read_en = 1'b1;
 
@@ -580,7 +588,8 @@
 
     // finish operation
     // wait for descriptor read completion
-    if (desc_table_active[desc_table_finish_ptr_reg & DESC_PTR_MASK] && desc_table_finish_ptr_reg != desc_table_start_ptr_reg) begin
+    if (desc_table_active[desc_table_finish_ptr_reg & DESC_PTR_MASK] && 
+        desc_table_finish_ptr_reg != desc_table_start_ptr_reg) begin
         if (desc_table_desc_read_done[desc_table_finish_ptr_reg & DESC_PTR_MASK]) begin
             // invalidate entry in descriptor table
             desc_table_finish_en = 1'b1;
@@ -625,6 +634,7 @@
 
     active_count_reg <= active_count_reg + inc_active - dec_active_1 - dec_active_2;
 
+
     if (desc_table_start_en) begin
         desc_table_active[desc_table_start_ptr_reg & DESC_PTR_MASK] <= 1'b1;
         desc_table_desc_fetched[desc_table_start_ptr_reg & DESC_PTR_MASK] <= 1'b0;
diff --color -burN ./corundum-rtl/ingress_filter.v ./hp-rtl/ingress_filter.v
--- ./corundum-rtl/ingress_filter.v	1969-12-31 19:00:00.000000000 -0500
+++ ./hp-rtl/ingress_filter.v	2024-09-12 17:14:43.101796026 -0400
@@ -0,0 +1,557 @@
+`resetall
+`timescale 1ns / 1ps
+`default_nettype none
+
+
+
+module ingress_filter #(
+    // Width of AXI stream interfaces in bits
+    parameter AXIS_DATA_WIDTH = 512,
+    // AXI stream tkeep signal width (words per cycle)
+    parameter AXIS_KEEP_WIDTH = AXIS_DATA_WIDTH/8,
+    // AXI stream tid signal width
+    parameter AXIS_ID_WIDTH = 8,
+    // AXI stream tdest signal width
+    parameter AXIS_DEST_WIDTH = 8,
+    // AXI stream tuser signal width
+    parameter S_AXIS_USER_WIDTH = 1,
+    // AXI stream tuser signal width
+    parameter M_AXIS_USER_WIDTH = S_AXIS_USER_WIDTH,
+    // Max receive packet size
+    parameter MAX_RX_SIZE = 2048,
+    //=======================================
+    parameter MSG_ID_WIDTH = 32,
+    parameter MSG_OFF_WIDTH = 8,
+    parameter MSG_DST_PORT = 16'hf1f1,
+    parameter RECONF_START_END_PORT = 16'h2f2f,
+    parameter RECONF_START = 8'h1,
+    parameter RECONF_END = 8'h2,
+    parameter RECONF_DST_ETH_ADDR = 48'hefefefefefef,
+    parameter RECONF_DST_PORT = 16'h1f1f,
+    parameter AXIS_TX_ID_WIDTH = 16,
+    parameter AXIS_TX_DEST_WIDTH = 16,
+    parameter AXIS_TX_USER_WIDTH = 16,
+    parameter RMTP_DATA_FLAG = 8'h1,
+    parameter RMTP_ACK_FLAG = 8'h2,
+    parameter RMTP_ACK_RQUIRED_FLAG = 8'h4
+)
+(
+
+    /*
+     * Receive data input
+     */
+    input  wire [AXIS_DATA_WIDTH-1:0]       s_axis_tdata,
+    input  wire [AXIS_KEEP_WIDTH-1:0]       s_axis_tkeep,
+    input  wire                             s_axis_tvalid,
+    output wire                             s_axis_tready,
+    input  wire                             s_axis_tlast,
+    input  wire [AXIS_ID_WIDTH-1:0]         s_axis_tid,
+    input  wire [AXIS_DEST_WIDTH-1:0]       s_axis_tdest,
+    input  wire [S_AXIS_USER_WIDTH-1:0]     s_axis_tuser,
+
+    /*
+     * Receive data output
+     */
+    output wire [AXIS_DATA_WIDTH-1:0]       m_axis_tdata,
+    output wire [AXIS_KEEP_WIDTH-1:0]       m_axis_tkeep,
+    output wire                             m_axis_tvalid,
+    input  wire                             m_axis_tready,
+    output wire                             m_axis_tlast,
+    output wire [AXIS_ID_WIDTH-1:0]         m_axis_tid,
+    output wire [AXIS_DEST_WIDTH-1:0]       m_axis_tdest,
+    output wire [M_AXIS_USER_WIDTH-1:0]     m_axis_tuser,
+    output wire [MSG_ID_WIDTH-1:0]          m_axis_msg_id,
+    output wire                             m_axis_is_msg,
+    output wire [MSG_OFF_WIDTH-1:0]         m_axis_msg_len,
+    output wire [MSG_OFF_WIDTH-1:0]         m_axis_msg_offset,
+
+    //==========================================================
+    // ingress to retx 
+    output wire [MSG_ID_WIDTH-1:0]          m_ingress_to_retx_ack_msg_id,
+    output wire [MSG_OFF_WIDTH-1:0]         m_ingress_to_retx_ack_msg_off,
+    output wire                             m_ingress_to_retx_ack_msg_valid,
+
+    // seperate AXIS signals for reconfiguration
+    output wire [AXIS_DATA_WIDTH-1:0]       m_ctrl_axis_tdata,
+    output wire [AXIS_KEEP_WIDTH-1:0]       m_ctrl_axis_tkeep,
+    output wire                             m_ctrl_axis_tvalid,
+    input  wire                             m_ctrl_axis_tready,
+    //
+    input  wire                 clk,
+    input  wire                 rst
+);
+
+//============================
+localparam IP_ETHTYPE = 16'h0008;
+localparam UDP_IPPROTO = 8'h11;
+localparam WAIT_NEW_PKT_FRAME  = 0;
+localparam WAIT_LAST_PKT_FRAME = 1;
+localparam WAIT_LAST_CTRL_PKT_FRAME = 2;
+localparam FLUSH_TILL_LAST_PKT_FRAME = 3;
+
+reg [3:0] state = WAIT_NEW_PKT_FRAME, state_next;
+
+reg [MSG_ID_WIDTH-1:0]          m_ingress_to_retx_ack_msg_id_reg = 0, m_ingress_to_retx_ack_msg_id_next;
+reg [MSG_OFF_WIDTH-1:0]         m_ingress_to_retx_ack_msg_off_reg = 0, m_ingress_to_retx_ack_msg_off_next;
+reg                             m_ingress_to_retx_ack_msg_valid_reg = 0, m_ingress_to_retx_ack_msg_valid_next;
+
+reg [MSG_ID_WIDTH-1:0]          m_ingress_to_retx_ack_msg_id_reg_d1;
+reg [MSG_OFF_WIDTH-1:0]         m_ingress_to_retx_ack_msg_off_reg_d1;
+reg                             m_ingress_to_retx_ack_msg_valid_reg_d1;
+
+assign m_ingress_to_retx_ack_msg_valid = m_ingress_to_retx_ack_msg_valid_reg_d1;
+assign m_ingress_to_retx_ack_msg_id = m_ingress_to_retx_ack_msg_id_reg_d1;
+assign m_ingress_to_retx_ack_msg_off = m_ingress_to_retx_ack_msg_off_reg_d1;
+
+reg [AXIS_DATA_WIDTH-1:0]       m_axis_tdata_int;
+reg [AXIS_KEEP_WIDTH-1:0]       m_axis_tkeep_int;
+reg                             m_axis_tvalid_int;
+reg                             m_axis_tlast_int;
+reg [AXIS_ID_WIDTH-1:0]         m_axis_tid_int;
+reg [AXIS_DEST_WIDTH-1:0]       m_axis_tdest_int;
+reg [M_AXIS_USER_WIDTH-1:0]     m_axis_tuser_int;
+reg [MSG_ID_WIDTH-1:0]          m_axis_msg_id_int;
+reg                             m_axis_is_msg_int;
+reg [MSG_OFF_WIDTH-1:0]         m_axis_msg_len_int;
+reg [MSG_OFF_WIDTH-1:0]         m_axis_msg_offset_int;
+
+reg                             m_axis_tready_int_reg = 1'b0;
+wire                            m_axis_tready_int_early;
+
+reg [AXIS_DATA_WIDTH-1:0]       m_ctrl_axis_tdata_int;
+reg [AXIS_KEEP_WIDTH-1:0]       m_ctrl_axis_tkeep_int;
+reg                             m_ctrl_axis_tvalid_int;
+
+reg                             m_ctrl_axis_tready_int_reg = 1'b0;
+wire                            m_ctrl_axis_tready_int_early;
+
+// output s_axis_tready
+reg  s_axis_tready_reg = 0, s_axis_tready_next;
+assign s_axis_tready = s_axis_tready_reg;
+
+// reconf ctrl 
+reg [AXIS_DATA_WIDTH-1:0]       m_ctrl_axis_tdata_reg = 0;
+reg [AXIS_KEEP_WIDTH-1:0]       m_ctrl_axis_tkeep_reg = 0;
+reg                             m_ctrl_axis_tvalid_reg = 0, m_ctrl_axis_tvalid_next;
+
+assign m_ctrl_axis_tdata = m_ctrl_axis_tdata_reg;
+assign m_ctrl_axis_tkeep = m_ctrl_axis_tkeep_reg;
+assign m_ctrl_axis_tvalid = m_ctrl_axis_tvalid_reg;
+
+// 
+reg [MSG_ID_WIDTH-1:0]          m_axis_msg_id_reg = 0;
+reg                             m_axis_is_msg_reg = 0;
+reg [MSG_OFF_WIDTH-1:0]         m_axis_msg_len_reg = 0;
+reg [MSG_OFF_WIDTH-1:0]         m_axis_msg_offset_reg = 0;
+
+// reconf stop & start
+wire [31:0]                     app_id_one_hot_w;
+assign app_id_one_hot_w = 1'b1 << s_axis_tdata[42*8 +: 8];
+
+reg [31:0] app_id_drop_flags = 0, app_id_drop_flags_next;
+
+
+always @(*) begin
+
+    state_next = state;
+    app_id_drop_flags_next = app_id_drop_flags;
+
+    m_ingress_to_retx_ack_msg_valid_next = 1'b0;
+    m_ingress_to_retx_ack_msg_id_next = m_ingress_to_retx_ack_msg_id_reg;
+    m_ingress_to_retx_ack_msg_off_next = m_ingress_to_retx_ack_msg_off_reg;
+
+    // intermidiate signals
+    m_axis_tvalid_int = 1'b0;
+    m_axis_tdata_int  = 0;
+    m_axis_tkeep_int  = 0;
+    m_axis_tlast_int  = 0;
+    m_axis_tid_int    = 0;
+    m_axis_tdest_int  = 0;
+    m_axis_tuser_int  = 0;
+    m_axis_msg_id_int       = m_axis_msg_id_reg;
+    m_axis_is_msg_int       = m_axis_is_msg_reg;
+    m_axis_msg_len_int      = m_axis_msg_len_reg;
+    m_axis_msg_offset_int   = m_axis_msg_offset_reg;
+
+    s_axis_tready_next = m_axis_tready_int_early && m_ctrl_axis_tready_int_early;
+    // reconf ctrl 
+    m_ctrl_axis_tdata_int  = m_ctrl_axis_tdata_reg;
+    m_ctrl_axis_tkeep_int  = m_ctrl_axis_tkeep_reg;
+    m_ctrl_axis_tvalid_int = 1'b0;
+
+    // skid buffer
+    case (state)
+        WAIT_NEW_PKT_FRAME: begin
+            if (s_axis_tvalid && s_axis_tready) begin
+                if (s_axis_tdata[0 +: 48] != RECONF_DST_ETH_ADDR
+                    && s_axis_tdata[12*8 +: 16] == IP_ETHTYPE
+                    && s_axis_tdata[23*8 +: 8] == UDP_IPPROTO
+                    && s_axis_tdata[36*8 +: 16] == MSG_DST_PORT) begin
+
+                    if (app_id_one_hot_w & app_id_drop_flags) begin
+                        // drop packet if under run-time reconfiguration
+                        m_ingress_to_retx_ack_msg_valid_next = 1'b0;
+                        m_ingress_to_retx_ack_msg_id_next = 0;
+                        m_ingress_to_retx_ack_msg_off_next = 0;
+                        //
+                        m_axis_tvalid_int  =   1'b0;
+                        m_axis_tdata_int   =   s_axis_tdata;
+                        m_axis_tkeep_int   =   s_axis_tkeep;
+                        m_axis_tlast_int   =   s_axis_tlast;
+                        m_axis_tid_int     =   s_axis_tid;
+                        m_axis_tdest_int   =   s_axis_tdest;
+                        m_axis_tuser_int   =   s_axis_tuser;
+                        m_axis_msg_id_int  = 0;
+                        m_axis_is_msg_int  = 1'b0;
+                        m_axis_msg_len_int = 0;
+                        m_axis_msg_offset_int = 0;
+
+                        if (!s_axis_tlast) begin
+                            state_next = FLUSH_TILL_LAST_PKT_FRAME;
+                        end
+                    end
+                    else begin
+                        // data packet
+                        if (s_axis_tdata[45*8 +: 8] & RMTP_DATA_FLAG) begin
+                            // output
+                            m_axis_tvalid_int  =   1'b1;
+                            m_axis_tdata_int   =   s_axis_tdata;
+                            m_axis_tkeep_int   =   s_axis_tkeep;
+                            m_axis_tlast_int   =   s_axis_tlast;
+                            m_axis_tid_int     =   s_axis_tid;
+                            m_axis_tdest_int   =   s_axis_tdest;
+                            m_axis_tuser_int   =   s_axis_tuser;
+                            // MSG data packet
+                            m_axis_msg_id_int  = {s_axis_tdata[59*8 +:8],
+                                                        s_axis_tdata[58*8 +: 8],
+                                                        s_axis_tdata[57*8 +: 8],
+                                                        s_axis_tdata[56*8 +: 8]};
+                            m_axis_is_msg_int  = 1'b1;
+                            m_axis_msg_len_int = s_axis_tdata[43*8 +: 8];
+                            m_axis_msg_offset_int = s_axis_tdata[44*8 +: 8];
+
+                        end
+
+                        if (s_axis_tdata[45*8 +: 8] & RMTP_ACK_FLAG) begin
+                            // MSG ACK packet
+                            m_axis_tvalid_int = 1'b0;
+                            m_ingress_to_retx_ack_msg_id_next = {s_axis_tdata[59*8 +:8],
+                                                                    s_axis_tdata[58*8 +: 8],
+                                                                    s_axis_tdata[57*8 +: 8],
+                                                                    s_axis_tdata[56*8 +: 8]};
+                            m_ingress_to_retx_ack_msg_off_next = s_axis_tdata[44*8 +: 8];
+                            m_ingress_to_retx_ack_msg_valid_next = 1'b1;
+                        end
+                        // end
+
+                        if (!s_axis_tlast) begin
+                            state_next = WAIT_LAST_PKT_FRAME;
+                        end
+                    end
+                end
+                else if (s_axis_tdata[0 +: 48] == RECONF_DST_ETH_ADDR
+                            && s_axis_tdata[36*8 +: 16] == RECONF_DST_PORT) begin
+                    // reconf ctrl
+                    state_next = WAIT_LAST_CTRL_PKT_FRAME;
+                end
+                else if (s_axis_tdata[0 +: 48] == RECONF_DST_ETH_ADDR
+                            && s_axis_tdata[36*8 +: 16] == RECONF_START_END_PORT) begin
+                    if (s_axis_tdata[42*8 +: 8] == RECONF_START) begin
+                        app_id_drop_flags_next = app_id_drop_flags | (1'b1 << s_axis_tdata[43*8 +: 8]);
+                    end
+                    else if (s_axis_tdata[42*8 +: 8] == RECONF_END) begin
+                        app_id_drop_flags_next = app_id_drop_flags ^ (1'b1 << s_axis_tdata[43*8 +: 8]);
+                    end
+                end
+                else begin
+                    // non-MSG packet, just discard
+                    m_ingress_to_retx_ack_msg_valid_next = 1'b0;
+                    m_ingress_to_retx_ack_msg_id_next = 0;
+                    m_ingress_to_retx_ack_msg_off_next = 0;
+                    //
+                    m_axis_tvalid_int  =   1'b0;
+                    m_axis_tdata_int   =   s_axis_tdata;
+                    m_axis_tkeep_int   =   s_axis_tkeep;
+                    m_axis_tlast_int   =   s_axis_tlast;
+                    m_axis_tid_int     =   s_axis_tid;
+                    m_axis_tdest_int   =   s_axis_tdest;
+                    m_axis_tuser_int   =   s_axis_tuser;
+                    m_axis_msg_id_int  = 0;
+                    m_axis_is_msg_int  = 1'b0;
+                    m_axis_msg_len_int = 0;
+                    m_axis_msg_offset_int = 0;
+
+                    if (!s_axis_tlast) begin
+                        state_next = FLUSH_TILL_LAST_PKT_FRAME;
+                    end
+
+                end
+            end
+        end
+
+        WAIT_LAST_PKT_FRAME: begin
+            if (s_axis_tvalid && s_axis_tready) begin
+                m_axis_tvalid_int  =   1'b1;
+                m_axis_tdata_int   =   s_axis_tdata;
+                m_axis_tkeep_int   =   s_axis_tkeep;
+                m_axis_tlast_int   =   s_axis_tlast;
+                m_axis_tid_int     =   s_axis_tid;
+                m_axis_tdest_int   =   s_axis_tdest;
+                m_axis_tuser_int   =   s_axis_tuser;
+
+                if (s_axis_tlast) begin
+                    state_next = WAIT_NEW_PKT_FRAME;
+
+                    m_ingress_to_retx_ack_msg_valid_next = 1'b0;
+
+                end
+            end
+        end
+
+        WAIT_LAST_CTRL_PKT_FRAME: begin
+            if (s_axis_tvalid && s_axis_tready) begin
+                m_ctrl_axis_tvalid_int = 1'b1;
+
+                m_ctrl_axis_tdata_int = s_axis_tdata;
+                m_ctrl_axis_tkeep_int = s_axis_tkeep;
+
+                if (s_axis_tlast) begin
+                    state_next = WAIT_NEW_PKT_FRAME;
+                end
+            end
+        end
+
+        FLUSH_TILL_LAST_PKT_FRAME: begin
+            if (s_axis_tvalid && s_axis_tready) begin
+                m_axis_tvalid_int  =   1'b0;
+                m_axis_tdata_int   =   s_axis_tdata;
+                m_axis_tkeep_int   =   s_axis_tkeep;
+                m_axis_tlast_int   =   s_axis_tlast;
+                m_axis_tid_int     =   s_axis_tid;
+                m_axis_tdest_int   =   s_axis_tdest;
+                m_axis_tuser_int   =   s_axis_tuser;
+
+                if (s_axis_tlast) begin
+                    state_next = WAIT_NEW_PKT_FRAME;
+                    m_ingress_to_retx_ack_msg_valid_next = 1'b0;
+                end
+            end
+        end
+
+    endcase
+end
+
+reg [AXIS_DATA_WIDTH-1:0]       m_axis_tdata_reg = 0;
+reg [AXIS_KEEP_WIDTH-1:0]       m_axis_tkeep_reg = 0;
+reg                             m_axis_tvalid_reg = 0, m_axis_tvalid_next;
+reg                             m_axis_tlast_reg = 0;
+reg [AXIS_ID_WIDTH-1:0]         m_axis_tid_reg = 0;
+reg [AXIS_DEST_WIDTH-1:0]       m_axis_tdest_reg = 0;
+reg [M_AXIS_USER_WIDTH-1:0]     m_axis_tuser_reg = 0;
+
+reg [AXIS_DATA_WIDTH-1:0]       temp_m_axis_tdata_reg = 0;
+reg [AXIS_KEEP_WIDTH-1:0]       temp_m_axis_tkeep_reg = 0;
+reg                             temp_m_axis_tvalid_reg = 0, temp_m_axis_tvalid_next;
+reg                             temp_m_axis_tlast_reg = 0;
+reg [AXIS_ID_WIDTH-1:0]         temp_m_axis_tid_reg = 0;
+reg [AXIS_DEST_WIDTH-1:0]       temp_m_axis_tdest_reg = 0;
+reg [M_AXIS_USER_WIDTH-1:0]     temp_m_axis_tuser_reg = 0;
+reg [MSG_ID_WIDTH-1:0]          temp_m_axis_msg_id_reg = 0;
+reg                             temp_m_axis_is_msg_reg = 0;
+reg [MSG_OFF_WIDTH-1:0]         temp_m_axis_msg_len_reg = 0;
+reg [MSG_OFF_WIDTH-1:0]         temp_m_axis_msg_offset_reg = 0;
+
+// datapath control
+reg store_axis_int_to_output;
+reg store_axis_int_to_temp;
+reg store_axis_temp_to_output;
+
+// reconf
+reg [AXIS_DATA_WIDTH-1:0]       temp_m_ctrl_axis_tdata_reg = 0;
+reg [AXIS_KEEP_WIDTH-1:0]       temp_m_ctrl_axis_tkeep_reg = 0;
+reg                             temp_m_ctrl_axis_tvalid_reg = 0, temp_m_ctrl_axis_tvalid_next;
+
+reg store_ctrl_axis_int_to_output;
+reg store_ctrl_axis_int_to_temp;
+reg store_ctrl_axis_temp_to_output;
+
+// 
+assign m_axis_tdata = m_axis_tdata_reg;
+assign m_axis_tkeep = m_axis_tkeep_reg;
+assign m_axis_tvalid = m_axis_tvalid_reg;
+assign m_axis_tlast = m_axis_tlast_reg;
+assign m_axis_tid = m_axis_tid_reg;
+assign m_axis_tdest = m_axis_tdest_reg;
+assign m_axis_tuser = m_axis_tuser_reg;
+assign m_axis_is_msg = m_axis_is_msg_reg;
+assign m_axis_msg_id = m_axis_msg_id_reg;
+assign m_axis_msg_len = m_axis_msg_len_reg;
+assign m_axis_msg_offset = m_axis_msg_offset_reg;
+
+// enable ready input next cycle if output is ready or temp reg will not be
+// filled on the next cycle (output reg empty or no input)
+assign m_axis_tready_int_early = m_axis_tready || (!temp_m_axis_tvalid_reg && (!m_axis_tvalid_reg || !m_axis_tvalid_int));
+assign m_ctrl_axis_tready_int_early = m_ctrl_axis_tready || (!temp_m_ctrl_axis_tvalid_reg && (!m_ctrl_axis_tvalid_reg || !m_ctrl_axis_tvalid_int));
+
+// skid buffer
+always @(*) begin
+    m_axis_tvalid_next = m_axis_tvalid_reg;
+    temp_m_axis_tvalid_next = temp_m_axis_tvalid_reg;
+
+    store_axis_int_to_output = 1'b0;
+    store_axis_int_to_temp = 1'b0;
+    store_axis_temp_to_output = 1'b0;
+
+    if (m_axis_tready_int_reg) begin
+        if (m_axis_tready || !m_axis_tvalid_reg) begin
+            m_axis_tvalid_next = m_axis_tvalid_int;
+            store_axis_int_to_output = 1'b1;
+        end
+        else begin
+            temp_m_axis_tvalid_next = m_axis_tvalid_int;
+            store_axis_int_to_temp = 1'b1;
+        end
+    end
+    else if (m_axis_tready) begin
+        m_axis_tvalid_next = temp_m_axis_tvalid_reg;
+        temp_m_axis_tvalid_next = 1'b0;
+        store_axis_temp_to_output = 1'b1;
+    end
+
+    // reconf
+    m_ctrl_axis_tvalid_next = m_ctrl_axis_tvalid_reg;
+    temp_m_ctrl_axis_tvalid_next = temp_m_ctrl_axis_tvalid_reg;
+
+    store_ctrl_axis_int_to_output = 1'b0;
+    store_ctrl_axis_int_to_temp = 1'b0;
+    store_ctrl_axis_temp_to_output = 1'b0;
+
+    if (m_ctrl_axis_tready_int_reg) begin
+        if (m_ctrl_axis_tready || !m_ctrl_axis_tvalid_reg) begin
+            m_ctrl_axis_tvalid_next = m_ctrl_axis_tvalid_int;
+            store_ctrl_axis_int_to_output = 1'b1;
+        end
+        else begin
+            temp_m_ctrl_axis_tvalid_next = m_ctrl_axis_tvalid_int;
+            store_ctrl_axis_int_to_temp = 1'b1;
+        end
+    end
+    else if (m_ctrl_axis_tready) begin
+        m_ctrl_axis_tvalid_next = temp_m_ctrl_axis_tvalid_reg;
+        temp_m_ctrl_axis_tvalid_next = 1'b0;
+        store_ctrl_axis_temp_to_output = 1'b1;
+    end
+end
+
+
+always @(posedge clk) begin
+
+    m_axis_tvalid_reg <= m_axis_tvalid_next;
+    m_axis_tready_int_reg <= m_axis_tready_int_early;
+    temp_m_axis_tvalid_reg <= temp_m_axis_tvalid_next;
+
+    if (store_axis_int_to_output) begin
+        m_axis_tdata_reg <= m_axis_tdata_int;
+        m_axis_tkeep_reg <= m_axis_tkeep_int;
+        m_axis_tlast_reg <= m_axis_tlast_int;
+        m_axis_tid_reg   <= m_axis_tid_int;
+        m_axis_tdest_reg <= m_axis_tdest_int;
+        m_axis_tuser_reg <= m_axis_tuser_int;
+        m_axis_is_msg_reg       <= m_axis_is_msg_int;
+        m_axis_msg_id_reg       <= m_axis_msg_id_int;
+        m_axis_msg_len_reg      <= m_axis_msg_len_int;
+        m_axis_msg_offset_reg   <= m_axis_msg_offset_int;
+    end
+    else if (store_axis_temp_to_output) begin
+        m_axis_tdata_reg <= temp_m_axis_tdata_reg;
+        m_axis_tkeep_reg <= temp_m_axis_tkeep_reg;
+        m_axis_tlast_reg <= temp_m_axis_tlast_reg;
+        m_axis_tid_reg   <= temp_m_axis_tid_reg;
+        m_axis_tdest_reg <= temp_m_axis_tdest_reg;
+        m_axis_tuser_reg <= temp_m_axis_tuser_reg;
+        m_axis_is_msg_reg       <= temp_m_axis_is_msg_reg;
+        m_axis_msg_id_reg       <= temp_m_axis_msg_id_reg;
+        m_axis_msg_len_reg      <= temp_m_axis_msg_len_reg;
+        m_axis_msg_offset_reg   <= temp_m_axis_msg_offset_reg;
+    end
+
+    if (store_axis_int_to_temp) begin
+        temp_m_axis_tdata_reg <= m_axis_tdata_int;
+        temp_m_axis_tkeep_reg <= m_axis_tkeep_int;
+        temp_m_axis_tlast_reg <= m_axis_tlast_int;
+        temp_m_axis_tid_reg   <= m_axis_tid_int;
+        temp_m_axis_tdest_reg <= m_axis_tdest_int;
+        temp_m_axis_tuser_reg <= m_axis_tuser_int;
+        temp_m_axis_is_msg_reg       <= m_axis_is_msg_int;
+        temp_m_axis_msg_id_reg       <= m_axis_msg_id_int;
+        temp_m_axis_msg_len_reg      <= m_axis_msg_len_int;
+        temp_m_axis_msg_offset_reg   <= m_axis_msg_offset_int;
+    end
+
+
+    // reconf
+    m_ctrl_axis_tvalid_reg <= m_ctrl_axis_tvalid_next;
+    m_ctrl_axis_tready_int_reg <= m_ctrl_axis_tready_int_early;
+    temp_m_ctrl_axis_tvalid_reg <= temp_m_ctrl_axis_tvalid_next;
+
+    if (store_ctrl_axis_int_to_output) begin
+        m_ctrl_axis_tdata_reg <= m_ctrl_axis_tdata_int;
+        m_ctrl_axis_tkeep_reg <= m_ctrl_axis_tkeep_int;
+    end
+    else if (store_ctrl_axis_temp_to_output) begin
+        m_ctrl_axis_tdata_reg <= temp_m_ctrl_axis_tdata_reg;
+        m_ctrl_axis_tkeep_reg <= temp_m_ctrl_axis_tkeep_reg;
+    end
+
+    if (store_ctrl_axis_int_to_temp) begin
+        temp_m_ctrl_axis_tdata_reg <= m_ctrl_axis_tdata_int;
+        temp_m_ctrl_axis_tkeep_reg <= m_ctrl_axis_tkeep_int;
+    end
+
+    if (rst) begin
+        m_axis_tvalid_reg <= 1'b0;
+        m_axis_tready_int_reg <= 1'b0;
+        temp_m_axis_tvalid_reg <= 1'b0;
+
+        m_ctrl_axis_tvalid_reg <= 1'b0;
+        m_ctrl_axis_tready_int_reg <= 1'b0;
+        temp_m_ctrl_axis_tvalid_reg <= 1'b0;
+    end
+end
+
+
+always @(posedge clk) begin
+
+    state <= state_next;
+    app_id_drop_flags <= app_id_drop_flags_next;
+
+    m_ingress_to_retx_ack_msg_id_reg    <= m_ingress_to_retx_ack_msg_id_next;
+    m_ingress_to_retx_ack_msg_valid_reg <= m_ingress_to_retx_ack_msg_valid_next;
+    m_ingress_to_retx_ack_msg_off_reg   <= m_ingress_to_retx_ack_msg_off_next;
+
+    m_ingress_to_retx_ack_msg_id_reg_d1    <= m_ingress_to_retx_ack_msg_id_reg;
+    m_ingress_to_retx_ack_msg_valid_reg_d1 <= m_ingress_to_retx_ack_msg_valid_reg;
+    m_ingress_to_retx_ack_msg_off_reg_d1   <= m_ingress_to_retx_ack_msg_off_reg;
+
+    s_axis_tready_reg <= s_axis_tready_next;
+
+    if (rst) begin
+        state <= WAIT_NEW_PKT_FRAME;
+        app_id_drop_flags <= 0;
+
+        m_ingress_to_retx_ack_msg_id_reg    <= 0;
+        m_ingress_to_retx_ack_msg_valid_reg <= 0;
+        m_ingress_to_retx_ack_msg_off_reg   <= 0;
+
+        m_ingress_to_retx_ack_msg_id_reg_d1    <= 0;
+        m_ingress_to_retx_ack_msg_valid_reg_d1 <= 0;
+        m_ingress_to_retx_ack_msg_off_reg_d1   <= 0;
+
+        s_axis_tready_reg       <= 0;
+    end
+end
+
+
+endmodule
+
+`resetall
diff --color -burN ./corundum-rtl/memloader.v ./hp-rtl/memloader.v
--- ./corundum-rtl/memloader.v	1969-12-31 19:00:00.000000000 -0500
+++ ./hp-rtl/memloader.v	2024-09-12 17:14:43.101796026 -0400
@@ -0,0 +1,501 @@
+`resetall
+`timescale 1ns / 1ps
+`default_nettype none
+
+module memloader #(
+    parameter NUM_FIFOS = 64,
+    parameter CL_NUM_FIFOS = $clog2(NUM_FIFOS), // --> log2(64) = 6
+    parameter FIFO_DATA_WIDTH = 8,
+    parameter FIFO_DEPTH = 128,
+    parameter OUTPUT_DATA_WIDTH = NUM_FIFOS * FIFO_DATA_WIDTH,
+    parameter OUTPUT_KEEP_WIDTH = OUTPUT_DATA_WIDTH/8
+)
+(
+    // input data
+    input  wire [OUTPUT_DATA_WIDTH-1:0]     s_input_tdata,
+    input  wire [OUTPUT_KEEP_WIDTH-1:0]     s_input_tkeep,
+    input  wire                             s_input_tvalid,
+    output wire                             s_input_tready,
+
+    // output 
+    input  wire                             m_output_tready,
+    input  wire [CL_NUM_FIFOS:0]            m_consumed_bytes,
+    output wire [CL_NUM_FIFOS:0]            m_available_bytes,
+    output wire                             m_output_tvalid,
+    output wire [OUTPUT_DATA_WIDTH-1:0]     m_output_tdata,
+
+    input  wire                             clk,
+    input  wire                             rst
+);
+
+function [15:0] byte_len (input [OUTPUT_KEEP_WIDTH-1:0] keep);
+    integer i;
+    begin
+        byte_len = 0;
+        for (i = 0; i<OUTPUT_KEEP_WIDTH; i=i+1) begin
+            if (keep[i] == 1'b1) begin
+                byte_len = byte_len + 1;
+            end
+        end
+    end
+endfunction
+
+integer queue_no, ind;
+
+
+reg  [FIFO_DATA_WIDTH-1:0] fifo_in_tdata_reg [NUM_FIFOS-1:0], fifo_in_tdata_next [NUM_FIFOS-1:0];
+reg  [NUM_FIFOS-1:0]fifo_in_tvalid_reg, fifo_in_tvalid_next;
+wire [NUM_FIFOS-1:0]fifo_in_tready;
+
+wire all_ready_wire;
+
+assign s_input_tready = all_ready_wire;
+assign all_ready_wire = fifo_in_tready[0] &&
+                        fifo_in_tready[1] &&
+                        fifo_in_tready[2] &&
+                        fifo_in_tready[3] &&
+                        fifo_in_tready[4] &&
+                        fifo_in_tready[5] &&
+                        fifo_in_tready[6] &&
+                        fifo_in_tready[7] &&
+                        fifo_in_tready[8] &&
+                        fifo_in_tready[9] &&
+                        fifo_in_tready[10] &&
+                        fifo_in_tready[11] &&
+                        fifo_in_tready[12] &&
+                        fifo_in_tready[13] &&
+                        fifo_in_tready[14] &&
+                        fifo_in_tready[15] &&
+                        fifo_in_tready[16] &&
+                        fifo_in_tready[17] &&
+                        fifo_in_tready[18] &&
+                        fifo_in_tready[19] &&
+                        fifo_in_tready[20] &&
+                        fifo_in_tready[21] &&
+                        fifo_in_tready[22] &&
+                        fifo_in_tready[23] &&
+                        fifo_in_tready[24] &&
+                        fifo_in_tready[25] &&
+                        fifo_in_tready[26] &&
+                        fifo_in_tready[27] &&
+                        fifo_in_tready[28] &&
+                        fifo_in_tready[29] &&
+                        fifo_in_tready[30] &&
+                        fifo_in_tready[31] &&
+                        fifo_in_tready[32] &&
+                        fifo_in_tready[33] &&
+                        fifo_in_tready[34] &&
+                        fifo_in_tready[35] &&
+                        fifo_in_tready[36] &&
+                        fifo_in_tready[37] &&
+                        fifo_in_tready[38] &&
+                        fifo_in_tready[39] &&
+                        fifo_in_tready[40] &&
+                        fifo_in_tready[41] &&
+                        fifo_in_tready[42] &&
+                        fifo_in_tready[43] &&
+                        fifo_in_tready[44] &&
+                        fifo_in_tready[45] &&
+                        fifo_in_tready[46] &&
+                        fifo_in_tready[47] &&
+                        fifo_in_tready[48] &&
+                        fifo_in_tready[49] &&
+                        fifo_in_tready[50] &&
+                        fifo_in_tready[51] &&
+                        fifo_in_tready[52] &&
+                        fifo_in_tready[53] &&
+                        fifo_in_tready[54] &&
+                        fifo_in_tready[55] &&
+                        fifo_in_tready[56] &&
+                        fifo_in_tready[57] &&
+                        fifo_in_tready[58] &&
+                        fifo_in_tready[59] &&
+                        fifo_in_tready[60] &&
+                        fifo_in_tready[61] &&
+                        fifo_in_tready[62] &&
+                        fifo_in_tready[63];
+
+// fifo out signals
+wire [FIFO_DATA_WIDTH-1:0] fifo_out_tdata [NUM_FIFOS-1:0];
+wire [NUM_FIFOS-1:0] fifo_out_tvalid;
+wire [NUM_FIFOS-1:0] fifo_out_tready;
+reg  [NUM_FIFOS-1:0] fifo_out_tready_next, fifo_out_tready_reg; //
+
+generate
+    genvar i;
+    // NOTE: the axis_srl_fifo is one-cycle rd/wr
+    for (i=0; i<NUM_FIFOS; i=i+1) begin: fifos
+        axis_fifo #(
+            .DATA_WIDTH(FIFO_DATA_WIDTH),
+            .DEPTH(FIFO_DEPTH*FIFO_DATA_WIDTH/8),
+            // .DEPTH(FIFO_DEPTH),
+            .KEEP_ENABLE(0),
+            .LAST_ENABLE(0),
+            .ID_ENABLE(0),
+            .DEST_ENABLE(0),
+            .USER_ENABLE(0),
+            .FRAME_FIFO(0)
+        )
+        srl_fifo_ins (
+            .s_axis_tdata       (fifo_in_tdata_reg[i]),
+            .s_axis_tvalid      (fifo_in_tvalid_reg[i]),
+            .s_axis_tready      (fifo_in_tready[i]),
+            .s_axis_tkeep       (1'b0),
+            .s_axis_tlast       (1'b0),
+            .s_axis_tid         (1'b0),
+            .s_axis_tdest       (1'b0),
+            .s_axis_tuser       (1'b0),
+
+            .m_axis_tdata       (fifo_out_tdata[i]),
+            .m_axis_tvalid      (fifo_out_tvalid[i]),
+            .m_axis_tready      (fifo_out_tready[i]), // TODO: watchout
+            .m_axis_tkeep       (),
+            .m_axis_tlast       (),
+            .m_axis_tid         (),
+            .m_axis_tdest       (),
+            .m_axis_tuser       (),
+
+            // .count              (),
+
+            .status_overflow    (),
+            .status_bad_frame   (),
+            .status_good_frame  (),
+
+            .clk                (clk),
+            .rst                (rst)
+        );
+    end
+
+    for (i=0; i<NUM_FIFOS; i=i+1) begin: assign_fifo_out_tready
+        assign fifo_out_tready[i] = fifo_out_tready_next[i];
+    end
+
+endgenerate
+
+
+function [CL_NUM_FIFOS:0] count_valids (input [NUM_FIFOS-1:0] valids);
+    integer i;
+    begin
+        count_valids = 0;
+        for (i=0; i<NUM_FIFOS; i=i+1) begin
+            count_valids = count_valids + (valids[i] == 1'b1);
+        end
+    end
+endfunction
+
+
+parameter QUEUE_MASK = {CL_NUM_FIFOS{1'b1}};
+
+// write
+reg [CL_NUM_FIFOS-1:0] write_start_index_reg = 0, write_start_index_next;
+
+reg  [CL_NUM_FIFOS:0] wr_len, wr_wrap_len_index_wide, wr_wrap_len_index_end;
+wire wr_wrapped;
+reg  use_this_queue, wr_data_use_this_queue;
+reg  [CL_NUM_FIFOS:0] n_right_shift;
+
+assign wr_wrapped = wr_wrap_len_index_wide >= NUM_FIFOS;
+
+// read
+reg  [CL_NUM_FIFOS-1:0] read_start_index_reg = 0, read_start_index_next;
+wire [CL_NUM_FIFOS:0] rd_wrap_len_index_wide_next_w = read_start_index_reg + m_consumed_bytes;
+reg  [CL_NUM_FIFOS:0] rd_wrap_len_index_wide_reg = 0, rd_wrap_len_index_wide_next;
+reg  [CL_NUM_FIFOS:0] rd_wrap_len_index_end_reg = 0, rd_wrap_len_index_end_next;
+wire rd_wrapped;
+reg  rd_use_this_queue;
+
+assign rd_wrapped = rd_wrap_len_index_wide_reg >= NUM_FIFOS;
+// reg  [CL_NUM_FIFOS:0] remap_index;
+reg  [FIFO_DATA_WIDTH-1:0] remap_vec_tdata_reg [NUM_FIFOS-1:0], remap_vec_tdata_next [NUM_FIFOS-1:0];
+reg  [NUM_FIFOS-1:0] remap_vec_tvalid_reg = 0, remap_vec_tvalid_next;
+reg  [NUM_FIFOS-1:0] remap_vec_tready_reg = 0, remap_vec_tready_next;
+wire [CL_NUM_FIFOS:0] fifo_out_valid_cnts;
+wire has_enough_bytes;
+
+wire [FIFO_DATA_WIDTH-1:0] remap_vec_tdata [NUM_FIFOS-1:0];
+wire [NUM_FIFOS-1:0] remap_vec_tvalid, remap_vec_tready;
+
+// assign fifo_out_valid_cnts = count_valids(remap_vec_tvalid);
+// assign fifo_out_valid_cnts = 0;
+
+// output
+reg  [OUTPUT_DATA_WIDTH-1:0] m_output_tdata_reg = 0, m_output_tdata_next;
+reg  [CL_NUM_FIFOS:0] m_available_bytes_reg = 0, m_available_bytes_next;
+reg  m_output_tvalid_reg = 0, m_output_tvalid_next;
+
+reg  m_output_tready_d1 = 0;
+reg  has_enough_bytes_d1 = 0;
+reg  [CL_NUM_FIFOS:0] m_consumed_bytes_d1 = 0;
+
+// assign m_output_tdata = m_output_tdata_next;
+// assign m_output_tvalid = m_output_tvalid_next;
+// assign m_available_bytes = m_available_bytes_next;
+assign m_output_tdata = m_output_tdata_reg;
+assign m_output_tvalid = m_output_tvalid_reg;
+assign m_available_bytes = m_available_bytes_reg;
+
+assign has_enough_bytes = fifo_out_valid_cnts>=m_consumed_bytes || fifo_out_valid_cnts==NUM_FIFOS;
+
+generate
+    for (i=0; i<NUM_FIFOS; i=i+1) begin
+        assign remap_vec_tdata[i] = fifo_out_tvalid[(i+read_start_index_reg) & QUEUE_MASK] == 1?fifo_out_tdata[(i+read_start_index_reg) & QUEUE_MASK] : 0;
+        assign remap_vec_tvalid[i] = fifo_out_tvalid[(i+read_start_index_reg) & QUEUE_MASK];
+    end
+endgenerate
+
+assign fifo_out_valid_cnts =  (fifo_out_tvalid[0] == 1'b1)
+                            + (fifo_out_tvalid[1] == 1'b1)
+                            + (fifo_out_tvalid[2] == 1'b1)
+                            + (fifo_out_tvalid[3] == 1'b1)
+                            + (fifo_out_tvalid[4] == 1'b1)
+                            + (fifo_out_tvalid[5] == 1'b1)
+                            + (fifo_out_tvalid[6] == 1'b1)
+                            + (fifo_out_tvalid[7] == 1'b1)
+                            + (fifo_out_tvalid[8] == 1'b1)
+                            + (fifo_out_tvalid[9] == 1'b1)
+                            + (fifo_out_tvalid[10] == 1'b1)
+                            + (fifo_out_tvalid[11] == 1'b1)
+                            + (fifo_out_tvalid[12] == 1'b1)
+                            + (fifo_out_tvalid[13] == 1'b1)
+                            + (fifo_out_tvalid[14] == 1'b1)
+                            + (fifo_out_tvalid[15] == 1'b1)
+                            + (fifo_out_tvalid[16] == 1'b1)
+                            + (fifo_out_tvalid[17] == 1'b1)
+                            + (fifo_out_tvalid[18] == 1'b1)
+                            + (fifo_out_tvalid[19] == 1'b1)
+                            + (fifo_out_tvalid[20] == 1'b1)
+                            + (fifo_out_tvalid[21] == 1'b1)
+                            + (fifo_out_tvalid[22] == 1'b1)
+                            + (fifo_out_tvalid[23] == 1'b1)
+                            + (fifo_out_tvalid[24] == 1'b1)
+                            + (fifo_out_tvalid[25] == 1'b1)
+                            + (fifo_out_tvalid[26] == 1'b1)
+                            + (fifo_out_tvalid[27] == 1'b1)
+                            + (fifo_out_tvalid[28] == 1'b1)
+                            + (fifo_out_tvalid[29] == 1'b1)
+                            + (fifo_out_tvalid[30] == 1'b1)
+                            + (fifo_out_tvalid[31] == 1'b1)
+                            + (fifo_out_tvalid[32] == 1'b1)
+                            + (fifo_out_tvalid[33] == 1'b1)
+                            + (fifo_out_tvalid[34] == 1'b1)
+                            + (fifo_out_tvalid[35] == 1'b1)
+                            + (fifo_out_tvalid[36] == 1'b1)
+                            + (fifo_out_tvalid[37] == 1'b1)
+                            + (fifo_out_tvalid[38] == 1'b1)
+                            + (fifo_out_tvalid[39] == 1'b1)
+                            + (fifo_out_tvalid[40] == 1'b1)
+                            + (fifo_out_tvalid[41] == 1'b1)
+                            + (fifo_out_tvalid[42] == 1'b1)
+                            + (fifo_out_tvalid[43] == 1'b1)
+                            + (fifo_out_tvalid[44] == 1'b1)
+                            + (fifo_out_tvalid[45] == 1'b1)
+                            + (fifo_out_tvalid[46] == 1'b1)
+                            + (fifo_out_tvalid[47] == 1'b1)
+                            + (fifo_out_tvalid[48] == 1'b1)
+                            + (fifo_out_tvalid[49] == 1'b1)
+                            + (fifo_out_tvalid[50] == 1'b1)
+                            + (fifo_out_tvalid[51] == 1'b1)
+                            + (fifo_out_tvalid[52] == 1'b1)
+                            + (fifo_out_tvalid[53] == 1'b1)
+                            + (fifo_out_tvalid[54] == 1'b1)
+                            + (fifo_out_tvalid[55] == 1'b1)
+                            + (fifo_out_tvalid[56] == 1'b1)
+                            + (fifo_out_tvalid[57] == 1'b1)
+                            + (fifo_out_tvalid[58] == 1'b1)
+                            + (fifo_out_tvalid[59] == 1'b1)
+                            + (fifo_out_tvalid[60] == 1'b1)
+                            + (fifo_out_tvalid[61] == 1'b1)
+                            + (fifo_out_tvalid[62] == 1'b1)
+                            + (fifo_out_tvalid[63] == 1'b1);
+
+
+always @(*) begin
+
+    write_start_index_next = write_start_index_reg;
+
+
+    for (queue_no=0; queue_no<NUM_FIFOS; queue_no=queue_no+1) begin
+        // write part
+        // fifo_in_tdata_next[queue_no] = fifo_in_tdata_reg[queue_no];
+        fifo_in_tdata_next[queue_no] = 0;
+        fifo_in_tvalid_next[queue_no] = 1'b0;
+    end
+
+    //==========================================================
+    // write part
+    wr_len = byte_len(s_input_tkeep);
+
+    wr_wrap_len_index_wide = write_start_index_reg + wr_len;
+    wr_wrap_len_index_end = wr_wrap_len_index_wide & QUEUE_MASK;
+
+    for (queue_no=0; queue_no<NUM_FIFOS; queue_no=queue_no+1) begin
+        wr_data_use_this_queue = wr_wrapped? (queue_no>=write_start_index_reg || queue_no < wr_wrap_len_index_end)
+                                :(queue_no>=write_start_index_reg && queue_no < wr_wrap_len_index_end);
+
+        // fifo_in_tdata_next[(queue_no+write_start_index_reg) & QUEUE_MASK] = s_input_tdata >> (queue_no*8);
+        n_right_shift = (NUM_FIFOS + queue_no - write_start_index_reg) & QUEUE_MASK;
+
+        fifo_in_tdata_next[queue_no] = wr_data_use_this_queue? s_input_tdata >> (n_right_shift*8) : 0;
+    end
+
+    for (queue_no=0; queue_no<NUM_FIFOS; queue_no=queue_no+1) begin
+        use_this_queue = wr_wrapped? (queue_no>=write_start_index_reg || queue_no < wr_wrap_len_index_end)
+                                :(queue_no>=write_start_index_reg && queue_no < wr_wrap_len_index_end);
+        fifo_in_tvalid_next[queue_no] = s_input_tready && use_this_queue && s_input_tvalid;
+    end
+
+    // write to memloader
+    if (s_input_tready && s_input_tvalid) begin
+        write_start_index_next = wr_wrap_len_index_end;
+
+    end
+end
+
+
+localparam S_RD_IDLE = 0,
+            S_RD_START = 1,
+            S_RD_FINISH = 2;
+
+reg [1:0] rd_state_reg = S_RD_IDLE, rd_state_next;
+
+always @(*) begin
+    read_start_index_next = read_start_index_reg;
+
+    rd_state_next = rd_state_reg;
+    fifo_out_tready_next = 0;
+
+    rd_wrap_len_index_wide_next = rd_wrap_len_index_wide_reg;
+    rd_wrap_len_index_end_next = rd_wrap_len_index_end_reg;
+
+    case (rd_state_reg)
+        S_RD_IDLE: begin
+            if (m_output_tready) begin
+                // rd_wrap_len_index_wide_next = read_start_index_reg + m_consumed_bytes;
+                rd_wrap_len_index_wide_next = rd_wrap_len_index_wide_next_w;
+                rd_wrap_len_index_end_next = rd_wrap_len_index_wide_next_w & QUEUE_MASK;
+
+                rd_state_next = S_RD_START;
+            end
+        end
+        S_RD_START: begin
+            for (queue_no=0; queue_no<NUM_FIFOS; queue_no=queue_no+1) begin
+                rd_use_this_queue = rd_wrapped? (queue_no>=read_start_index_reg || queue_no < rd_wrap_len_index_end_reg)
+                                        :(queue_no>=read_start_index_reg && queue_no < rd_wrap_len_index_end_reg);
+                fifo_out_tready_next[queue_no] = rd_use_this_queue;
+            end
+            read_start_index_next = rd_wrap_len_index_end_reg;
+            rd_state_next = S_RD_FINISH;
+        end
+        S_RD_FINISH: begin
+            rd_state_next = S_RD_IDLE;
+        end
+    endcase
+
+    // for (queue_no=0; queue_no<NUM_FIFOS; queue_no=queue_no+1) begin
+    //     // read part
+    //     remap_vec_tready_next[queue_no] = 0;
+
+    //     fifo_out_tready_next[queue_no] = 1'b0;
+    // end
+    // // read part
+    // for (queue_no=0; queue_no<NUM_FIFOS; queue_no=queue_no+1) begin
+    //     remap_vec_tready_next[queue_no] = queue_no<m_consumed_bytes && has_enough_bytes && m_output_tready;
+    // end
+
+    // if (m_output_tready) begin
+    //     // rd_wrap_len_index_wide_next = read_start_index_reg + m_consumed_bytes;
+    //     rd_wrap_len_index_wide_next = rd_wrap_len_index_wide_next_w;
+    //     rd_wrap_len_index_end_next = rd_wrap_len_index_wide_next_w & QUEUE_MASK;
+    // end
+
+    // for (queue_no=0; queue_no<NUM_FIFOS; queue_no=queue_no+1) begin
+    //     rd_use_this_queue = rd_wrapped? (queue_no>=read_start_index_reg || queue_no < rd_wrap_len_index_end_reg)
+    //                             :(queue_no>=read_start_index_reg && queue_no < rd_wrap_len_index_end_reg);
+    //     // remap_index = (queue_no+read_start_index_reg) & QUEUE_MASK;
+    //     // fifo_out_tready_next[remap_index] = remap_vec_tready_reg[queue_no];
+    //     fifo_out_tready_next[queue_no] = has_enough_bytes_d1 && m_output_tready_d1 && rd_use_this_queue;
+    // end
+
+    // fifo_out_valid_cnts = 0;
+    // for (queue_no=0; queue_no<NUM_FIFOS; queue_no=queue_no+1) begin
+    //     // fifo_out_valid_cnts = fifo_out_valid_cnts + (remap_vec_tvalid_reg[queue_no]==1'b1);
+    //     fifo_out_valid_cnts = fifo_out_valid_cnts + (remap_vec_tvalid[queue_no]==1'b1);
+    // end
+
+    for (queue_no=0; queue_no<NUM_FIFOS; queue_no=queue_no+1) begin
+        // m_output_tdata_next[queue_no*8 +: 8] = remap_vec_tdata_reg[queue_no];
+        m_output_tdata_next[queue_no*8 +: 8] = remap_vec_tdata[queue_no];
+    end
+
+    // if (has_enough_bytes_d1 && m_output_tready_d1) begin // read out the requested number of bytes
+    //     // read_start_index_next = (read_start_index_reg + m_consumed_bytes_d1) & QUEUE_MASK;
+    //     read_start_index_next = rd_wrap_len_index_end_reg;
+    // end
+
+    m_output_tvalid_next = has_enough_bytes;
+    m_available_bytes_next = fifo_out_valid_cnts;
+end
+
+always @(posedge clk) begin
+    write_start_index_reg <= write_start_index_next;
+
+    rd_state_reg <= rd_state_next;
+    read_start_index_reg <= read_start_index_next;
+
+    for (queue_no=0; queue_no<NUM_FIFOS; queue_no=queue_no+1) begin
+        // write part
+        fifo_in_tdata_reg[queue_no] <= fifo_in_tdata_next[queue_no];
+        fifo_in_tvalid_reg[queue_no] <= fifo_in_tvalid_next[queue_no];
+        // read part
+        remap_vec_tdata_reg[queue_no] <= remap_vec_tdata_next[queue_no];
+        remap_vec_tvalid_reg[queue_no] <= remap_vec_tvalid_next[queue_no];
+        remap_vec_tready_reg[queue_no] <= remap_vec_tready_next[queue_no];
+
+        fifo_out_tready_reg[queue_no] <= fifo_out_tready_next[queue_no];
+    end
+
+    m_output_tdata_reg <= m_output_tdata_next;
+    m_output_tvalid_reg <= m_output_tvalid_next;
+    m_available_bytes_reg <= m_available_bytes_next;
+
+    m_output_tready_d1 <= m_output_tready;
+    has_enough_bytes_d1 <= has_enough_bytes;
+    m_consumed_bytes_d1 <= m_consumed_bytes;
+
+    rd_wrap_len_index_wide_reg <= rd_wrap_len_index_wide_next;
+    rd_wrap_len_index_end_reg <= rd_wrap_len_index_end_next;
+
+    if (rst) begin
+        write_start_index_reg <= 0;
+
+        rd_state_reg <= S_RD_IDLE;
+        read_start_index_reg <= 0;
+
+        for (queue_no=0; queue_no<NUM_FIFOS; queue_no=queue_no+1) begin
+            // write part
+            fifo_in_tdata_reg[queue_no] <= 0;
+            fifo_in_tvalid_reg[queue_no] <= 0;
+            // read part
+            remap_vec_tdata_reg[queue_no] <= 0;
+            remap_vec_tvalid_reg[queue_no] <= 0;
+            remap_vec_tready_reg[queue_no] <= 0;
+
+            fifo_out_tready_reg[queue_no] <= 0;
+        end
+
+        m_output_tdata_reg <= 0;
+        m_output_tvalid_reg <= 0;
+        m_available_bytes_reg <= 0;
+
+        m_output_tready_d1 <= 0;
+        has_enough_bytes_d1 <= 0;
+        m_consumed_bytes_d1 <= 0;
+
+        rd_wrap_len_index_wide_reg <= 0;
+        rd_wrap_len_index_end_reg <= 0;
+    end
+end
+
+endmodule
+
+`resetall
diff --color -burN ./corundum-rtl/mqnic_core_pcie_us.v ./hp-rtl/mqnic_core_pcie_us.v
--- ./corundum-rtl/mqnic_core_pcie_us.v	2024-09-12 17:15:07.565794868 -0400
+++ ./hp-rtl/mqnic_core_pcie_us.v	2024-09-12 17:14:43.145796024 -0400
@@ -110,6 +110,7 @@
     parameter TX_CHECKSUM_ENABLE = 1,
     parameter RX_RSS_ENABLE = 1,
     parameter RX_HASH_ENABLE = 1,
+    parameter RX_ROUTING_ENABLE = 1,
     parameter RX_CHECKSUM_ENABLE = 1,
     parameter TX_FIFO_DEPTH = 32768,
     parameter RX_FIFO_DEPTH = 32768,
@@ -194,7 +195,14 @@
     parameter STAT_DMA_ENABLE = 1,
     parameter STAT_PCIE_ENABLE = 1,
     parameter STAT_INC_WIDTH = 24,
-    parameter STAT_ID_WIDTH = 12
+    parameter STAT_ID_WIDTH = 12,
+    // 
+    parameter RETX_DESC_TABLE_SIZE = 1024,
+    parameter RX_CPL_DESC_TABLE_SIZE = 1024,
+    parameter NUM_RSDS = 4,
+    parameter CAM_CMP_DATA_WIDTH = 64,
+    parameter CAM_RAM_ADDR_WIDTH = 9,
+    parameter STASH_DEPTH = 256
 )
 (
     input  wire                                          clk,
@@ -801,6 +809,7 @@
     .TX_CHECKSUM_ENABLE(TX_CHECKSUM_ENABLE),
     .RX_RSS_ENABLE(RX_RSS_ENABLE),
     .RX_HASH_ENABLE(RX_HASH_ENABLE),
+    .RX_ROUTING_ENABLE(RX_ROUTING_ENABLE),
     .RX_CHECKSUM_ENABLE(RX_CHECKSUM_ENABLE),
     .TX_FIFO_DEPTH(TX_FIFO_DEPTH),
     .RX_FIFO_DEPTH(RX_FIFO_DEPTH),
@@ -881,7 +890,14 @@
     .STAT_DMA_ENABLE(STAT_DMA_ENABLE),
     .STAT_PCIE_ENABLE(STAT_PCIE_ENABLE),
     .STAT_INC_WIDTH(STAT_INC_WIDTH),
-    .STAT_ID_WIDTH(STAT_ID_WIDTH)
+    .STAT_ID_WIDTH(STAT_ID_WIDTH),
+    
+    .RETX_DESC_TABLE_SIZE(RETX_DESC_TABLE_SIZE),
+    .RX_CPL_DESC_TABLE_SIZE(RX_CPL_DESC_TABLE_SIZE),
+    .NUM_RSDS(NUM_RSDS),
+    .CAM_CMP_DATA_WIDTH(CAM_CMP_DATA_WIDTH),
+    .CAM_RAM_ADDR_WIDTH(CAM_RAM_ADDR_WIDTH),
+    .STASH_DEPTH(STASH_DEPTH)
 )
 core_pcie_inst (
     .clk(clk),
diff --color -burN ./corundum-rtl/mqnic_core_pcie.v ./hp-rtl/mqnic_core_pcie.v
--- ./corundum-rtl/mqnic_core_pcie.v	2024-09-12 17:15:07.565794868 -0400
+++ ./hp-rtl/mqnic_core_pcie.v	2024-09-12 17:14:43.101796026 -0400
@@ -110,6 +110,7 @@
     parameter TX_CHECKSUM_ENABLE = 1,
     parameter RX_RSS_ENABLE = 1,
     parameter RX_HASH_ENABLE = 1,
+    parameter RX_ROUTING_ENABLE = 1,
     parameter RX_CHECKSUM_ENABLE = 1,
     parameter TX_FIFO_DEPTH = 32768,
     parameter RX_FIFO_DEPTH = 32768,
@@ -192,7 +193,14 @@
     parameter STAT_DMA_ENABLE = 1,
     parameter STAT_PCIE_ENABLE = 1,
     parameter STAT_INC_WIDTH = 24,
-    parameter STAT_ID_WIDTH = 12
+    parameter STAT_ID_WIDTH = 12,
+    // 
+    parameter RETX_DESC_TABLE_SIZE = 1024,
+    parameter RX_CPL_DESC_TABLE_SIZE = 1024,
+    parameter NUM_RSDS = 4,
+    parameter CAM_CMP_DATA_WIDTH = 64,
+    parameter CAM_RAM_ADDR_WIDTH = 9,
+    parameter STASH_DEPTH = 256
 )
 (
     input  wire                                          clk,
@@ -1506,6 +1514,7 @@
     .TX_CHECKSUM_ENABLE(TX_CHECKSUM_ENABLE),
     .RX_RSS_ENABLE(RX_RSS_ENABLE),
     .RX_HASH_ENABLE(RX_HASH_ENABLE),
+    .RX_ROUTING_ENABLE(RX_ROUTING_ENABLE),
     .RX_CHECKSUM_ENABLE(RX_CHECKSUM_ENABLE),
     .TX_FIFO_DEPTH(TX_FIFO_DEPTH),
     .RX_FIFO_DEPTH(RX_FIFO_DEPTH),
@@ -1575,7 +1584,13 @@
     // Statistics counter subsystem
     .STAT_ENABLE(STAT_ENABLE),
     .STAT_INC_WIDTH(STAT_INC_WIDTH),
-    .STAT_ID_WIDTH(STAT_ID_WIDTH)
+    .STAT_ID_WIDTH(STAT_ID_WIDTH),
+    .RETX_DESC_TABLE_SIZE(RETX_DESC_TABLE_SIZE),
+    .RX_CPL_DESC_TABLE_SIZE(RX_CPL_DESC_TABLE_SIZE),
+    .NUM_RSDS(NUM_RSDS),
+    .CAM_CMP_DATA_WIDTH(CAM_CMP_DATA_WIDTH),
+    .CAM_RAM_ADDR_WIDTH(CAM_RAM_ADDR_WIDTH),
+    .STASH_DEPTH(STASH_DEPTH)
 )
 core_inst (
     .clk(clk),
diff --color -burN ./corundum-rtl/mqnic_core.v ./hp-rtl/mqnic_core.v
--- ./corundum-rtl/mqnic_core.v	2024-09-12 17:15:07.565794868 -0400
+++ ./hp-rtl/mqnic_core.v	2024-09-12 17:14:43.101796026 -0400
@@ -110,6 +110,7 @@
     parameter TX_CHECKSUM_ENABLE = 1,
     parameter RX_RSS_ENABLE = 1,
     parameter RX_HASH_ENABLE = 1,
+    parameter RX_ROUTING_ENABLE = 1,
     parameter RX_CHECKSUM_ENABLE = 1,
     parameter TX_FIFO_DEPTH = 32768,
     parameter RX_FIFO_DEPTH = 32768,
@@ -181,7 +182,14 @@
     // Statistics counter subsystem
     parameter STAT_ENABLE = 1,
     parameter STAT_INC_WIDTH = 24,
-    parameter STAT_ID_WIDTH = 12
+    parameter STAT_ID_WIDTH = 12,
+    // 
+    parameter RETX_DESC_TABLE_SIZE = 1024,
+    parameter RX_CPL_DESC_TABLE_SIZE = 1024,
+    parameter NUM_RSDS = 4,
+    parameter CAM_CMP_DATA_WIDTH = 64,
+    parameter CAM_RAM_ADDR_WIDTH = 9,
+    parameter STASH_DEPTH = 256
 )
 (
     input  wire                                         clk,
@@ -1396,7 +1404,7 @@
     /*
      * Read descriptor status output
      */
-    .m_axis_read_desc_status_tag({data_dma_read_desc_status_tag, ctrl_dma_read_desc_status_tag}),
+    .m_axis_read_desc_status_tag  ({data_dma_read_desc_status_tag, ctrl_dma_read_desc_status_tag}),
     .m_axis_read_desc_status_error({data_dma_read_desc_status_error, ctrl_dma_read_desc_status_error}),
     .m_axis_read_desc_status_valid({data_dma_read_desc_status_valid, ctrl_dma_read_desc_status_valid}),
 
@@ -1423,20 +1431,20 @@
     /*
      * Write descriptor input
      */
-    .s_axis_write_desc_dma_addr({data_dma_write_desc_dma_addr, ctrl_dma_write_desc_dma_addr}),
-    .s_axis_write_desc_ram_sel({data_dma_write_desc_ram_sel, ctrl_dma_write_desc_ram_sel}),
-    .s_axis_write_desc_ram_addr({data_dma_write_desc_ram_addr, ctrl_dma_write_desc_ram_addr}),
-    .s_axis_write_desc_imm({data_dma_write_desc_imm, ctrl_dma_write_desc_imm}),
-    .s_axis_write_desc_imm_en({data_dma_write_desc_imm_en, ctrl_dma_write_desc_imm_en}),
-    .s_axis_write_desc_len({data_dma_write_desc_len, ctrl_dma_write_desc_len}),
-    .s_axis_write_desc_tag({data_dma_write_desc_tag, ctrl_dma_write_desc_tag}),
-    .s_axis_write_desc_valid({data_dma_write_desc_valid, ctrl_dma_write_desc_valid}),
-    .s_axis_write_desc_ready({data_dma_write_desc_ready, ctrl_dma_write_desc_ready}),
+    .s_axis_write_desc_dma_addr ({data_dma_write_desc_dma_addr, ctrl_dma_write_desc_dma_addr}),
+    .s_axis_write_desc_ram_sel  ({data_dma_write_desc_ram_sel, ctrl_dma_write_desc_ram_sel}),
+    .s_axis_write_desc_ram_addr ({data_dma_write_desc_ram_addr, ctrl_dma_write_desc_ram_addr}),
+    .s_axis_write_desc_imm      ({data_dma_write_desc_imm, ctrl_dma_write_desc_imm}),
+    .s_axis_write_desc_imm_en   ({data_dma_write_desc_imm_en, ctrl_dma_write_desc_imm_en}),
+    .s_axis_write_desc_len      ({data_dma_write_desc_len, ctrl_dma_write_desc_len}),
+    .s_axis_write_desc_tag      ({data_dma_write_desc_tag, ctrl_dma_write_desc_tag}),
+    .s_axis_write_desc_valid    ({data_dma_write_desc_valid, ctrl_dma_write_desc_valid}),
+    .s_axis_write_desc_ready    ({data_dma_write_desc_ready, ctrl_dma_write_desc_ready}),
 
     /*
      * Write descriptor status output
      */
-    .m_axis_write_desc_status_tag({data_dma_write_desc_status_tag, ctrl_dma_write_desc_status_tag}),
+    .m_axis_write_desc_status_tag  ({data_dma_write_desc_status_tag, ctrl_dma_write_desc_status_tag}),
     .m_axis_write_desc_status_error({data_dma_write_desc_status_error, ctrl_dma_write_desc_status_error}),
     .m_axis_write_desc_status_valid({data_dma_write_desc_status_valid, ctrl_dma_write_desc_status_valid}),
 
@@ -1461,20 +1469,20 @@
     /*
      * RAM interface
      */
-    .ram_wr_cmd_sel({data_dma_ram_wr_cmd_sel, ctrl_dma_ram_wr_cmd_sel}),
-    .ram_wr_cmd_be({data_dma_ram_wr_cmd_be, ctrl_dma_ram_wr_cmd_be}),
-    .ram_wr_cmd_addr({data_dma_ram_wr_cmd_addr, ctrl_dma_ram_wr_cmd_addr}),
-    .ram_wr_cmd_data({data_dma_ram_wr_cmd_data, ctrl_dma_ram_wr_cmd_data}),
-    .ram_wr_cmd_valid({data_dma_ram_wr_cmd_valid, ctrl_dma_ram_wr_cmd_valid}),
-    .ram_wr_cmd_ready({data_dma_ram_wr_cmd_ready, ctrl_dma_ram_wr_cmd_ready}),
-    .ram_wr_done({data_dma_ram_wr_done, ctrl_dma_ram_wr_done}),
-    .ram_rd_cmd_sel({data_dma_ram_rd_cmd_sel, ctrl_dma_ram_rd_cmd_sel}),
-    .ram_rd_cmd_addr({data_dma_ram_rd_cmd_addr, ctrl_dma_ram_rd_cmd_addr}),
-    .ram_rd_cmd_valid({data_dma_ram_rd_cmd_valid, ctrl_dma_ram_rd_cmd_valid}),
-    .ram_rd_cmd_ready({data_dma_ram_rd_cmd_ready, ctrl_dma_ram_rd_cmd_ready}),
-    .ram_rd_resp_data({data_dma_ram_rd_resp_data, ctrl_dma_ram_rd_resp_data}),
-    .ram_rd_resp_valid({data_dma_ram_rd_resp_valid, ctrl_dma_ram_rd_resp_valid}),
-    .ram_rd_resp_ready({data_dma_ram_rd_resp_ready, ctrl_dma_ram_rd_resp_ready})
+    .ram_wr_cmd_sel     ({data_dma_ram_wr_cmd_sel, ctrl_dma_ram_wr_cmd_sel}),
+    .ram_wr_cmd_be      ({data_dma_ram_wr_cmd_be, ctrl_dma_ram_wr_cmd_be}),
+    .ram_wr_cmd_addr    ({data_dma_ram_wr_cmd_addr, ctrl_dma_ram_wr_cmd_addr}),
+    .ram_wr_cmd_data    ({data_dma_ram_wr_cmd_data, ctrl_dma_ram_wr_cmd_data}),
+    .ram_wr_cmd_valid   ({data_dma_ram_wr_cmd_valid, ctrl_dma_ram_wr_cmd_valid}),
+    .ram_wr_cmd_ready   ({data_dma_ram_wr_cmd_ready, ctrl_dma_ram_wr_cmd_ready}),
+    .ram_wr_done        ({data_dma_ram_wr_done, ctrl_dma_ram_wr_done}),
+    .ram_rd_cmd_sel     ({data_dma_ram_rd_cmd_sel, ctrl_dma_ram_rd_cmd_sel}),
+    .ram_rd_cmd_addr    ({data_dma_ram_rd_cmd_addr, ctrl_dma_ram_rd_cmd_addr}),
+    .ram_rd_cmd_valid   ({data_dma_ram_rd_cmd_valid, ctrl_dma_ram_rd_cmd_valid}),
+    .ram_rd_cmd_ready   ({data_dma_ram_rd_cmd_ready, ctrl_dma_ram_rd_cmd_ready}),
+    .ram_rd_resp_data   ({data_dma_ram_rd_resp_data, ctrl_dma_ram_rd_resp_data}),
+    .ram_rd_resp_valid  ({data_dma_ram_rd_resp_valid, ctrl_dma_ram_rd_resp_valid}),
+    .ram_rd_resp_ready  ({data_dma_ram_rd_resp_ready, ctrl_dma_ram_rd_resp_ready})
 );
 
 // interface DMA mux (round-robin)
@@ -2401,8 +2409,8 @@
             // Descriptor management
             .TX_MAX_DESC_REQ(16),
             .TX_DESC_FIFO_SIZE(16*8),
-            .RX_MAX_DESC_REQ(16),
-            .RX_DESC_FIFO_SIZE(16*8),
+            .RX_MAX_DESC_REQ(32),
+            .RX_DESC_FIFO_SIZE(32*8),
 
             // TX and RX engine configuration
             .TX_DESC_TABLE_SIZE(TX_DESC_TABLE_SIZE),
@@ -2421,6 +2429,7 @@
             .TX_CHECKSUM_ENABLE(TX_CHECKSUM_ENABLE),
             .RX_RSS_ENABLE(RX_RSS_ENABLE),
             .RX_HASH_ENABLE(RX_HASH_ENABLE),
+            .RX_ROUTING_ENABLE(RX_ROUTING_ENABLE),
             .RX_CHECKSUM_ENABLE(RX_CHECKSUM_ENABLE),
             .TX_FIFO_DEPTH(TX_FIFO_DEPTH),
             .RX_FIFO_DEPTH(RX_FIFO_DEPTH),
@@ -2482,7 +2491,14 @@
             .AXIS_IF_TX_DEST_WIDTH(AXIS_IF_TX_DEST_WIDTH),
             .AXIS_IF_RX_DEST_WIDTH(AXIS_IF_RX_DEST_WIDTH),
             .AXIS_IF_TX_USER_WIDTH(AXIS_IF_TX_USER_WIDTH),
-            .AXIS_IF_RX_USER_WIDTH(AXIS_IF_RX_USER_WIDTH)
+            .AXIS_IF_RX_USER_WIDTH(AXIS_IF_RX_USER_WIDTH),
+
+            .RETX_DESC_TABLE_SIZE(RETX_DESC_TABLE_SIZE),
+            .RX_CPL_DESC_TABLE_SIZE(RX_CPL_DESC_TABLE_SIZE),
+            .NUM_RSDS(NUM_RSDS),
+            .CAM_CMP_DATA_WIDTH(CAM_CMP_DATA_WIDTH),
+            .CAM_RAM_ADDR_WIDTH(CAM_RAM_ADDR_WIDTH),
+            .STASH_DEPTH(STASH_DEPTH)
         )
         interface_inst (
             .clk(clk),
diff --color -burN ./corundum-rtl/mqnic_ingress_top.v ./hp-rtl/mqnic_ingress_top.v
--- ./corundum-rtl/mqnic_ingress_top.v	1969-12-31 19:00:00.000000000 -0500
+++ ./hp-rtl/mqnic_ingress_top.v	2024-09-12 17:14:43.101796026 -0400
@@ -0,0 +1,499 @@
+`resetall
+`timescale 1ns / 1ps
+`default_nettype none
+
+module mqnic_ingress_top #
+(
+    // Width of AXI stream interfaces in bits
+    parameter AXIS_DATA_WIDTH = 512,
+    // AXI stream tkeep signal width (words per cycle)
+    parameter AXIS_KEEP_WIDTH = AXIS_DATA_WIDTH/8,
+    // AXI stream tid signal width
+    parameter AXIS_ID_WIDTH = 8,
+    // AXI stream tdest signal width
+    parameter AXIS_DEST_WIDTH = 8,
+    // AXI stream tuser signal width
+    parameter S_AXIS_USER_WIDTH = 1,
+    // AXI stream tuser signal width
+    parameter M_AXIS_USER_WIDTH = S_AXIS_USER_WIDTH,
+    parameter MAX_RX_SIZE = 2048,
+    // Enable RX Routing
+    parameter RX_ROUTING_ENABLE = 1,
+    parameter RX_ROUTING_KEY_LEN = 32,
+    parameter NUM_RSDS = 4,
+    parameter CAM_CMP_DATA_WIDTH = 64,
+    parameter CAM_RAM_ADDR_WIDTH = 9,
+    parameter STASH_DEPTH = 256,
+    parameter MSG_ID_WIDTH = 32,
+    parameter MSG_OFF_WIDTH = 8
+)
+(
+    /*
+     * Receive data input
+     */
+    input  wire [AXIS_DATA_WIDTH-1:0]       s_axis_tdata,
+    input  wire [AXIS_KEEP_WIDTH-1:0]       s_axis_tkeep,
+    input  wire                             s_axis_tvalid,
+    output wire                             s_axis_tready,
+    input  wire                             s_axis_tlast,
+    input  wire [AXIS_ID_WIDTH-1:0]         s_axis_tid,
+    input  wire [AXIS_DEST_WIDTH-1:0]       s_axis_tdest,
+    input  wire [S_AXIS_USER_WIDTH-1:0]     s_axis_tuser,
+    input  wire [MSG_ID_WIDTH-1:0]          s_axis_msg_id,
+    input  wire                             s_axis_is_msg,
+    input  wire [MSG_OFF_WIDTH-1:0]         s_axis_msg_len,
+    input  wire [MSG_OFF_WIDTH-1:0]         s_axis_msg_offset,
+
+    /*
+     * Receive data output
+     */
+    output wire [AXIS_DATA_WIDTH-1:0]       m_axis_tdata,
+    output wire [AXIS_KEEP_WIDTH-1:0]       m_axis_tkeep,
+    output wire                             m_axis_tvalid,
+    input  wire                             m_axis_tready,
+    output wire                             m_axis_tlast,
+    output wire [AXIS_ID_WIDTH-1:0]         m_axis_tid,
+    output wire [AXIS_DEST_WIDTH-1:0]       m_axis_tdest,
+    output wire [M_AXIS_USER_WIDTH-1:0]     m_axis_tuser,
+
+    /*
+     * RX checksum output
+     */
+    output wire [15:0]                      rx_csum,
+    output wire                             rx_csum_valid,
+    input  wire                             rx_csum_ready,
+
+    // ctrl cnt
+    output wire [31:0]                      ctrl_cnt,
+
+    // seperate AXIS signals for reconfiguration
+    input  wire [AXIS_DATA_WIDTH-1:0]       s_ctrl_axis_tdata,
+    input  wire [AXIS_KEEP_WIDTH-1:0]       s_ctrl_axis_tkeep,
+    input  wire                             s_ctrl_axis_tvalid,
+    output wire                             s_ctrl_axis_tready,
+
+    //
+    input  wire                             clk,
+    input  wire                             rst
+);
+
+// sanity check
+initial begin
+    if (NUM_RSDS < 0 || NUM_RSDS > 8) begin
+        $error("ERROR: NUM_RSDS must be between 0 and 8 (instance %m)");
+        $finish;
+    end
+end
+
+integer j;
+
+assign rx_csum = 16'd0;
+assign rx_csum_valid = 1'b0;
+
+localparam CL_NUM_RSDS = NUM_RSDS==1?1:$clog2(NUM_RSDS);
+localparam QUEUE_MASK = {CL_NUM_RSDS{1'b1}};
+localparam S_IN_IDLE = 0;
+localparam S_IN_WR = 1;
+localparam S_IN_DROP = 2;
+
+localparam S_OUT_IDLE = 0;
+localparam S_OUT_WR = 1;
+
+reg  [1:0] in_state_reg = 0, in_state_next;
+reg  [CL_NUM_RSDS-1:0] in_cur_q_reg = 0, in_cur_q_next;
+wire [CL_NUM_RSDS-1:0] in_cur_q_plus_one;
+
+reg  [CL_NUM_RSDS-1:0] out_cur_q_reg = 0, out_cur_q_next;
+wire [CL_NUM_RSDS-1:0] out_cur_q_plus_one;
+
+reg  out_state_reg = 0, out_state_next;
+
+assign in_cur_q_plus_one = (in_cur_q_reg==NUM_RSDS-1) ? 0 : in_cur_q_reg+1;
+assign out_cur_q_plus_one = (out_cur_q_reg==NUM_RSDS-1) ? 0 : out_cur_q_reg+1;
+
+wire [AXIS_DATA_WIDTH-1:0]       s_axis_tdata_in[NUM_RSDS-1:0];
+wire [AXIS_KEEP_WIDTH-1:0]       s_axis_tkeep_in[NUM_RSDS-1:0];
+wire [NUM_RSDS-1:0]            s_axis_tvalid_in, s_axis_in_wr;
+wire [NUM_RSDS-1:0]            s_axis_tready_in;
+wire [NUM_RSDS-1:0]            s_axis_tlast_in;
+wire [AXIS_ID_WIDTH-1:0]         s_axis_tid_in[NUM_RSDS-1:0];
+wire [AXIS_DEST_WIDTH-1:0]       s_axis_tdest_in[NUM_RSDS-1:0];
+wire [S_AXIS_USER_WIDTH-1:0]     s_axis_tuser_in[NUM_RSDS-1:0];
+wire [MSG_ID_WIDTH-1:0]          s_axis_msg_id_in[NUM_RSDS-1:0];
+wire                             s_axis_is_msg_in[NUM_RSDS-1:0];
+wire [MSG_OFF_WIDTH-1:0]         s_axis_msg_len_in[NUM_RSDS-1:0];
+wire [MSG_OFF_WIDTH-1:0]         s_axis_msg_offset_in[NUM_RSDS-1:0];
+wire [31:0]                      w_ctrl_cnt [NUM_RSDS-1:0];
+
+wire [AXIS_DATA_WIDTH-1:0]       s_ctrl_axis_tdata_in [NUM_RSDS-1:0];
+wire [AXIS_KEEP_WIDTH-1:0]       s_ctrl_axis_tkeep_in [NUM_RSDS-1:0];
+wire [NUM_RSDS-1:0]            s_ctrl_axis_tvalid_in;
+wire [NUM_RSDS-1:0]            s_ctrl_axis_tready_in;
+
+wire [AXIS_DATA_WIDTH-1:0]       m_axis_tdata_out [NUM_RSDS-1:0];
+wire [AXIS_KEEP_WIDTH-1:0]       m_axis_tkeep_out [NUM_RSDS-1:0];
+wire [NUM_RSDS-1:0]            m_axis_tvalid_out;
+wire [NUM_RSDS-1:0]            m_axis_tready_out;
+wire [NUM_RSDS-1:0]            m_axis_tlast_out;
+wire [AXIS_ID_WIDTH-1:0]         m_axis_tid_out [NUM_RSDS-1:0];
+wire [AXIS_DEST_WIDTH-1:0]       m_axis_tdest_out [NUM_RSDS-1:0];
+wire [M_AXIS_USER_WIDTH-1:0]     m_axis_tuser_out [NUM_RSDS-1:0];
+wire [MSG_ID_WIDTH-1:0]          m_axis_msg_id_out [NUM_RSDS-1:0];
+wire [NUM_RSDS-1:0]            m_axis_is_msg_out;
+wire [MSG_OFF_WIDTH-1:0]         m_axis_msg_len_out [NUM_RSDS-1:0];
+wire [MSG_OFF_WIDTH-1:0]         m_axis_msg_offset_out [NUM_RSDS-1:0];
+
+//
+
+assign m_axis_tdata = m_axis_tdata_out[out_cur_q_reg];
+assign m_axis_tkeep = m_axis_tkeep_out[out_cur_q_reg];
+assign m_axis_tvalid = m_axis_tvalid_out[out_cur_q_reg];
+assign m_axis_tlast = m_axis_tlast_out[out_cur_q_reg];
+assign m_axis_tid = m_axis_tid_out[out_cur_q_reg];
+assign m_axis_tdest = m_axis_tdest_out[out_cur_q_reg];
+assign m_axis_tuser = m_axis_tuser_out[out_cur_q_reg];
+
+// skid buffer
+reg [AXIS_DATA_WIDTH-1:0]       s_axis_tdata_int_reg[NUM_RSDS-1:0];
+reg [AXIS_KEEP_WIDTH-1:0]       s_axis_tkeep_int_reg[NUM_RSDS-1:0];
+reg                             s_axis_tvalid_int_reg[NUM_RSDS-1:0], s_axis_tvalid_int_next[NUM_RSDS-1:0];
+reg                             s_axis_tready_int_reg[NUM_RSDS-1:0];
+reg                             s_axis_tlast_int_reg[NUM_RSDS-1:0];
+reg [AXIS_ID_WIDTH-1:0]         s_axis_tid_int_reg[NUM_RSDS-1:0];
+reg [AXIS_DEST_WIDTH-1:0]       s_axis_tdest_int_reg[NUM_RSDS-1:0];
+reg [S_AXIS_USER_WIDTH-1:0]     s_axis_tuser_int_reg[NUM_RSDS-1:0];
+reg [MSG_ID_WIDTH-1:0]          s_axis_msg_id_int_reg[NUM_RSDS-1:0];
+reg                             s_axis_is_msg_int_reg[NUM_RSDS-1:0];
+reg [MSG_OFF_WIDTH-1:0]         s_axis_msg_len_int_reg[NUM_RSDS-1:0];
+reg [MSG_OFF_WIDTH-1:0]         s_axis_msg_offset_int_reg[NUM_RSDS-1:0];
+
+
+reg [AXIS_DATA_WIDTH-1:0]       temp_s_axis_tdata_int_reg[NUM_RSDS-1:0];
+reg [AXIS_KEEP_WIDTH-1:0]       temp_s_axis_tkeep_int_reg[NUM_RSDS-1:0];
+reg                             temp_s_axis_tvalid_int_reg[NUM_RSDS-1:0], temp_s_axis_tvalid_int_next[NUM_RSDS-1:0];
+reg                             temp_s_axis_tlast_int_reg[NUM_RSDS-1:0];
+reg [AXIS_ID_WIDTH-1:0]         temp_s_axis_tid_int_reg[NUM_RSDS-1:0];
+reg [AXIS_DEST_WIDTH-1:0]       temp_s_axis_tdest_int_reg[NUM_RSDS-1:0];
+reg [S_AXIS_USER_WIDTH-1:0]     temp_s_axis_tuser_int_reg[NUM_RSDS-1:0];
+reg [MSG_ID_WIDTH-1:0]          temp_s_axis_msg_id_int_reg[NUM_RSDS-1:0];
+reg                             temp_s_axis_is_msg_int_reg[NUM_RSDS-1:0];
+reg [MSG_OFF_WIDTH-1:0]         temp_s_axis_msg_len_int_reg[NUM_RSDS-1:0];
+reg [MSG_OFF_WIDTH-1:0]         temp_s_axis_msg_offset_int_reg[NUM_RSDS-1:0];
+
+reg store_axis_input_to_output[NUM_RSDS-1:0];
+reg store_axis_input_to_temp[NUM_RSDS-1:0];
+reg store_axis_temp_to_output[NUM_RSDS-1:0];
+
+
+generate
+    genvar i;
+    for (i=0; i<NUM_RSDS; i=i+1) begin
+        assign s_axis_tdata_in[i] = s_axis_tdata_int_reg[i];
+        assign s_axis_tkeep_in[i] = s_axis_tkeep_int_reg[i];
+        assign s_axis_tvalid_in[i] = s_axis_tvalid_int_reg[i];
+        assign s_axis_tlast_in[i] = s_axis_tlast_int_reg[i];
+        assign s_axis_tid_in[i] = s_axis_tid_int_reg[i];
+        assign s_axis_tdest_in[i] = s_axis_tdest_int_reg[i];
+        assign s_axis_tuser_in[i] = s_axis_tuser_int_reg[i];
+        assign s_axis_msg_id_in[i] = s_axis_msg_id_int_reg[i];
+        assign s_axis_is_msg_in[i] = s_axis_is_msg_int_reg[i];
+        assign s_axis_msg_len_in[i] = s_axis_msg_len_int_reg[i];
+        assign s_axis_msg_offset_in[i] = s_axis_msg_offset_int_reg[i];
+
+        assign s_ctrl_axis_tdata_in[i] = s_ctrl_axis_tdata;
+        assign s_ctrl_axis_tkeep_in[i] = s_ctrl_axis_tkeep;
+        assign s_ctrl_axis_tvalid_in[i] = s_ctrl_axis_tvalid;
+
+        assign m_axis_tready_out[i] = m_axis_tready && (out_cur_q_reg==i);
+    end
+
+    for (i=0; i<NUM_RSDS; i=i+1) begin: ingress_inst
+        mqnic_ingress #(
+            .RX_RSS_ENABLE(0),
+            .RX_HASH_ENABLE(0),
+            .RX_CHECKSUM_ENABLE(0),
+            .AXIS_DATA_WIDTH(AXIS_DATA_WIDTH),
+            .AXIS_KEEP_WIDTH(AXIS_KEEP_WIDTH),
+            .AXIS_ID_WIDTH(AXIS_ID_WIDTH),
+            .AXIS_DEST_WIDTH(AXIS_DEST_WIDTH),
+            .S_AXIS_USER_WIDTH(S_AXIS_USER_WIDTH),
+            .M_AXIS_USER_WIDTH(M_AXIS_USER_WIDTH),
+            .RX_ROUTING_ENABLE(RX_ROUTING_ENABLE),
+            .RX_ROUTING_KEY_LEN(RX_ROUTING_KEY_LEN),
+            .CAM_CMP_DATA_WIDTH(CAM_CMP_DATA_WIDTH),
+            .CAM_RAM_ADDR_WIDTH(CAM_RAM_ADDR_WIDTH),
+            .STASH_DEPTH(STASH_DEPTH)
+        )
+        mqnic_ing_inst (
+            .clk                         (clk),
+            .rst                         (rst),
+
+            // input
+            .s_axis_tdata                (s_axis_tdata_in[i]),
+            .s_axis_tkeep                (s_axis_tkeep_in[i]),
+            .s_axis_tvalid               (s_axis_tvalid_in[i]),
+            .s_axis_tready               (s_axis_tready_in[i]),
+            .s_axis_tlast                (s_axis_tlast_in[i]),
+            .s_axis_tid                  (s_axis_tid_in[i]),
+            .s_axis_tdest                (s_axis_tdest_in[i]),
+            .s_axis_tuser                (s_axis_tuser_in[i]),
+            .s_axis_msg_id               (s_axis_msg_id_in[i]),
+            .s_axis_is_msg               (s_axis_is_msg_in[i]),
+            .s_axis_msg_len              (s_axis_msg_len_in[i]),
+            .s_axis_msg_offset           (s_axis_msg_offset_in[i]),
+
+            // output
+            .m_axis_tdata                (m_axis_tdata_out[i]),
+            .m_axis_tkeep                (m_axis_tkeep_out[i]),
+            .m_axis_tvalid               (m_axis_tvalid_out[i]),
+            .m_axis_tready               (m_axis_tready_out[i]),
+            .m_axis_tlast                (m_axis_tlast_out[i]),
+            .m_axis_tid                  (m_axis_tid_out[i]),
+            .m_axis_tdest                (m_axis_tdest_out[i]),
+            .m_axis_tuser                (m_axis_tuser_out[i]),
+
+            .ctrl_cnt                    (w_ctrl_cnt[i]),
+
+            .s_ctrl_axis_tdata           (s_ctrl_axis_tdata_in[i]),
+            .s_ctrl_axis_tkeep           (s_ctrl_axis_tkeep_in[i]),
+            .s_ctrl_axis_tvalid          (s_ctrl_axis_tvalid_in[i]),
+            .s_ctrl_axis_tready          (s_ctrl_axis_tready_in[i])
+        );
+    end
+endgenerate
+
+wire [NUM_RSDS-1:0] s_axis_tready_early_int;
+
+// skid buffer
+generate
+    for (i=0; i<NUM_RSDS; i=i+1) begin
+        assign s_axis_tready_early_int[i] = s_axis_tready_in[i] || (!temp_s_axis_tvalid_int_reg[i] && (!s_axis_tvalid_int_reg[i] || !s_axis_in_wr[i]));
+
+        always @(*) begin
+            s_axis_tvalid_int_next[i] = s_axis_tvalid_int_reg[i];
+            temp_s_axis_tvalid_int_next[i] = temp_s_axis_tvalid_int_reg[i];
+
+            store_axis_input_to_output[i] = 1'b0;
+            store_axis_input_to_temp[i] = 1'b0;
+            store_axis_temp_to_output[i] = 1'b0;
+
+            if (s_axis_tready_int_reg[i]) begin
+                // input is ready
+                if (s_axis_tready_in[i] || !s_axis_tvalid_int_reg[i]) begin
+                    // output is ready or currently not valid, transfer data to output
+                    // s_axis_tvalid_int_next[i] = s_axis_tvalid && in_cur_q_reg==i;
+                    s_axis_tvalid_int_next[i] = s_axis_in_wr[i];
+                    store_axis_input_to_output[i] = 1'b1;
+                end
+                else begin
+                    // output is not ready, store input in temp
+                    // temp_s_axis_tvalid_int_next[i] = s_axis_tvalid && in_cur_q_reg==i;
+                    temp_s_axis_tvalid_int_next[i] = s_axis_in_wr[i];
+                    store_axis_input_to_temp[i] = 1'b1;
+                end
+            end
+            else if (s_axis_tready_in[i]) begin
+                // input is not ready, but output is ready
+                s_axis_tvalid_int_next[i] = temp_s_axis_tvalid_int_reg[i];
+                temp_s_axis_tvalid_int_next[i] = 1'b0;
+                store_axis_temp_to_output[i] = 1'b1;
+            end
+        end
+    end
+endgenerate
+
+always @(posedge clk) begin
+    for (j=0; j<NUM_RSDS; j=j+1) begin
+        s_axis_tready_int_reg[j] <= s_axis_tready_early_int[j];
+        s_axis_tvalid_int_reg[j] <= s_axis_tvalid_int_next[j];
+        temp_s_axis_tvalid_int_reg[j] <= temp_s_axis_tvalid_int_next[j];
+    end
+
+    for (j=0; j<NUM_RSDS; j=j+1) begin
+        if (store_axis_input_to_output[j]) begin
+            s_axis_tdata_int_reg[j] <= s_axis_tdata;
+            s_axis_tkeep_int_reg[j] <= s_axis_tkeep;
+            s_axis_tlast_int_reg[j] <= s_axis_tlast;
+            s_axis_tid_int_reg[j] <= s_axis_tid;
+            s_axis_tdest_int_reg[j] <= s_axis_tdest;
+            s_axis_tuser_int_reg[j] <= s_axis_tuser;
+            s_axis_msg_id_int_reg[j] <= s_axis_msg_id;
+            s_axis_is_msg_int_reg[j] <= s_axis_is_msg;
+            s_axis_msg_len_int_reg[j] <= s_axis_msg_len;
+            s_axis_msg_offset_int_reg[j] <= s_axis_msg_offset;
+        end
+        else if (store_axis_temp_to_output[j]) begin
+            s_axis_tdata_int_reg[j] <= temp_s_axis_tdata_int_reg[j];
+            s_axis_tkeep_int_reg[j] <= temp_s_axis_tkeep_int_reg[j];
+            s_axis_tlast_int_reg[j] <= temp_s_axis_tlast_int_reg[j];
+            s_axis_tid_int_reg[j] <= temp_s_axis_tid_int_reg[j];
+            s_axis_tdest_int_reg[j] <= temp_s_axis_tdest_int_reg[j];
+            s_axis_tuser_int_reg[j] <= temp_s_axis_tuser_int_reg[j];
+            s_axis_msg_id_int_reg[j] <= temp_s_axis_msg_id_int_reg[j];
+            s_axis_is_msg_int_reg[j] <= temp_s_axis_is_msg_int_reg[j];
+            s_axis_msg_len_int_reg[j] <= temp_s_axis_msg_len_int_reg[j];
+            s_axis_msg_offset_int_reg[j] <= temp_s_axis_msg_offset_int_reg[j];
+        end
+
+        if (store_axis_input_to_temp[j]) begin
+            temp_s_axis_tdata_int_reg[j] <= s_axis_tdata;
+            temp_s_axis_tkeep_int_reg[j] <= s_axis_tkeep;
+            temp_s_axis_tlast_int_reg[j] <= s_axis_tlast;
+            temp_s_axis_tid_int_reg[j] <= s_axis_tid;
+            temp_s_axis_tdest_int_reg[j] <= s_axis_tdest;
+            temp_s_axis_tuser_int_reg[j] <= s_axis_tuser;
+            temp_s_axis_msg_id_int_reg[j] <= s_axis_msg_id;
+            temp_s_axis_is_msg_int_reg[j] <= s_axis_is_msg;
+            temp_s_axis_msg_len_int_reg[j] <= s_axis_msg_len;
+            temp_s_axis_msg_offset_int_reg[j] <= s_axis_msg_offset;
+        end
+    end
+
+    if (rst) begin
+        for (j=0; j<NUM_RSDS; j=j+1) begin
+            s_axis_tready_int_reg[j] <= 1'b0;
+            s_axis_tvalid_int_reg[j] <= 1'b0;
+            temp_s_axis_tvalid_int_reg[j] <= 1'b0;
+
+            s_axis_tdata_int_reg[j] <= 0;
+            s_axis_tkeep_int_reg[j] <= 0;
+            s_axis_tlast_int_reg[j] <= 0;
+            s_axis_tid_int_reg[j] <= 0;
+            s_axis_tdest_int_reg[j] <= 0;
+            s_axis_tuser_int_reg[j] <= 0;
+            s_axis_msg_id_int_reg[j] <= 0;
+            s_axis_is_msg_int_reg[j] <= 0;
+            s_axis_msg_len_int_reg[j] <= 0;
+            s_axis_msg_offset_int_reg[j] <= 0;
+
+            temp_s_axis_tdata_int_reg[j] <= 0;
+            temp_s_axis_tkeep_int_reg[j] <= 0;
+            temp_s_axis_tlast_int_reg[j] <= 0;
+            temp_s_axis_tid_int_reg[j] <= 0;
+            temp_s_axis_tdest_int_reg[j] <= 0;
+            temp_s_axis_tuser_int_reg[j] <= 0;
+            temp_s_axis_msg_id_int_reg[j] <= 0;
+            temp_s_axis_is_msg_int_reg[j] <= 0;
+            temp_s_axis_msg_len_int_reg[j] <= 0;
+            temp_s_axis_msg_offset_int_reg[j] <= 0;
+        end
+    end
+end
+
+
+// TODO: sharding in the future
+// wire [CL_NUM_RSDS-1:0] in_cur_q_w;
+// assign in_cur_q_w = s_axis_msg_id & QUEUE_MASK;
+// assign s_axis_tready = s_axis_tready_int_reg[in_cur_q_reg];
+assign s_ctrl_axis_tready = &(s_ctrl_axis_tready_in);
+assign ctrl_cnt = w_ctrl_cnt[0];
+
+wire [NUM_RSDS-1:0] in_q;
+reg [NUM_RSDS-1:0] s_axis_tready_reg = 0, s_axis_tready_next;
+// assign s_axis_tready = (&(s_axis_tready_in)) | (in_state_reg==S_IN_DROP);
+assign s_axis_tready = (&(s_axis_tready_reg)) | (in_state_reg==S_IN_DROP);
+// assign in_q = 4'b1 << in_cur_q_reg;
+assign in_q = 4'b1 << (s_axis_msg_id % NUM_RSDS);
+
+// assign s_axis_in_wr = !(s_axis_tvalid & s_axis_tready) ? 0 :
+//                         (in_state_reg == S_IN_IDLE)? in_q :
+//                         (in_state_reg == S_IN_WR)? in_q :
+//                         0;
+assign s_axis_in_wr = s_axis_tvalid & s_axis_tready ?
+                        (in_state_reg != S_IN_DROP ? in_q : 0)
+                        : 0;
+// input
+always @(*) begin
+    in_state_next = in_state_reg;
+    in_cur_q_next = in_cur_q_reg;
+
+    s_axis_tready_next = s_axis_tready_early_int;
+
+    case (in_state_reg)
+        S_IN_IDLE: begin
+            if (s_axis_tvalid && s_axis_tready) begin
+                if (!s_axis_tlast) begin
+                    in_state_next = S_IN_WR;
+                end
+                else begin
+                    in_cur_q_next = in_cur_q_plus_one;
+                end
+            end
+            // TODO: whether to keep the order
+            // else begin
+            //     in_cur_q_next = in_cur_q_plus_one;
+            // end
+        end
+        S_IN_WR: begin
+            if (s_axis_tvalid && s_axis_tready) begin
+                if (s_axis_tlast) begin
+                    in_state_next = S_IN_IDLE;
+                    in_cur_q_next = in_cur_q_plus_one;
+                end
+            end
+        end
+        S_IN_DROP: begin
+            if (s_axis_tvalid && s_axis_tready && s_axis_tlast) begin
+                in_cur_q_next = in_cur_q_plus_one;
+                in_state_next = S_IN_IDLE;
+            end
+        end
+    endcase
+end
+
+// output
+always @(*) begin
+    out_state_next = out_state_reg;
+    out_cur_q_next = out_cur_q_reg;
+
+    case (out_state_reg)
+        S_OUT_IDLE: begin
+            if (m_axis_tvalid && m_axis_tready) begin
+                if (m_axis_tlast == 0) begin
+                    out_state_next = S_OUT_WR;
+                end
+                else begin
+                    out_cur_q_next = out_cur_q_plus_one;
+                end
+            end
+            // TODO: whether to keep the order
+            else begin
+                out_cur_q_next = out_cur_q_plus_one;
+            end
+        end
+        S_OUT_WR: begin
+            if (m_axis_tvalid && m_axis_tready) begin
+                if (m_axis_tlast) begin
+                    out_state_next = S_OUT_IDLE;
+                    out_cur_q_next = out_cur_q_plus_one;
+                end
+            end
+        end
+    endcase
+end
+
+always @(posedge clk) begin
+
+    in_cur_q_reg <= in_cur_q_next;
+    in_state_reg <= in_state_next;
+
+    out_cur_q_reg <= out_cur_q_next;
+    out_state_reg <= out_state_next;
+
+    s_axis_tready_reg <= s_axis_tready_next;
+
+    if (rst) begin
+        in_cur_q_reg <= 0;
+        in_state_reg <= S_IN_IDLE;
+
+        out_cur_q_reg <= 0;
+        out_state_reg <= S_OUT_IDLE;
+
+        s_axis_tready_reg <= 0;
+    end
+end
+
+
+endmodule
+
+`resetall
diff --color -burN ./corundum-rtl/mqnic_ingress.v ./hp-rtl/mqnic_ingress.v
--- ./corundum-rtl/mqnic_ingress.v	2024-09-12 17:15:07.565794868 -0400
+++ ./hp-rtl/mqnic_ingress.v	2024-09-12 17:14:43.101796026 -0400
@@ -47,11 +47,11 @@
     // Receive queue index width
     parameter RX_QUEUE_INDEX_WIDTH = 8,
     // Enable RX RSS
-    parameter RX_RSS_ENABLE = 1,
+    parameter RX_RSS_ENABLE = 0,
     // Enable RX hashing
-    parameter RX_HASH_ENABLE = 1,
+    parameter RX_HASH_ENABLE = 0,
     // Enable RX checksum offload
-    parameter RX_CHECKSUM_ENABLE = 1,
+    parameter RX_CHECKSUM_ENABLE = 0,
     // Width of AXI stream interfaces in bits
     parameter AXIS_DATA_WIDTH = 256,
     // AXI stream tkeep signal width (words per cycle)
@@ -65,7 +65,15 @@
     // AXI stream tuser signal width
     parameter M_AXIS_USER_WIDTH = S_AXIS_USER_WIDTH,
     // Max receive packet size
-    parameter MAX_RX_SIZE = 2048
+    parameter MAX_RX_SIZE = 2048,
+    // Enable RX Routing
+    parameter RX_ROUTING_ENABLE = 1,
+    parameter RX_ROUTING_KEY_LEN = 32,
+    parameter CAM_CMP_DATA_WIDTH = 64,
+    parameter CAM_RAM_ADDR_WIDTH = 9,
+    parameter STASH_DEPTH = 256,
+    parameter MSG_ID_WIDTH = 32,
+    parameter MSG_OFF_WIDTH = 8
 )
 (
     input  wire                             clk,
@@ -82,6 +90,10 @@
     input  wire [AXIS_ID_WIDTH-1:0]         s_axis_tid,
     input  wire [AXIS_DEST_WIDTH-1:0]       s_axis_tdest,
     input  wire [S_AXIS_USER_WIDTH-1:0]     s_axis_tuser,
+    input  wire [MSG_ID_WIDTH-1:0]          s_axis_msg_id,
+    input  wire                             s_axis_is_msg,
+    input  wire [MSG_OFF_WIDTH-1:0]         s_axis_msg_len,
+    input  wire [MSG_OFF_WIDTH-1:0]         s_axis_msg_offset,
 
     /*
      * Receive data output
@@ -95,12 +107,14 @@
     output wire [AXIS_DEST_WIDTH-1:0]       m_axis_tdest,
     output wire [M_AXIS_USER_WIDTH-1:0]     m_axis_tuser,
 
-    /*
-     * RX checksum output
-     */
-    output wire [15:0]                      rx_csum,
-    output wire                             rx_csum_valid,
-    input  wire                             rx_csum_ready
+    // ctrl cnt
+    output wire [31:0]                      ctrl_cnt,
+
+    // seperate AXIS signals for reconfiguration
+    input  wire [AXIS_DATA_WIDTH-1:0]       s_ctrl_axis_tdata,
+    input  wire [AXIS_KEEP_WIDTH-1:0]       s_ctrl_axis_tkeep,
+    input  wire                             s_ctrl_axis_tvalid,
+    output wire                             s_ctrl_axis_tready
 );
 
 localparam RX_HASH_WIDTH = 32;
@@ -110,38 +124,127 @@
 localparam TUSER_HASH_TYPE_OFFSET = TUSER_HASH_OFFSET + (RX_HASH_ENABLE ? RX_HASH_WIDTH : 0);
 localparam INT_TUSER_WIDTH = TUSER_HASH_TYPE_OFFSET + (RX_HASH_ENABLE ? RX_HASH_TYPE_WIDTH : 0);
 
-generate
+initial begin
+    if (RX_HASH_ENABLE || RX_RSS_ENABLE || RX_CHECKSUM_ENABLE) begin
+        $error("RX RSS and CSUM should be disabled!");
+        $finish;
+    end
+
+    if (RX_ROUTING_KEY_LEN != 32) begin
+        $error("Error: rx routing key length should be 32 (instance %m)");
+        $finish;
+    end
+end
 
-wire [31:0]  rx_fifo_hash;
-wire [3:0]   rx_fifo_hash_type;
-wire         rx_fifo_hash_ready;
-wire         rx_fifo_hash_valid;
-
-if (RX_HASH_ENABLE) begin
-
-    wire [31:0]  rx_hash_int;
-    wire [3:0]   rx_hash_type_int;
-    wire         rx_hash_valid_int;
+genvar  n;
+integer i;
 
-    rx_hash #(
-        .DATA_WIDTH(AXIS_DATA_WIDTH)
-    )
-    rx_hash_inst (
+reg [AXIS_DATA_WIDTH-1:0]       s_axis_tdata_reg_d1 = 0;
+reg [AXIS_KEEP_WIDTH-1:0]       s_axis_tkeep_reg_d1 = 0;
+reg                             s_axis_tvalid_reg_d1 = 0;
+reg                             s_axis_tlast_reg_d1 = 0;
+reg [AXIS_ID_WIDTH-1:0]         s_axis_tid_reg_d1 = 0;
+reg [AXIS_DEST_WIDTH-1:0]       s_axis_tdest_reg_d1 = 0;
+reg [S_AXIS_USER_WIDTH-1:0]     s_axis_tuser_reg_d1 = 0;
+reg [MSG_ID_WIDTH-1:0]          s_axis_msg_id_reg_d1 = 0;
+reg                             s_axis_is_msg_reg_d1 = 0;
+reg [MSG_OFF_WIDTH-1:0]         s_axis_msg_len_reg_d1 = 0;
+reg [MSG_OFF_WIDTH-1:0]         s_axis_msg_offset_reg_d1 = 0;
+
+reg [AXIS_DATA_WIDTH-1:0]       s_axis_tdata_reg_d2 = 0;
+reg [AXIS_KEEP_WIDTH-1:0]       s_axis_tkeep_reg_d2 = 0;
+reg                             s_axis_tvalid_reg_d2 = 0;
+reg                             s_axis_tlast_reg_d2 = 0;
+reg [AXIS_ID_WIDTH-1:0]         s_axis_tid_reg_d2 = 0;
+reg [AXIS_DEST_WIDTH-1:0]       s_axis_tdest_reg_d2 = 0;
+reg [S_AXIS_USER_WIDTH-1:0]     s_axis_tuser_reg_d2 = 0;
+reg [MSG_ID_WIDTH-1:0]          s_axis_msg_id_reg_d2 = 0;
+reg                             s_axis_is_msg_reg_d2 = 0;
+reg [MSG_OFF_WIDTH-1:0]         s_axis_msg_len_reg_d2 = 0;
+reg [MSG_OFF_WIDTH-1:0]         s_axis_msg_offset_reg_d2 = 0;
+
+// stash, CAM + RAM to cache the result
+reg [RX_ROUTING_KEY_LEN-1:0] cached_routing_key_reg = 0, cached_routing_key_next;
+reg cached_routing_key_valid_reg = 0, cached_routing_key_valid_next;
+reg if_discard_reg = 0, if_discard_next; // whether to discard
+reg if_use_rsr_q_reg = 0, if_use_rsr_q_next; // whether to use qid computed by rsr
+reg if_input_to_rsr_reg = 0, if_input_to_rsr_next;
+
+wire [RX_ROUTING_KEY_LEN-1:0]   rx_routing_key_int;
+wire [MSG_ID_WIDTH-1:0]         rx_routing_msg_id_int;
+wire                            rx_routing_valid_int;
+
+wire                          pkt_fifo_tready;
+wire                          pkt_md_fifo_in_tready;
+wire                          rx_routing_in_tready;
+
+wire                          pkt_md_fifo_tvalid;
+wire                          pkt_md_fifo_tready;
+
+wire                          fifo_axis_use_rsr_q;
+wire [AXIS_DATA_WIDTH-1:0]    fifo_axis_tdata;
+wire [AXIS_KEEP_WIDTH-1:0]    fifo_axis_tkeep;
+wire                          fifo_axis_tvalid;
+wire                          fifo_axis_tready;
+wire                          fifo_axis_tlast;
+wire [AXIS_ID_WIDTH-1:0]      fifo_axis_tid;
+wire [AXIS_DEST_WIDTH-1:0]    fifo_axis_tdest;
+wire [S_AXIS_USER_WIDTH-1:0]  fifo_axis_tuser;
+
+wire [MSG_ID_WIDTH-1:0]       fifo_axis_msg_id;
+wire                          fifo_axis_is_msg;
+wire [MSG_OFF_WIDTH-1:0]      fifo_axis_msg_len;
+wire [MSG_OFF_WIDTH-1:0]      fifo_axis_msg_offset;
+
+rx_routing #(
+    .DATA_WIDTH(AXIS_DATA_WIDTH),
+    .CAM_CMP_DATA_WIDTH(CAM_CMP_DATA_WIDTH),
+    .CAM_RAM_ADDR_WIDTH(CAM_RAM_ADDR_WIDTH)
+)
+rx_routing_inst (
         .clk(clk),
         .rst(rst),
-        .s_axis_tdata(s_axis_tdata),
-        .s_axis_tkeep(s_axis_tkeep),
-        .s_axis_tvalid(s_axis_tvalid & s_axis_tready),
-        .s_axis_tlast(s_axis_tlast),
-        .hash_key(320'h6d5a56da255b0ec24167253d43a38fb0d0ca2bcbae7b30b477cb2da38030f20c6a42b73bbeac01fa),
-        .m_axis_hash(rx_hash_int),
-        .m_axis_hash_type(rx_hash_type_int),
-        .m_axis_hash_valid(rx_hash_valid_int)
-    );
 
+    .s_axis_tdata(s_axis_tdata_reg_d2),
+    .s_axis_tkeep(s_axis_tkeep_reg_d2),
+    .s_axis_tvalid(s_axis_tvalid_reg_d2 && if_input_to_rsr_reg && !if_discard_reg),
+    .s_axis_tlast(s_axis_tlast_reg_d2),
+    .s_axis_tready(rx_routing_in_tready),
+
+    .ctrl_cnt(ctrl_cnt),
+
+    //
+    .s_ctrl_axis_tdata      (s_ctrl_axis_tdata),
+    .s_ctrl_axis_tkeep      (s_ctrl_axis_tkeep),
+    .s_ctrl_axis_tvalid     (s_ctrl_axis_tvalid),
+    .s_ctrl_axis_tready     (s_ctrl_axis_tready),
+
+    .m_axis_key             (rx_routing_key_int),  // should be cached
+    .m_axis_msg_id          (rx_routing_msg_id_int),
+    .m_axis_key_valid       (rx_routing_valid_int)
+);
+
+// 
+wire [RX_ROUTING_KEY_LEN-1:0]   rx_routing_fifo_in[1:0];
+wire [1:0]                      rx_routing_fifo_in_valid;
+
+wire [RX_ROUTING_KEY_LEN-1:0]   rx_routing_fifo_out[1:0];
+wire [1:0]                      rx_routing_fifo_out_valid;
+wire [1:0]                      rx_routing_fifo_out_ready;
+
+wire [7:0]                      rx_routing_key_int_w;
+assign rx_routing_key_int_w = rx_routing_key_int[7:0];
+
+assign rx_routing_fifo_in[0] = cached_routing_key_reg;
+assign rx_routing_fifo_in_valid[0] = cached_routing_key_valid_reg;
+assign rx_routing_fifo_in[1] = rx_routing_key_int;
+assign rx_routing_fifo_in_valid[1] = rx_routing_valid_int;
+
+generate
+    for (n=0; n<2; n=n+1) begin: route_res_fifos
     axis_fifo #(
         .DEPTH(32),
-        .DATA_WIDTH(32+4),
+            .DATA_WIDTH(RX_ROUTING_KEY_LEN), // TODO: may need modifications
         .KEEP_ENABLE(0),
         .LAST_ENABLE(0),
         .ID_ENABLE(0),
@@ -149,25 +252,25 @@
         .USER_ENABLE(0),
         .FRAME_FIFO(0)
     )
-    rx_hash_fifo (
+        rx_routing_fifo (
         .clk(clk),
         .rst(rst),
 
         // AXI input
-        .s_axis_tdata({rx_hash_type_int, rx_hash_int}),
+            .s_axis_tdata(rx_routing_fifo_in[n]),  // TODO
         .s_axis_tkeep(0),
-        .s_axis_tvalid(rx_hash_valid_int),
-        .s_axis_tready(),
+            .s_axis_tvalid(rx_routing_fifo_in_valid[n]), // TODO
+            .s_axis_tready(), // TODO: backpressure
         .s_axis_tlast(0),
         .s_axis_tid(0),
         .s_axis_tdest(0),
         .s_axis_tuser(0),
 
         // AXI output
-        .m_axis_tdata({rx_fifo_hash_type, rx_fifo_hash}),
+            .m_axis_tdata(rx_routing_fifo_out[n]),   // TODO
         .m_axis_tkeep(),
-        .m_axis_tvalid(rx_fifo_hash_valid),
-        .m_axis_tready(rx_fifo_hash_ready),
+            .m_axis_tvalid(rx_routing_fifo_out_valid[n]),  // TODO
+            .m_axis_tready(rx_routing_fifo_out_ready[n]),  // TODO
         .m_axis_tlast(),
         .m_axis_tid(),
         .m_axis_tdest(),
@@ -178,165 +281,529 @@
         .status_bad_frame(),
         .status_good_frame()
     );
+    end
+endgenerate
 
-end else begin
+axis_fifo_w_delays #(
+    .DEPTH(AXIS_KEEP_WIDTH*32),
+    .DATA_WIDTH(1 + AXIS_DATA_WIDTH),
+    .KEEP_ENABLE(AXIS_KEEP_WIDTH > 1),
+    .KEEP_WIDTH(AXIS_KEEP_WIDTH),
+    .LAST_ENABLE(1),
+    .ID_ENABLE(1),
+    .ID_WIDTH(AXIS_ID_WIDTH),
+    .DEST_ENABLE(1),
+    .DEST_WIDTH(AXIS_DEST_WIDTH),
+    .USER_ENABLE(1),
+    .USER_WIDTH(S_AXIS_USER_WIDTH),
+    .FRAME_FIFO(0),
+    .DELAY_CYCLES(2)
+)
+rx_hash_data_fifo (
+    .clk(clk),
+    .rst(rst),
 
-    assign rx_fifo_hash = 32'd0;
-    assign rx_fifo_hash_type = 4'd0;
-    assign rx_fifo_hash_valid = 1'b0;
+    // AXI input
+    .s_axis_tdata       ({if_use_rsr_q_reg, s_axis_tdata_reg_d2}),
+    .s_axis_tkeep       (s_axis_tkeep_reg_d2),
+    .s_axis_tvalid      (s_axis_tvalid_reg_d2 && !if_discard_reg),
+    .s_axis_tready      (pkt_fifo_tready),
+    .s_axis_tlast       (s_axis_tlast_reg_d2),
+    .s_axis_tid         (s_axis_tid_reg_d2),
+    .s_axis_tdest       (s_axis_tdest_reg_d2),
+    .s_axis_tuser       (s_axis_tuser_reg_d2),
 
-end
+    // AXI output
+    .m_axis_tdata       ({fifo_axis_use_rsr_q, fifo_axis_tdata}),
+    .m_axis_tkeep       (fifo_axis_tkeep),
+    .m_axis_tvalid      (fifo_axis_tvalid),
+    .m_axis_tready      (fifo_axis_tready),
+    .m_axis_tlast       (fifo_axis_tlast),
+    .m_axis_tid         (fifo_axis_tid),
+    .m_axis_tdest       (fifo_axis_tdest),
+    .m_axis_tuser       (fifo_axis_tuser),
 
-if (RX_CHECKSUM_ENABLE) begin
+    // Status
+    .status_overflow(),
+    .status_bad_frame(),
+    .status_good_frame()
+);
 
-    wire [15:0]  rx_csum_int;
-    wire         rx_csum_valid_int;
+localparam S_PKTIN_IDLE = 0;
+localparam S_PKTIN_WR = 1;
 
-    rx_checksum #(
-        .DATA_WIDTH(AXIS_DATA_WIDTH)
-    )
-    rx_checksum_inst (
-        .clk(clk),
-        .rst(rst),
-        .s_axis_tdata(s_axis_tdata),
-        .s_axis_tkeep(s_axis_tkeep),
-        .s_axis_tvalid(s_axis_tvalid & s_axis_tready),
-        .s_axis_tlast(s_axis_tlast),
-        .m_axis_csum(rx_csum_int),
-        .m_axis_csum_valid(rx_csum_valid_int)
-    );
+reg pkt_in_state_reg = S_PKTIN_IDLE, pkt_in_state_next;
 
-    axis_fifo #(
-        .DEPTH(32),
-        .DATA_WIDTH(16),
+axis_fifo #(
+    // .DEPTH(32/8*(MSG_ID_WIDTH+MSG_OFF_WIDTH+MSG_OFF_WIDTH+1)),
+    // .DEPTH(32*(MSG_ID_WIDTH+MSG_OFF_WIDTH+MSG_OFF_WIDTH+1)),
+    .DEPTH(40),
+    .DATA_WIDTH(MSG_ID_WIDTH+MSG_OFF_WIDTH+MSG_OFF_WIDTH+1),
         .KEEP_ENABLE(0),
         .LAST_ENABLE(0),
         .ID_ENABLE(0),
         .DEST_ENABLE(0),
         .USER_ENABLE(0),
+    // .PIPELINE_OUTPUT(1),
         .FRAME_FIFO(0)
-    )
-    rx_csum_fifo (
+)
+msg_id_fifo (
         .clk(clk),
         .rst(rst),
 
         // AXI input
-        .s_axis_tdata(rx_csum_int),
+    .s_axis_tdata({s_axis_msg_id_reg_d2,
+                    s_axis_msg_len_reg_d2,
+                    s_axis_msg_offset_reg_d2,
+                    s_axis_is_msg_reg_d2}),
         .s_axis_tkeep(0),
-        .s_axis_tvalid(rx_csum_valid_int),
-        .s_axis_tready(),
+    .s_axis_tvalid(s_axis_tvalid_reg_d2 && !if_discard_reg && pkt_in_state_reg==S_PKTIN_IDLE),
+    .s_axis_tready(pkt_md_fifo_in_tready),
         .s_axis_tlast(0),
         .s_axis_tid(0),
         .s_axis_tdest(0),
         .s_axis_tuser(0),
 
         // AXI output
-        .m_axis_tdata(rx_csum),
-        .m_axis_tkeep(),
-        .m_axis_tvalid(rx_csum_valid),
-        .m_axis_tready(rx_csum_ready),
-        .m_axis_tlast(),
-        .m_axis_tid(),
-        .m_axis_tdest(),
-        .m_axis_tuser(),
+    .m_axis_tdata({fifo_axis_msg_id,
+                    fifo_axis_msg_len,
+                    fifo_axis_msg_offset,
+                    fifo_axis_is_msg}),
+    .m_axis_tkeep   (),
+    .m_axis_tvalid  (pkt_md_fifo_tvalid),
+    .m_axis_tready  (pkt_md_fifo_tready),
+    .m_axis_tlast   (),
+    .m_axis_tid     (),
+    .m_axis_tdest   (),
+    .m_axis_tuser   (),
 
         // Status
         .status_overflow(),
         .status_bad_frame(),
         .status_good_frame()
-    );
+);
 
-end else begin
+wire sideband_valid = pkt_md_fifo_tvalid & rx_routing_fifo_out_valid[fifo_axis_use_rsr_q];
+// wire sideband_valid = 0;
 
-    assign rx_csum = 16'd0;
-    assign rx_csum_valid = 1'b0;
+assign rx_routing_fifo_out_ready[0] = fifo_axis_tready
+                                        && fifo_axis_tvalid
+                                        && fifo_axis_tlast
+                                        && (fifo_axis_use_rsr_q==0);
+assign rx_routing_fifo_out_ready[1] = fifo_axis_tready
+                                        && fifo_axis_tvalid
+                                        && fifo_axis_tlast
+                                        && (fifo_axis_use_rsr_q==1);
+
+assign pkt_md_fifo_tready = fifo_axis_tready && fifo_axis_tvalid && fifo_axis_tlast;
+
+assign fifo_axis_tready = m_axis_tready && sideband_valid;
+
+assign m_axis_tdata = fifo_axis_tdata;
+assign m_axis_tkeep = fifo_axis_tkeep;
+assign m_axis_tvalid = fifo_axis_tvalid && sideband_valid;
+assign m_axis_tlast = fifo_axis_tlast;
+assign m_axis_tid = fifo_axis_tid;
+assign m_axis_tdest = fifo_axis_tdest;
+// NOTE: tuser stays the same until tlast
+assign m_axis_tuser = {fifo_axis_msg_id,
+                        fifo_axis_is_msg,
+                        fifo_axis_msg_len,
+                        fifo_axis_msg_offset,
+                        rx_routing_fifo_out[fifo_axis_use_rsr_q],
+                        fifo_axis_tuser};
+
+assign s_axis_tready = pkt_fifo_tready;
+
+// pkt in
+always @(*) begin
+    pkt_in_state_next = pkt_in_state_reg;
+
+    case (pkt_in_state_reg)
+        S_PKTIN_IDLE: begin
+            if (s_axis_tvalid_reg_d2) begin
+                if (!s_axis_tlast_reg_d2) begin
+                    pkt_in_state_next = S_PKTIN_WR;
+                end
+            end
+        end
+        S_PKTIN_WR: begin
+            if (s_axis_tvalid_reg_d2 && s_axis_tlast_reg_d2) begin
+                pkt_in_state_next = S_PKTIN_IDLE;
+            end
+        end
+    endcase
+end
 
+always @(posedge clk) begin
+    pkt_in_state_reg <= pkt_in_state_next;
+    if (rst) begin
+        pkt_in_state_reg <= S_PKTIN_IDLE;
+    end
 end
 
-if (RX_HASH_ENABLE) begin
+// TODO
+localparam S_IDLE = 0;
+localparam S_CMP_DONE = 1;
+localparam S_WAIT_SECOND = 2;
+localparam S_WAIT_LAST = 3;
+localparam CAM_DATA_WIDTH = 32;
+// localparam CAM_RAM_ADDR_WIDTH = 7;
+localparam RAM_DATA_WIDTH = 8;
+localparam CL_STASH_DEPTH = $clog2(STASH_DEPTH);
+localparam STASH_ADDR_MASK = {CL_STASH_DEPTH{1'b1}};
+
+
+reg [1+RAM_DATA_WIDTH+CAM_DATA_WIDTH-1:0] stash [STASH_DEPTH-1:0];
+
+initial begin
+    for (i=0; i<STASH_DEPTH; i=i+1) begin
+        stash[i] = 0;
+    end
+end
 
-    wire [AXIS_DATA_WIDTH-1:0]    fifo_axis_tdata;
-    wire [AXIS_KEEP_WIDTH-1:0]    fifo_axis_tkeep;
-    wire                          fifo_axis_tvalid;
-    wire                          fifo_axis_tready;
-    wire                          fifo_axis_tlast;
-    wire [AXIS_ID_WIDTH-1:0]      fifo_axis_tid;
-    wire [AXIS_DEST_WIDTH-1:0]    fifo_axis_tdest;
-    wire [S_AXIS_USER_WIDTH-1:0]  fifo_axis_tuser;
+reg  [STASH_DEPTH-1:0] stash_compare_result_reg = 0;
+wire [STASH_DEPTH-1:0] stash_compare_result;
+// wire [STASH_DEPTH-1:0] neg_stash_compare_result = $signed(0-stash_compare_result);
+// wire [CL_STASH_DEPTH-1:0] log2_stash_result = $clog2(stash_compare_result_reg & neg_stash_compare_result);
+wire pe_output_valid;
+wire [STASH_DEPTH-1:0] pe_output;
+wire [CL_STASH_DEPTH-1:0] pe_output_encoded;
+// wire cam_match;
+// wire [CAM_RAM_ADDR_WIDTH-1:0] cam_match_addr;
+
+// wire [RAM_DATA_WIDTH-1:0] ram_cached_qid;
+
+// write into CAM, RAM
+// wire cam_wr_busy;
+// reg  cam_wr_en_reg = 0, cam_wr_en_next;
+// reg  [CAM_RAM_ADDR_WIDTH-1:0] cam_wr_addr_reg = 0, cam_wr_addr_next;
+// reg  [CAM_DATA_WIDTH-1:0] cam_wr_data_reg = 0, cam_wr_data_next;
+//
+// reg  ram_wr_en_reg = 0, ram_wr_en_next;
+// reg  [CAM_RAM_ADDR_WIDTH-1:0] ram_wr_addr_reg = 0, ram_wr_addr_next;
+// reg  [RAM_DATA_WIDTH-1:0] ram_wr_data_reg = 0, ram_wr_data_next;
+
+reg  stash_wr_en;
+reg  [CL_STASH_DEPTH-1:0] stash_wr_addr;
+reg  [1+RAM_DATA_WIDTH+CAM_DATA_WIDTH-1:0] stash_wr_data;
+reg  [1+CL_STASH_DEPTH-1:0] stash_start_ptr_reg = 0, stash_start_ptr_next;
+reg  [1+CL_STASH_DEPTH-1:0] stash_finish_ptr_reg = 0, stash_finish_ptr_next;
+
+always @(*) begin
+    stash_start_ptr_next = stash_start_ptr_reg;
+    stash_finish_ptr_next = stash_finish_ptr_reg;
+
+    stash_wr_en = 1'b0;
+    stash_wr_addr = stash_start_ptr_reg;
+    stash_wr_data = 0;
+
+    // cam_wr_en_next = 1'b0;
+    // cam_wr_addr_next = stash_finish_ptr_reg;
+    // cam_wr_data_next = cam_wr_data_reg;
+
+    // ram_wr_en_next = 1'b0;
+    // ram_wr_addr_next = stash_finish_ptr_reg;
+    // ram_wr_data_next = stash[stash_finish_ptr_reg & STASH_ADDR_MASK][CAM_DATA_WIDTH+RAM_DATA_WIDTH-1:CAM_DATA_WIDTH];
+
+    // write into stash
+    if (rx_routing_valid_int) begin
+        stash_wr_en = 1'b1;
+        stash_wr_addr = stash_start_ptr_reg & STASH_ADDR_MASK;
+        stash_wr_data = {1'b1, rx_routing_key_int_w, rx_routing_msg_id_int};
+
+        stash_start_ptr_next = stash_start_ptr_reg + 1;
+
+    end
+
+    // write into CAM+RAM
+    // if (stash_finish_ptr_reg != stash_start_ptr_reg) begin
+    //     if (!cam_wr_busy && !cam_wr_en_reg) begin
+    //         cam_wr_en_next = 1'b1;
+    //         cam_wr_addr_next = stash_finish_ptr_reg & STASH_ADDR_MASK;
+    //         cam_wr_data_next = stash[stash_finish_ptr_reg & STASH_ADDR_MASK][CAM_DATA_WIDTH-1:0];
+
+    //         ram_wr_en_next = 1'b1;
+    //         ram_wr_addr_next = stash_finish_ptr_reg & STASH_ADDR_MASK;
+    //         ram_wr_data_next = stash[stash_finish_ptr_reg & STASH_ADDR_MASK][CAM_DATA_WIDTH+RAM_DATA_WIDTH-1:CAM_DATA_WIDTH];
+
+    //         stash_finish_ptr_next = stash_finish_ptr_reg + 1;
+    //     end
+    // end
+end
 
-    axis_fifo #(
-        .DEPTH(AXIS_KEEP_WIDTH*32),
-        .DATA_WIDTH(AXIS_DATA_WIDTH),
-        .KEEP_ENABLE(AXIS_KEEP_WIDTH > 1),
-        .KEEP_WIDTH(AXIS_KEEP_WIDTH),
-        .LAST_ENABLE(1),
-        .ID_ENABLE(1),
-        .ID_WIDTH(AXIS_ID_WIDTH),
-        .DEST_ENABLE(1),
-        .DEST_WIDTH(AXIS_DEST_WIDTH),
-        .USER_ENABLE(1),
-        .USER_WIDTH(S_AXIS_USER_WIDTH),
-        .FRAME_FIFO(0)
-    )
-    rx_hash_data_fifo (
-        .clk(clk),
-        .rst(rst),
+always @(posedge clk) begin
+    stash_start_ptr_reg <= stash_start_ptr_next;
+    stash_finish_ptr_reg <= stash_finish_ptr_next;
+
+    if (stash_wr_en) begin
+        stash[stash_wr_addr] <= stash_wr_data;
+    end
+
+    // cam_wr_addr_reg <= cam_wr_addr_next;
+    // cam_wr_data_reg <= cam_wr_data_next;
+    // cam_wr_en_reg <= cam_wr_en_next;
+
+    // ram_wr_addr_reg <= ram_wr_addr_next;
+    // ram_wr_data_reg <= ram_wr_data_next;
+    // ram_wr_en_reg <= ram_wr_en_next;
+
+    if (rst) begin
+        stash_start_ptr_reg <= 0;
+        stash_finish_ptr_reg <= 0;
+        // cam_wr_addr_reg <= 0;
+        // cam_wr_data_reg <= 0;
+        // cam_wr_en_reg   <= 0;
+
+        // ram_wr_addr_reg <= 0;
+        // ram_wr_data_reg <= 0;
+        // ram_wr_en_reg   <= 0;
+    end
+end
 
-        // AXI input
-        .s_axis_tdata(s_axis_tdata),
-        .s_axis_tkeep(s_axis_tkeep),
-        .s_axis_tvalid(s_axis_tvalid),
-        .s_axis_tready(s_axis_tready),
-        .s_axis_tlast(s_axis_tlast),
-        .s_axis_tid(s_axis_tid),
-        .s_axis_tdest(s_axis_tdest),
-        .s_axis_tuser(s_axis_tuser),
 
-        // AXI output
-        .m_axis_tdata(fifo_axis_tdata),
-        .m_axis_tkeep(fifo_axis_tkeep),
-        .m_axis_tvalid(fifo_axis_tvalid),
-        .m_axis_tready(fifo_axis_tready),
-        .m_axis_tlast(fifo_axis_tlast),
-        .m_axis_tid(fifo_axis_tid),
-        .m_axis_tdest(fifo_axis_tdest),
-        .m_axis_tuser(fifo_axis_tuser),
+generate
+    for (n=0; n<STASH_DEPTH; n=n+1) begin
+        assign stash_compare_result[n] = (stash[n][CAM_DATA_WIDTH-1:0] == s_axis_msg_id) && stash[n][CAM_DATA_WIDTH+RAM_DATA_WIDTH];
+    end
+endgenerate
 
-        // Status
-        .status_overflow(),
-        .status_bad_frame(),
-        .status_good_frame()
-    );
+reg [3:0] state_reg = S_IDLE, state_next;
 
-    wire sideband_valid = rx_fifo_hash_valid;
+always @(*) begin
+    state_next = state_reg;
 
-    assign rx_fifo_hash_ready = fifo_axis_tready && fifo_axis_tvalid && fifo_axis_tlast;
+    if_discard_next = if_discard_reg;
+    if_use_rsr_q_next = if_use_rsr_q_reg; // if 0, use cached, if 1, use qid computed by rsr
+    if_input_to_rsr_next = if_input_to_rsr_reg;
+
+    cached_routing_key_next = cached_routing_key_reg;
+    cached_routing_key_valid_next = 1'b0;
+
+
+    case (state_reg)
+        S_IDLE: begin
+            if (s_axis_tvalid && s_axis_tready) begin
+                // do the comparison in both stash and cam
+                if (s_axis_is_msg) begin
+                    // at-least 2 segments
+                    state_next = S_CMP_DONE;
+                end
+                else begin
+                    if_discard_next = 1'b0;
+                    if_use_rsr_q_next = 1'b0;
+                    if_input_to_rsr_next = 1'b0;
+
+                    cached_routing_key_next = 32'hffff;
+                    cached_routing_key_valid_next = 1'b1;
+
+                    if (!s_axis_tlast) begin
+                        state_next = S_WAIT_LAST;
+                    end
+                end
+            end
+        end
+        S_CMP_DONE: begin // d1
+            if (pe_output_valid && pe_output!=0) begin // stash result
+            // if (stash_compare_result_reg != 0) begin
+
+                if_discard_next = 1'b0;
+                if_use_rsr_q_next = 1'b0;
+                if_input_to_rsr_next = 1'b0;
+
+                cached_routing_key_next = stash[pe_output_encoded][CAM_DATA_WIDTH+RAM_DATA_WIDTH-1:CAM_DATA_WIDTH];
+                // cached_routing_key_next = stash[log2_stash_result][CAM_DATA_WIDTH+RAM_DATA_WIDTH-1:CAM_DATA_WIDTH];
+                cached_routing_key_valid_next = 1'b1;
+
+            end
+            // else if (cam_match) begin // cam result
+            //     if_discard_next = 1'b0;
+            //     if_use_rsr_q_next = 1'b0;
+            //     if_input_to_rsr_next = 1'b0;
+
+            //     cached_routing_key_next = ram_cached_qid;
+            //     cached_routing_key_valid_next = 1'b1;
+
+            // end
+            else begin
+                if (s_axis_is_msg_reg_d1 &&
+                        s_axis_msg_offset_reg_d1==0) begin
+                    if_discard_next = 1'b0;
+                    if_use_rsr_q_next = 1'b1;
+                    if_input_to_rsr_next = 1'b1;
+                end
+                else begin
+                    if_use_rsr_q_next = 1'b0;
+                    if_input_to_rsr_next = 1'b0;
+                    if_discard_next = 1'b1;
+                end
+            end
+            // state transition
+            if (s_axis_tvalid && s_axis_tready) begin
+                if (!s_axis_tlast) begin
+                    state_next = S_WAIT_LAST;
+                end
+                else begin
+                    state_next = S_IDLE;
+                end
+            end
+            else begin
+                state_next = S_WAIT_SECOND;
+            end
+        end
+        S_WAIT_SECOND: begin
+            if (s_axis_tvalid && s_axis_tready) begin
+                if (!s_axis_tlast) begin
+                    state_next = S_WAIT_LAST;
+                end
+                else begin
+                    state_next = S_IDLE;
+                end
+            end
+        end
+        S_WAIT_LAST: begin
+            if (s_axis_tvalid && s_axis_tready && s_axis_tlast) begin
+                state_next = S_IDLE;
+            end
+        end
+    endcase
+end
 
-    assign fifo_axis_tready = m_axis_tready && sideband_valid;
+always @(posedge clk) begin
+    state_reg <= state_next;
+    if_discard_reg <= if_discard_next;
+
+
+    if_use_rsr_q_reg <= if_use_rsr_q_next;
+    if_input_to_rsr_reg <= if_input_to_rsr_next;
+
+    stash_compare_result_reg <= stash_compare_result;
+
+    cached_routing_key_reg <= cached_routing_key_next;
+    cached_routing_key_valid_reg <= cached_routing_key_valid_next;
+
+    s_axis_tdata_reg_d1         <= s_axis_tdata;
+    s_axis_tkeep_reg_d1         <= s_axis_tkeep;
+    s_axis_tvalid_reg_d1        <= s_axis_tvalid & s_axis_tready;
+    s_axis_tlast_reg_d1         <= s_axis_tlast;
+    s_axis_tid_reg_d1           <= s_axis_tid;
+    s_axis_tdest_reg_d1         <= s_axis_tdest;
+    s_axis_tuser_reg_d1         <= s_axis_tuser;
+    s_axis_msg_id_reg_d1        <= s_axis_msg_id;
+    s_axis_is_msg_reg_d1        <= s_axis_is_msg;
+    s_axis_msg_len_reg_d1       <= s_axis_msg_len;
+    s_axis_msg_offset_reg_d1    <= s_axis_msg_offset;
+
+    s_axis_tdata_reg_d2         <= s_axis_tdata_reg_d1;
+    s_axis_tkeep_reg_d2         <= s_axis_tkeep_reg_d1;
+    s_axis_tvalid_reg_d2        <= s_axis_tvalid_reg_d1;
+    s_axis_tlast_reg_d2         <= s_axis_tlast_reg_d1;
+    s_axis_tid_reg_d2           <= s_axis_tid_reg_d1;
+    s_axis_tdest_reg_d2         <= s_axis_tdest_reg_d1;
+    s_axis_tuser_reg_d2         <= s_axis_tuser_reg_d1;
+    s_axis_msg_id_reg_d2        <= s_axis_msg_id_reg_d1;
+    s_axis_is_msg_reg_d2        <= s_axis_is_msg_reg_d1;
+    s_axis_msg_len_reg_d2       <= s_axis_msg_len_reg_d1;
+    s_axis_msg_offset_reg_d2    <= s_axis_msg_offset_reg_d1;
+
+    // rx_routing_valid_reg <= rx_routing_valid_int;
+    // rx_routing_key_reg <= rx_routing_key_int;
+    // rx_routing_msg_id_reg <= rx_routing_msg_id_int;
+
+    if (rst) begin
+        state_reg <= S_IDLE;
+        if_discard_reg <= 1'b0;
+
+
+        if_use_rsr_q_reg <= 1'b0;
+        if_input_to_rsr_reg <= 1'b0;
+
+        stash_compare_result_reg <= 0;
+
+        s_axis_tdata_reg_d1 <= 0;
+        s_axis_tkeep_reg_d1 <= 0;
+        s_axis_tvalid_reg_d1 <= 0;
+        s_axis_tlast_reg_d1 <= 0;
+        s_axis_tid_reg_d1 <= 0;
+        s_axis_tdest_reg_d1 <= 0;
+        s_axis_tuser_reg_d1 <= 0;
+        s_axis_msg_id_reg_d1 <= 0;
+        s_axis_is_msg_reg_d1 <= 0;
+        s_axis_msg_len_reg_d1 <= 0;
+        s_axis_msg_offset_reg_d1 <= 0;
+
+        s_axis_tdata_reg_d2 <= 0;
+        s_axis_tkeep_reg_d2 <= 0;
+        s_axis_tvalid_reg_d2 <= 0;
+        s_axis_tlast_reg_d2 <= 0;
+        s_axis_tid_reg_d2 <= 0;
+        s_axis_tdest_reg_d2 <= 0;
+        s_axis_tuser_reg_d2 <= 0;
+        s_axis_msg_id_reg_d2 <= 0;
+        s_axis_is_msg_reg_d2 <= 0;
+        s_axis_msg_len_reg_d2 <= 0;
+        s_axis_msg_offset_reg_d2 <= 0;
+
+        // rx_routing_valid_reg <= 0;
+        // rx_routing_key_reg <= 0;
+        // rx_routing_msg_id_reg <= 0;
+    end
+end
 
-    assign m_axis_tdata = fifo_axis_tdata;
-    assign m_axis_tkeep = fifo_axis_tkeep;
-    assign m_axis_tvalid = fifo_axis_tvalid && sideband_valid;
-    assign m_axis_tlast = fifo_axis_tlast;
-    assign m_axis_tid = fifo_axis_tid;
-    assign m_axis_tdest = fifo_axis_tdest;
-    assign m_axis_tuser = {rx_fifo_hash_type, rx_fifo_hash, fifo_axis_tuser};
-
-end else begin
-
-    // bypass
-    assign m_axis_tdata = s_axis_tdata;
-    assign m_axis_tkeep = s_axis_tkeep;
-    assign m_axis_tvalid = s_axis_tvalid;
-    assign s_axis_tready = m_axis_tready;
-    assign m_axis_tlast = s_axis_tlast;
-    assign m_axis_tid = s_axis_tid;
-    assign m_axis_tdest = s_axis_tdest;
-    assign m_axis_tuser = s_axis_tuser;
 
-end
+priority_encoder #(
+    .WIDTH (STASH_DEPTH),
+    .LSB_HIGH_PRIORITY (0)
+)
+pe_inst (
+    .input_unencoded    (stash_compare_result_reg),
+    .output_valid       (pe_output_valid),
+    .output_encoded     (pe_output_encoded),
+    .output_unencoded   (pe_output)
+);
 
-endgenerate
+// cam_srl #(
+//     .DATA_WIDTH (CAM_DATA_WIDTH),
+//     .ADDR_WIDTH (CAM_RAM_ADDR_WIDTH)
+// )
+// cam_ins (
+//     .clk            (clk),
+//     .rst            (rst),
+// 
+//     .write_addr     (cam_wr_addr_reg),
+//     .write_data     (cam_wr_data_reg),
+//     .write_delete   (1'b0), // TODO: no need to delete entries
+//     .write_enable   (cam_wr_en_reg),
+//     .write_busy     (cam_wr_busy),
+// 
+//     .compare_data   (s_axis_msg_id),
+//     .match_many     (),
+//     .match_single   (),
+//     .match_addr     (cam_match_addr),
+//     .match          (cam_match)
+// );
+// 
+// 
+// // one-clock read latency
+// q_res_ram #(
+//     .DATA_WIDTH (RAM_DATA_WIDTH),
+//     .ADDR_WIDTH (CAM_RAM_ADDR_WIDTH)
+// )
+// q_res_ram_ins (
+//     // write port
+//     .ena            (1'b1),
+//     .wr_en          (ram_wr_en_reg),
+//     .wr_data        (ram_wr_data_reg),
+//     .wr_addr        (ram_wr_addr_reg),
+// 
+//     // read port
+//     .rd_en          (1'b1),
+//     .rd_addr        (cam_match_addr),
+//     .rd_data        (ram_cached_qid),
+//     //
+//     .clk            (clk),
+//     .rst            (rst)
+// );
 
 endmodule
 
diff --color -burN ./corundum-rtl/mqnic_interface_rx.v ./hp-rtl/mqnic_interface_rx.v
--- ./corundum-rtl/mqnic_interface_rx.v	2024-09-12 17:15:07.565794868 -0400
+++ ./hp-rtl/mqnic_interface_rx.v	2024-09-12 17:14:43.149796023 -0400
@@ -82,6 +82,7 @@
     // DMA interface configuration
     parameter DMA_ADDR_WIDTH = 64,
     parameter DMA_LEN_WIDTH = 16,
+    parameter DMA_CLIENT_LEN_WIDTH = DMA_LEN_WIDTH,
     parameter DMA_TAG_WIDTH = 16,
     parameter RAM_ADDR_WIDTH = $clog2(RX_RAM_SIZE),
     parameter RAM_SEG_COUNT = 2,
@@ -102,7 +103,21 @@
     parameter AXIS_KEEP_WIDTH = AXIS_DATA_WIDTH/8,
     parameter AXIS_RX_ID_WIDTH = PORTS > 1 ? $clog2(PORTS) : 1,
     parameter AXIS_RX_DEST_WIDTH = RX_QUEUE_INDEX_WIDTH,
-    parameter AXIS_RX_USER_WIDTH = (PTP_TS_ENABLE ? PTP_TS_WIDTH : 0) + 1
+    parameter AXIS_RX_USER_WIDTH = (PTP_TS_ENABLE ? PTP_TS_WIDTH : 0) + 1,
+    //===================================================
+    parameter MSG_ID_WIDTH = 32,
+    parameter MSG_OFF_WIDTH = 8,
+    parameter RX_CPL_DESC_TABLE_SIZE = 1024,
+    parameter RX_CPL_DESC_REQ_TAG_WIDTH = $clog2(RX_CPL_DESC_TABLE_SIZE),
+    parameter NUM_RSDS = 4,
+    parameter CAM_CMP_DATA_WIDTH = 64,
+    parameter CAM_RAM_ADDR_WIDTH = 9,
+    parameter STASH_DEPTH = 256,
+    parameter AXIS_TX_ID_WIDTH = 16,
+    parameter AXIS_TX_DEST_WIDTH = 16,
+    parameter AXIS_TX_USER_WIDTH = 16,
+    parameter RX_ROUTING_ENABLE = 1,
+    parameter TIMEOUT_WIDTH = 16
 )
 (
     input  wire                                         clk,
@@ -156,19 +171,19 @@
     /*
      * Completion request output
      */
-    output wire [QUEUE_INDEX_WIDTH-1:0]                 m_axis_cpl_req_queue,
-    output wire [CPL_REQ_TAG_WIDTH-1:0]                 m_axis_cpl_req_tag,
-    output wire [CPL_SIZE*8-1:0]                        m_axis_cpl_req_data,
-    output wire                                         m_axis_cpl_req_valid,
-    input  wire                                         m_axis_cpl_req_ready,
+    // output wire [QUEUE_INDEX_WIDTH-1:0]                 m_axis_cpl_req_queue,
+    // output wire [CPL_REQ_TAG_WIDTH-1:0]                 m_axis_cpl_req_tag,
+    // output wire [CPL_SIZE*8-1:0]                        m_axis_cpl_req_data,
+    // output wire                                         m_axis_cpl_req_valid,
+    // input  wire                                         m_axis_cpl_req_ready,
 
     /*
      * Completion request status input
      */
-    input  wire [CPL_REQ_TAG_WIDTH-1:0]                 s_axis_cpl_req_status_tag,
-    input  wire                                         s_axis_cpl_req_status_full,
-    input  wire                                         s_axis_cpl_req_status_error,
-    input  wire                                         s_axis_cpl_req_status_valid,
+    // input  wire [CPL_REQ_TAG_WIDTH-1:0]                 s_axis_cpl_req_status_tag,
+    // input  wire                                         s_axis_cpl_req_status_full,
+    // input  wire                                         s_axis_cpl_req_status_error,
+    // input  wire                                         s_axis_cpl_req_status_valid,
 
     /*
      * DMA write descriptor output (data)
@@ -208,7 +223,88 @@
     input  wire [AXIS_RX_ID_WIDTH-1:0]                  s_axis_rx_tid,
     input  wire [AXIS_RX_DEST_WIDTH-1:0]                s_axis_rx_tdest,
     input  wire [AXIS_RX_USER_WIDTH-1:0]                s_axis_rx_tuser,
+    //==============================================================
+    // req to rxcpl
+    output wire                                         m_axis_rxe_req_valid,
+    output wire [DESC_REQ_TAG_WIDTH-1:0]                m_axis_rxe_req_tag,       // ptr in desc_table
+    output wire                                         m_axis_rxe_req_is_msg,
+    output wire [MSG_ID_WIDTH-1:0]                      m_axis_rxe_req_msg_id,
+    output wire [MSG_OFF_WIDTH-1:0]                     m_axis_rxe_req_msg_len,
+    output wire [MSG_OFF_WIDTH-1:0]                     m_axis_rxe_req_msg_off,
+    input  wire                                         m_axis_rxe_req_ready,
+    // resp from rxcpl
+    input  wire [RX_CPL_DESC_REQ_TAG_WIDTH-1:0]         s_axis_rxcpl_resp_queue,
+    input  wire [DESC_REQ_TAG_WIDTH-1:0]                s_axis_rxcpl_resp_tag,
+    input  wire                                         s_axis_rxcpl_resp_valid,
+    input  wire                                         s_axis_rxcpl_resp_desc_exist,
+    input  wire                                         s_axis_rxcpl_resp_desc_error,
+    input  wire                                         s_axis_rxcpl_resp_is_msg_exist,
+
+    // 
+    output wire [RX_CPL_DESC_REQ_TAG_WIDTH-1:0]         m_axis_rxe_rxcpl_invalidate_entry_index,
+    output wire                                         m_axis_rxe_rxcpl_invalidate_entry_valid,
+
+    // update desc info to rxcpl, if incoming data is message
+    output wire [AXIS_DESC_DATA_WIDTH-1:0]              m_axis_rxe_rxcpl_update_desc_tdata,
+    output wire [DESC_REQ_TAG_WIDTH-1:0]                m_axis_rxe_rxcpl_update_desc_index,
+    output wire [RX_CPL_DESC_REQ_TAG_WIDTH-1:0]         m_axis_rxe_rxcpl_update_desc_tag,
+    output wire [QUEUE_INDEX_WIDTH-1:0]                 m_axis_rxe_rxcpl_update_desc_queue,
+    output wire [QUEUE_PTR_WIDTH-1:0]                   m_axis_rxe_rxcpl_update_desc_queue_ptr,
+    output wire [AXIS_RX_ID_WIDTH-1:0]                  m_axis_rxe_rxcpl_update_desc_id,
+    output wire                                         m_axis_rxe_rxcpl_update_desc_tvalid,
+    input  wire                                         m_axis_rxe_rxcpl_update_desc_tready,
+
+    input  wire [DESC_REQ_TAG_WIDTH-1:0]                s_axis_rxcpl_rxe_update_desc_resp_tag,
+    input  wire                                         s_axis_rxcpl_rxe_update_desc_resp_valid,
+
+    // if message exists, request rxcpl for desc info, rather than desc fetch
+    output wire [DESC_REQ_TAG_WIDTH-1:0]                m_axis_rxe_rxcpl_req_desc_tag,
+    output wire [RX_CPL_DESC_REQ_TAG_WIDTH-1:0]         m_axis_rxe_rxcpl_req_desc_queue,
+    output wire                                         m_axis_rxe_rxcpl_req_desc_valid,
+    input  wire                                         m_axis_rxe_rxcpl_req_desc_ready,
+
+    // desc info for DMA
+    input  wire [DESC_REQ_TAG_WIDTH-1:0]                s_axis_rxcpl_rxe_resp_desc_tag,
+    input  wire [AXIS_DESC_DATA_WIDTH-1:0]              s_axis_rxcpl_rxe_resp_desc_tdata,
+    input  wire                                         s_axis_rxcpl_rxe_resp_desc_fetched,
+    input  wire [QUEUE_INDEX_WIDTH-1:0]                 s_axis_rxcpl_rxe_resp_desc_queue,
+    input  wire [QUEUE_PTR_WIDTH-1:0]                   s_axis_rxcpl_rxe_resp_desc_queue_ptr,
+    input  wire [AXIS_RX_ID_WIDTH-1:0]                  s_axis_rxcpl_rxe_resp_desc_id,
+    input  wire                                         s_axis_rxcpl_rxe_resp_desc_error,
+    input  wire                                         s_axis_rxcpl_rxe_resp_desc_valid,
+
+    // cpl request to rxcpl
+    output wire [CPL_QUEUE_INDEX_WIDTH-1:0]             m_axis_rxe_cpl_req_queue,
+    output wire [CPL_REQ_TAG_WIDTH-1:0]                 m_axis_rxe_cpl_req_tag,     // CPL_REQ_TAG_WIDTH should be RX_CPL_DESC_REQ_TAG_WIDTH
+    output wire [CPL_REQ_TAG_WIDTH-1:0]                 m_axis_rxe_cpl_req_cpl_desc_ptr,     // CPL_REQ_TAG_WIDTH should be RX_CPL_DESC_REQ_TAG_WIDTH
+    output wire [CPL_SIZE*8-1:0]                        m_axis_rxe_cpl_req_data,
+    output wire                                         m_axis_rxe_cpl_req_valid,
+    input  wire                                         m_axis_rxe_cpl_req_ready,
+    output wire                                         m_axis_rxe_cpl_req_is_msg,
+    output wire                                         m_axis_rxe_cpl_req_is_msg_exist,
+    output wire [MSG_OFF_WIDTH-1:0]                     m_axis_rxe_cpl_req_msg_off,
+    output wire [MSG_OFF_WIDTH-1:0]                     m_axis_rxe_cpl_req_msg_len,
+    output wire [DESC_REQ_TAG_WIDTH-1:0]                m_axis_rxe_cpl_req_desc_table_ptr,
+    // cpl complete resp from rxcpl
+    input  wire [DESC_REQ_TAG_WIDTH-1:0]                s_axis_cpl_rxe_status_tag,
+    input  wire                                         s_axis_cpl_rxe_status_valid,
+
+    // ingress to retx 
+    output wire [MSG_ID_WIDTH-1:0]                      m_ingress_to_retx_ack_msg_id,
+    output wire [MSG_OFF_WIDTH-1:0]                     m_ingress_to_retx_ack_msg_off,
+    output wire                                         m_ingress_to_retx_ack_msg_valid,
+    //=================ack 
+    // output wire [AXIS_DATA_WIDTH-1:0]                   m_axis_ack_tdata,
+    // output wire [AXIS_KEEP_WIDTH-1:0]                   m_axis_ack_tkeep,
+    // output wire                                         m_axis_ack_tvalid,
+    // input  wire                                         m_axis_ack_tready,
+    // output wire                                         m_axis_ack_tlast,
+    // output wire [AXIS_TX_ID_WIDTH-1:0]                  m_axis_ack_tid,
+    // output wire [AXIS_TX_DEST_WIDTH-1:0]                m_axis_ack_tdest,
+    // output wire [AXIS_TX_USER_WIDTH-1:0]                m_axis_ack_tuser,
+    //==============================================================
 
+    output wire [31:0]                                  rxcpl_hard_timeout_in_us,
     /*
      * Configuration
      */
@@ -216,16 +312,19 @@
 );
 
 parameter DMA_CLIENT_TAG_WIDTH = $clog2(RX_DESC_TABLE_SIZE);
-parameter DMA_CLIENT_LEN_WIDTH = DMA_LEN_WIDTH;
+// parameter DMA_CLIENT_LEN_WIDTH = DMA_LEN_WIDTH;
 
 parameter REQ_TAG_WIDTH = $clog2(RX_DESC_TABLE_SIZE);
 
 localparam RX_HASH_WIDTH = 32;
 localparam RX_HASH_TYPE_WIDTH = 4;
+localparam RX_ROUTING_WIDTH = 32;
 
 localparam TUSER_HASH_OFFSET = AXIS_RX_USER_WIDTH;
 localparam TUSER_HASH_TYPE_OFFSET = TUSER_HASH_OFFSET + (RX_HASH_ENABLE ? RX_HASH_WIDTH : 0);
-localparam INT_AXIS_RX_USER_WIDTH = TUSER_HASH_TYPE_OFFSET + (RX_HASH_ENABLE ? RX_HASH_TYPE_WIDTH : 0);
+localparam TUSER_ROUTING_OFFSET = TUSER_HASH_TYPE_OFFSET + (RX_HASH_ENABLE ? RX_HASH_TYPE_WIDTH : 0);
+localparam INT_AXIS_RX_USER_WIDTH = MSG_ID_WIDTH + 1 + MSG_OFF_WIDTH + MSG_OFF_WIDTH + 
+                                        TUSER_ROUTING_OFFSET + (RX_ROUTING_ENABLE ? RX_ROUTING_WIDTH : 0);
 
 wire [AXIS_DESC_DATA_WIDTH-1:0]  rx_fifo_desc_tdata;
 wire [AXIS_DESC_KEEP_WIDTH-1:0]  rx_fifo_desc_tkeep;
@@ -235,6 +334,9 @@
 wire [DESC_REQ_TAG_WIDTH-1:0]    rx_fifo_desc_tid;
 wire                             rx_fifo_desc_tuser;
 
+wire ingress_enable;
+wire [31:0] ctrl_cnt;
+
 axis_fifo #(
     .DEPTH(RX_DESC_FIFO_SIZE*DESC_SIZE),
     .DATA_WIDTH(AXIS_DESC_DATA_WIDTH),
@@ -295,9 +397,34 @@
 wire [3:0]                         dma_rx_desc_status_error;
 wire                               dma_rx_desc_status_valid;
 
+wire [AXIS_DATA_WIDTH-1:0]          s_axis_rx_tdata_int;
+wire [AXIS_KEEP_WIDTH-1:0]          s_axis_rx_tkeep_int;
+wire                                s_axis_rx_tvalid_int;
+wire                                s_axis_rx_tready_int;
+wire                                s_axis_rx_tlast_int;
+wire [AXIS_RX_ID_WIDTH-1:0]         s_axis_rx_tid_int;
+wire [AXIS_RX_DEST_WIDTH-1:0]       s_axis_rx_tdest_int;
+wire [INT_AXIS_RX_USER_WIDTH-1:0]   s_axis_rx_tuser_int;
+wire [MSG_ID_WIDTH-1:0]             s_axis_rx_msg_id_int;
+wire                                s_axis_rx_is_msg_int;
+wire [MSG_OFF_WIDTH-1:0]            s_axis_rx_msg_len_int;
+wire [MSG_OFF_WIDTH-1:0]            s_axis_rx_msg_offset_int;
+
+wire [AXIS_DATA_WIDTH-1:0]          rx_axis_tdata_int;
+wire [AXIS_KEEP_WIDTH-1:0]          rx_axis_tkeep_int;
+wire                                rx_axis_tvalid_int;
+wire                                rx_axis_tready_int;
+wire                                rx_axis_tlast_int;
+wire [AXIS_RX_ID_WIDTH-1:0]         rx_axis_tid_int;
+wire [AXIS_RX_DEST_WIDTH-1:0]       rx_axis_tdest_int;
+wire [INT_AXIS_RX_USER_WIDTH-1:0]   rx_axis_tuser_int;
+wire [MSG_ID_WIDTH-1:0]             rx_axis_msg_id_int;
+wire                                rx_axis_is_msg_int;
+wire [MSG_OFF_WIDTH-1:0]            rx_axis_msg_off_int;
+wire [MSG_OFF_WIDTH-1:0]            rx_axis_msg_len_int;
 // Generate RX requests
 reg rx_frame_reg = 1'b0;
-reg [5:0] rx_req_cnt_reg = 0;
+reg [63:0] rx_req_cnt_reg = 0;
 
 wire rx_req_valid = rx_req_cnt_reg != 0;
 wire rx_req_ready;
@@ -307,16 +434,20 @@
         rx_req_cnt_reg <= rx_req_cnt_reg - 1;
     end
 
-    if (s_axis_rx_tvalid) begin
+    // if (s_axis_rx_tvalid_int) begin
+    if (rx_axis_tvalid_int) begin
         if (!rx_frame_reg) begin
             if (rx_req_valid && rx_req_ready) begin
                 rx_req_cnt_reg <= rx_req_cnt_reg;
-            end else begin
+            end else begin // NOTE: start of the request
                 rx_req_cnt_reg <= rx_req_cnt_reg + 1;
             end
             rx_frame_reg <= 1'b1;
         end
-        if (s_axis_rx_tready && s_axis_rx_tvalid && s_axis_rx_tlast) begin
+        // if (s_axis_rx_tready_int && s_axis_rx_tvalid_int && s_axis_rx_tlast_int) begin
+        //     rx_frame_reg <= 1'b0;
+        // end
+        if (rx_axis_tready_int && rx_axis_tvalid_int && rx_axis_tlast_int) begin
             rx_frame_reg <= 1'b0;
         end
     end
@@ -360,10 +491,19 @@
     .PTP_TS_ENABLE(PTP_TS_ENABLE),
     .PTP_TS_WIDTH(PTP_TS_WIDTH),
     .RX_HASH_ENABLE(RX_HASH_ENABLE),
+    .RX_ROUTING_ENABLE(RX_ROUTING_ENABLE),
     .RX_CHECKSUM_ENABLE(RX_CHECKSUM_ENABLE),
     .AXIS_RX_ID_WIDTH(AXIS_RX_ID_WIDTH),
     .AXIS_RX_DEST_WIDTH(AXIS_RX_DEST_WIDTH),
-    .AXIS_RX_USER_WIDTH(INT_AXIS_RX_USER_WIDTH)
+    .AXIS_RX_USER_WIDTH(INT_AXIS_RX_USER_WIDTH),
+    .AXIS_DATA_WIDTH(AXIS_DATA_WIDTH),
+    .AXIS_KEEP_WIDTH(AXIS_KEEP_WIDTH),
+    .AXIS_TX_ID_WIDTH(AXIS_TX_ID_WIDTH),
+    .AXIS_TX_DEST_WIDTH(AXIS_TX_DEST_WIDTH),
+    .AXIS_TX_USER_WIDTH(AXIS_TX_USER_WIDTH),
+    //====
+    .RX_CPL_DESC_TABLE_SIZE(RX_CPL_DESC_TABLE_SIZE),
+    .RX_CPL_DESC_REQ_TAG_WIDTH(RX_CPL_DESC_REQ_TAG_WIDTH)
 )
 rx_engine_inst (
     .clk(clk),
@@ -431,19 +571,19 @@
     /*
      * Completion request output
      */
-    .m_axis_cpl_req_queue(m_axis_cpl_req_queue),
-    .m_axis_cpl_req_tag(m_axis_cpl_req_tag),
-    .m_axis_cpl_req_data(m_axis_cpl_req_data),
-    .m_axis_cpl_req_valid(m_axis_cpl_req_valid),
-    .m_axis_cpl_req_ready(m_axis_cpl_req_ready),
+    // .m_axis_cpl_req_queue       (),
+    // .m_axis_cpl_req_tag         (),
+    // .m_axis_cpl_req_data        (),
+    // .m_axis_cpl_req_valid       (),
+    // .m_axis_cpl_req_ready       (),
 
     /*
      * Completion request status input
      */
-    .s_axis_cpl_req_status_tag(s_axis_cpl_req_status_tag),
-    .s_axis_cpl_req_status_full(s_axis_cpl_req_status_full),
-    .s_axis_cpl_req_status_error(s_axis_cpl_req_status_error),
-    .s_axis_cpl_req_status_valid(s_axis_cpl_req_status_valid),
+    // .s_axis_cpl_req_status_tag      (),
+    // .s_axis_cpl_req_status_full     (),
+    // .s_axis_cpl_req_status_error    (),
+    // .s_axis_cpl_req_status_valid    (),
 
     /*
      * DMA write descriptor output
@@ -488,6 +628,85 @@
     .s_axis_rx_csum(rx_csum),
     .s_axis_rx_csum_valid(rx_csum_valid),
     .s_axis_rx_csum_ready(rx_csum_ready),
+    //==============================================================
+    // req to rxcpl
+    .m_axis_rxe_req_valid       (m_axis_rxe_req_valid),
+    .m_axis_rxe_req_tag         (m_axis_rxe_req_tag),       // ptr in desc_table
+    .m_axis_rxe_req_is_msg      (m_axis_rxe_req_is_msg),
+    .m_axis_rxe_req_msg_id      (m_axis_rxe_req_msg_id),
+    .m_axis_rxe_req_msg_len     (m_axis_rxe_req_msg_len),
+    .m_axis_rxe_req_msg_off     (m_axis_rxe_req_msg_off),
+    .m_axis_rxe_req_ready       (m_axis_rxe_req_ready),
+    // resp from rxcpl
+    .s_axis_rxcpl_resp_queue        (s_axis_rxcpl_resp_queue),
+    .s_axis_rxcpl_resp_tag          (s_axis_rxcpl_resp_tag),
+    .s_axis_rxcpl_resp_valid        (s_axis_rxcpl_resp_valid),
+    .s_axis_rxcpl_resp_desc_exist   (s_axis_rxcpl_resp_desc_exist),
+    .s_axis_rxcpl_resp_desc_error   (s_axis_rxcpl_resp_desc_error),
+    .s_axis_rxcpl_resp_is_msg_exist (s_axis_rxcpl_resp_is_msg_exist),
+
+    // rxe to rxcpl invalidate
+    .m_axis_rxe_rxcpl_invalidate_entry_index      (m_axis_rxe_rxcpl_invalidate_entry_index),
+    .m_axis_rxe_rxcpl_invalidate_entry_valid      (m_axis_rxe_rxcpl_invalidate_entry_valid),
+
+    // update desc info to rxcpl, if incoming data is message
+    .m_axis_rxe_rxcpl_update_desc_tdata     (m_axis_rxe_rxcpl_update_desc_tdata),
+    .m_axis_rxe_rxcpl_update_desc_index     (m_axis_rxe_rxcpl_update_desc_index),
+    .m_axis_rxe_rxcpl_update_desc_tag       (m_axis_rxe_rxcpl_update_desc_tag),
+    .m_axis_rxe_rxcpl_update_desc_queue     (m_axis_rxe_rxcpl_update_desc_queue),
+    .m_axis_rxe_rxcpl_update_desc_queue_ptr (m_axis_rxe_rxcpl_update_desc_queue_ptr),
+    .m_axis_rxe_rxcpl_update_desc_id        (m_axis_rxe_rxcpl_update_desc_id),
+    .m_axis_rxe_rxcpl_update_desc_tvalid    (m_axis_rxe_rxcpl_update_desc_tvalid),
+    .m_axis_rxe_rxcpl_update_desc_tready    (m_axis_rxe_rxcpl_update_desc_tready),
+
+    .s_axis_rxcpl_rxe_update_desc_resp_tag      (s_axis_rxcpl_rxe_update_desc_resp_tag),
+    .s_axis_rxcpl_rxe_update_desc_resp_valid    (s_axis_rxcpl_rxe_update_desc_resp_valid),
+
+    // if message exists, request rxcpl for desc info, rather than desc fetch
+    .m_axis_rxe_rxcpl_req_desc_tag          (m_axis_rxe_rxcpl_req_desc_tag),
+    .m_axis_rxe_rxcpl_req_desc_queue        (m_axis_rxe_rxcpl_req_desc_queue),
+    .m_axis_rxe_rxcpl_req_desc_valid        (m_axis_rxe_rxcpl_req_desc_valid),
+    .m_axis_rxe_rxcpl_req_desc_ready        (m_axis_rxe_rxcpl_req_desc_ready),
+
+    // desc info for DMA
+    .s_axis_rxcpl_rxe_resp_desc_tag         (s_axis_rxcpl_rxe_resp_desc_tag),
+    .s_axis_rxcpl_rxe_resp_desc_tdata       (s_axis_rxcpl_rxe_resp_desc_tdata),
+    .s_axis_rxcpl_rxe_resp_desc_fetched     (s_axis_rxcpl_rxe_resp_desc_fetched),
+    .s_axis_rxcpl_rxe_resp_desc_queue       (s_axis_rxcpl_rxe_resp_desc_queue),
+    .s_axis_rxcpl_rxe_resp_desc_queue_ptr   (s_axis_rxcpl_rxe_resp_desc_queue_ptr),
+    .s_axis_rxcpl_rxe_resp_desc_id          (s_axis_rxcpl_rxe_resp_desc_id),
+    .s_axis_rxcpl_rxe_resp_desc_error       (s_axis_rxcpl_rxe_resp_desc_error),
+    .s_axis_rxcpl_rxe_resp_desc_valid       (s_axis_rxcpl_rxe_resp_desc_valid),
+    // cpl request to rxcpl
+    .m_axis_rxe_cpl_req_queue       (m_axis_rxe_cpl_req_queue),
+    .m_axis_rxe_cpl_req_tag         (m_axis_rxe_cpl_req_tag),     // CPL_REQ_TAG_WIDTH should be RX_CPL_DESC_REQ_TAG_WIDTH
+    .m_axis_rxe_cpl_req_cpl_desc_ptr         (m_axis_rxe_cpl_req_cpl_desc_ptr),     // CPL_REQ_TAG_WIDTH should be RX_CPL_DESC_REQ_TAG_WIDTH
+    .m_axis_rxe_cpl_req_data        (m_axis_rxe_cpl_req_data),
+    .m_axis_rxe_cpl_req_valid       (m_axis_rxe_cpl_req_valid),
+    .m_axis_rxe_cpl_req_ready       (m_axis_rxe_cpl_req_ready),
+    .m_axis_rxe_cpl_req_is_msg      (m_axis_rxe_cpl_req_is_msg),
+    .m_axis_rxe_cpl_req_is_msg_exist (m_axis_rxe_cpl_req_is_msg_exist),
+    .m_axis_rxe_cpl_req_msg_off     (m_axis_rxe_cpl_req_msg_off),
+    .m_axis_rxe_cpl_req_msg_len     (m_axis_rxe_cpl_req_msg_len),
+    .m_axis_rxe_cpl_req_desc_table_ptr (m_axis_rxe_cpl_req_desc_table_ptr),
+    // cpl complete resp from rxcpl
+    .s_axis_cpl_rxe_status_tag      (s_axis_cpl_rxe_status_tag),
+    .s_axis_cpl_rxe_status_valid    (s_axis_cpl_rxe_status_valid),
+    //=================ack 
+    // .m_axis_ack_tdata               (m_axis_ack_tdata               ),
+    // .m_axis_ack_tkeep               (m_axis_ack_tkeep               ),
+    // .m_axis_ack_tvalid              (m_axis_ack_tvalid              ),
+    // .m_axis_ack_tready              (m_axis_ack_tready              ),
+    // .m_axis_ack_tlast               (m_axis_ack_tlast               ),
+    // .m_axis_ack_tid                 (m_axis_ack_tid                 ),
+    // .m_axis_ack_tdest               (m_axis_ack_tdest               ),
+    // .m_axis_ack_tuser               (m_axis_ack_tuser               ),
+    //==============================================================
+
+    // some additional control signals
+    .ingress_enable(ingress_enable),
+    .rxcpl_hard_timeout_in_us(rxcpl_hard_timeout_in_us),
+    .ctrl_cnt(ctrl_cnt),
 
     /*
      * Configuration
@@ -536,21 +755,25 @@
     .rd_resp_ready(dma_ram_rd_resp_ready)
 );
 
-wire [AXIS_DATA_WIDTH-1:0]         rx_axis_tdata_int;
-wire [AXIS_KEEP_WIDTH-1:0]         rx_axis_tkeep_int;
-wire                               rx_axis_tvalid_int;
-wire                               rx_axis_tready_int;
-wire                               rx_axis_tlast_int;
-wire [AXIS_RX_ID_WIDTH-1:0]        rx_axis_tid_int;
-wire [AXIS_RX_DEST_WIDTH-1:0]      rx_axis_tdest_int;
-wire [INT_AXIS_RX_USER_WIDTH-1:0]  rx_axis_tuser_int;
 
-mqnic_ingress #(
-    .REQ_TAG_WIDTH(REQ_TAG_WIDTH),
-    .RX_QUEUE_INDEX_WIDTH(RX_QUEUE_INDEX_WIDTH),
-    .RX_RSS_ENABLE(RX_RSS_ENABLE),
-    .RX_HASH_ENABLE(RX_HASH_ENABLE),
-    .RX_CHECKSUM_ENABLE(RX_CHECKSUM_ENABLE),
+
+//============ reconf signals
+wire [AXIS_DATA_WIDTH-1:0]  filter_to_ingress_ctrl_axis_tdata;
+wire [AXIS_KEEP_WIDTH-1:0]  filter_to_ingress_ctrl_axis_tkeep;
+wire                        filter_to_ingress_ctrl_axis_tvalid;
+wire                        filter_to_ingress_ctrl_axis_tready;
+
+mqnic_ingress_top #(
+    // .REQ_TAG_WIDTH(REQ_TAG_WIDTH),
+    // .RX_QUEUE_INDEX_WIDTH(RX_QUEUE_INDEX_WIDTH),
+    // .RX_RSS_ENABLE(RX_RSS_ENABLE),
+    // .RX_HASH_ENABLE(RX_HASH_ENABLE),
+    .RX_ROUTING_ENABLE(RX_ROUTING_ENABLE),
+    .NUM_RSDS(NUM_RSDS),
+    .CAM_CMP_DATA_WIDTH(CAM_CMP_DATA_WIDTH),
+    .CAM_RAM_ADDR_WIDTH(CAM_RAM_ADDR_WIDTH),
+    .STASH_DEPTH(STASH_DEPTH),
+    // .RX_CHECKSUM_ENABLE(RX_CHECKSUM_ENABLE),
     .AXIS_DATA_WIDTH(AXIS_DATA_WIDTH),
     .AXIS_KEEP_WIDTH(AXIS_KEEP_WIDTH),
     .AXIS_ID_WIDTH(AXIS_RX_ID_WIDTH),
@@ -566,14 +789,18 @@
     /*
      * Receive data input
      */
-    .s_axis_tdata(s_axis_rx_tdata),
-    .s_axis_tkeep(s_axis_rx_tkeep),
-    .s_axis_tvalid(s_axis_rx_tvalid),
-    .s_axis_tready(s_axis_rx_tready),
-    .s_axis_tlast(s_axis_rx_tlast),
-    .s_axis_tid(s_axis_rx_tid),
-    .s_axis_tdest(s_axis_rx_tdest),
-    .s_axis_tuser(s_axis_rx_tuser),
+    .s_axis_tdata       (s_axis_rx_tdata_int),
+    .s_axis_tkeep       (s_axis_rx_tkeep_int),
+    .s_axis_tvalid      (s_axis_rx_tvalid_int),
+    .s_axis_tready      (s_axis_rx_tready_int),
+    .s_axis_tlast       (s_axis_rx_tlast_int),
+    .s_axis_tid         (s_axis_rx_tid_int),
+    .s_axis_tdest       (s_axis_rx_tdest_int),
+    .s_axis_tuser       (s_axis_rx_tuser_int),
+    .s_axis_msg_id      (s_axis_rx_msg_id_int),
+    .s_axis_is_msg      (s_axis_rx_is_msg_int),
+    .s_axis_msg_len     (s_axis_rx_msg_len_int),
+    .s_axis_msg_offset  (s_axis_rx_msg_offset_int),
 
     /*
      * Receive data output
@@ -592,7 +819,16 @@
      */
     .rx_csum(rx_csum),
     .rx_csum_valid(rx_csum_valid),
-    .rx_csum_ready(rx_csum_ready)
+    .rx_csum_ready(rx_csum_ready),
+
+    // ctrl cnt
+    .ctrl_cnt(ctrl_cnt),
+
+    // 
+    .s_ctrl_axis_tdata      (filter_to_ingress_ctrl_axis_tdata),
+    .s_ctrl_axis_tkeep      (filter_to_ingress_ctrl_axis_tkeep),
+    .s_ctrl_axis_tvalid     (filter_to_ingress_ctrl_axis_tvalid),
+    .s_ctrl_axis_tready     (filter_to_ingress_ctrl_axis_tready)
 );
 
 dma_client_axis_sink #(
@@ -667,6 +903,68 @@
     .abort(1'b0)
 );
 
+wire s_axis_filter_tready;
+
+ingress_filter #(
+    .AXIS_DATA_WIDTH(AXIS_DATA_WIDTH),
+    .AXIS_KEEP_WIDTH(AXIS_KEEP_WIDTH),
+    .AXIS_ID_WIDTH(AXIS_RX_ID_WIDTH),
+    .AXIS_DEST_WIDTH(AXIS_RX_DEST_WIDTH),
+    .S_AXIS_USER_WIDTH(AXIS_RX_USER_WIDTH),
+    .M_AXIS_USER_WIDTH(INT_AXIS_RX_USER_WIDTH),
+    .MAX_RX_SIZE(MAX_RX_SIZE),
+    .AXIS_TX_ID_WIDTH(AXIS_TX_ID_WIDTH),
+    .AXIS_TX_DEST_WIDTH(AXIS_TX_DEST_WIDTH),
+    .AXIS_TX_USER_WIDTH(AXIS_TX_USER_WIDTH)
+)
+ingress_filter_ins (
+    .clk(clk),
+    .rst(rst),
+
+    /*
+     * Receive data input
+     */
+    .s_axis_tdata   (s_axis_rx_tdata),
+    .s_axis_tkeep   (s_axis_rx_tkeep),
+    // .s_axis_tvalid  (s_axis_rx_tvalid && s_axis_rx_tready),
+    .s_axis_tvalid  (s_axis_rx_tvalid && s_axis_rx_tready && ingress_enable),
+    .s_axis_tready  (s_axis_filter_tready),
+    .s_axis_tlast   (s_axis_rx_tlast),
+    .s_axis_tid     (s_axis_rx_tid),
+    .s_axis_tdest   (s_axis_rx_tdest),
+    .s_axis_tuser   (s_axis_rx_tuser),
+
+    /*
+     * Receive data output
+     */
+    .m_axis_tdata       (s_axis_rx_tdata_int),
+    .m_axis_tkeep       (s_axis_rx_tkeep_int),
+    .m_axis_tvalid      (s_axis_rx_tvalid_int),
+    .m_axis_tready      (s_axis_rx_tready_int),
+    .m_axis_tlast       (s_axis_rx_tlast_int),
+    .m_axis_tid         (s_axis_rx_tid_int),
+    .m_axis_tdest       (s_axis_rx_tdest_int),
+    .m_axis_tuser       (s_axis_rx_tuser_int),
+    .m_axis_msg_id      (s_axis_rx_msg_id_int),
+    .m_axis_is_msg      (s_axis_rx_is_msg_int),
+    .m_axis_msg_len     (s_axis_rx_msg_len_int),
+    .m_axis_msg_offset  (s_axis_rx_msg_offset_int),
+
+    //======================================
+    .m_ingress_to_retx_ack_msg_id           (m_ingress_to_retx_ack_msg_id),
+    .m_ingress_to_retx_ack_msg_off          (m_ingress_to_retx_ack_msg_off),
+    .m_ingress_to_retx_ack_msg_valid        (m_ingress_to_retx_ack_msg_valid),
+
+    //
+    // seperate AXIS signals for reconfiguration
+    .m_ctrl_axis_tdata                  (filter_to_ingress_ctrl_axis_tdata),
+    .m_ctrl_axis_tkeep                  (filter_to_ingress_ctrl_axis_tkeep),
+    .m_ctrl_axis_tvalid                 (filter_to_ingress_ctrl_axis_tvalid),
+    .m_ctrl_axis_tready                 (filter_to_ingress_ctrl_axis_tready)
+);
+
+assign s_axis_rx_tready = s_axis_filter_tready && ingress_enable;
+
 endmodule
 
 `resetall
diff --color -burN ./corundum-rtl/mqnic_interface.v ./hp-rtl/mqnic_interface.v
--- ./corundum-rtl/mqnic_interface.v	2024-09-12 17:15:07.565794868 -0400
+++ ./hp-rtl/mqnic_interface.v	2024-09-12 17:14:43.101796026 -0400
@@ -92,6 +92,7 @@
     parameter TX_CHECKSUM_ENABLE = 1,
     parameter RX_RSS_ENABLE = 1,
     parameter RX_HASH_ENABLE = 1,
+    parameter RX_ROUTING_ENABLE = 1,
     parameter RX_CHECKSUM_ENABLE = 1,
     parameter TX_FIFO_DEPTH = 32768,
     parameter RX_FIFO_DEPTH = 32768,
@@ -153,7 +154,19 @@
     parameter AXIS_IF_TX_DEST_WIDTH = $clog2(PORTS)+4,
     parameter AXIS_IF_RX_DEST_WIDTH = RX_QUEUE_INDEX_WIDTH,
     parameter AXIS_IF_TX_USER_WIDTH = AXIS_SYNC_TX_USER_WIDTH,
-    parameter AXIS_IF_RX_USER_WIDTH = AXIS_SYNC_RX_USER_WIDTH
+    parameter AXIS_IF_RX_USER_WIDTH = AXIS_SYNC_RX_USER_WIDTH,
+
+    // NOTE
+    parameter RETX_DESC_TABLE_SIZE = 1024,
+    parameter CL_RETX_DESC_TABLE_SIZE = $clog2(RETX_DESC_TABLE_SIZE),
+    parameter RX_CPL_DESC_TABLE_SIZE = 1024,
+    parameter RX_CPL_DESC_REQ_TAG_WIDTH = $clog2(RX_CPL_DESC_TABLE_SIZE),
+    parameter NUM_RSDS = 4,
+    parameter CAM_CMP_DATA_WIDTH = 64,
+    parameter CAM_RAM_ADDR_WIDTH = 9,
+    parameter STASH_DEPTH = 256,
+    parameter MSG_ID_WIDTH = 32,
+    parameter MSG_OFF_WIDTH = 8
 )
 (
     input  wire                                         clk,
@@ -515,7 +528,10 @@
 parameter DESC_REQ_TAG_WIDTH_INT = $clog2(MAX_DESC_TABLE_SIZE);
 parameter DESC_REQ_TAG_WIDTH = DESC_REQ_TAG_WIDTH_INT + $clog2(2);
 
-parameter CPL_REQ_TAG_WIDTH_INT = $clog2(MAX_DESC_TABLE_SIZE);
+// parameter CPL_REQ_TAG_WIDTH_INT = $clog2(MAX_DESC_TABLE_SIZE);
+// parameter CPL_REQ_TAG_WIDTH = CPL_REQ_TAG_WIDTH_INT + $clog2(3);
+// NOTE:
+parameter CPL_REQ_TAG_WIDTH_INT = $clog2(RX_CPL_DESC_TABLE_SIZE);
 parameter CPL_REQ_TAG_WIDTH = CPL_REQ_TAG_WIDTH_INT + $clog2(3);
 
 parameter QUEUE_REQ_TAG_WIDTH = DESC_REQ_TAG_WIDTH;
@@ -874,12 +890,14 @@
 // completions
 wire [1:0]                          cpl_req_sel;
 wire [QUEUE_INDEX_WIDTH-1:0]        cpl_req_queue;
-wire [DESC_REQ_TAG_WIDTH-1:0]       cpl_req_tag;
+// wire [DESC_REQ_TAG_WIDTH-1:0]       cpl_req_tag;
+wire [CPL_REQ_TAG_WIDTH-1:0]       cpl_req_tag;
 wire [CPL_SIZE*8-1:0]               cpl_req_data;
 wire                                cpl_req_valid;
 wire                                cpl_req_ready;
 
-wire [DESC_REQ_TAG_WIDTH-1:0]       cpl_req_status_tag;
+// wire [DESC_REQ_TAG_WIDTH-1:0]       cpl_req_status_tag;
+wire [CPL_REQ_TAG_WIDTH-1:0]       cpl_req_status_tag;
 wire                                cpl_req_status_full;
 wire                                cpl_req_status_error;
 wire                                cpl_req_status_valid;
@@ -1165,35 +1183,35 @@
             RBB+8'h48: ctrl_reg_rd_data_reg <= RB_BASE_ADDR+8'h60;          // Event QM: Next header
             RBB+8'h4C: ctrl_reg_rd_data_reg <= AXIL_EQM_BASE_ADDR;          // Event QM: Offset
             RBB+8'h50: ctrl_reg_rd_data_reg <= 2**EVENT_QUEUE_INDEX_WIDTH;  // Event QM: Count
-            RBB+8'h54: ctrl_reg_rd_data_reg <= 32;                          // Event QM: Stride
+            RBB+8'h54: ctrl_reg_rd_data_reg <= 64;                          // Event QM: Stride
             // Queue manager (TX)
             RBB+8'h60: ctrl_reg_rd_data_reg <= 32'h0000C020;                // TX QM: Type
             RBB+8'h64: ctrl_reg_rd_data_reg <= 32'h00000100;                // TX QM: Version
             RBB+8'h68: ctrl_reg_rd_data_reg <= RB_BASE_ADDR+8'h80;          // TX QM: Next header
             RBB+8'h6C: ctrl_reg_rd_data_reg <= AXIL_TX_QM_BASE_ADDR;        // TX QM: Offset
             RBB+8'h70: ctrl_reg_rd_data_reg <= 2**TX_QUEUE_INDEX_WIDTH;     // TX QM: Count
-            RBB+8'h74: ctrl_reg_rd_data_reg <= 32;                          // TX QM: Stride
+            RBB+8'h74: ctrl_reg_rd_data_reg <= 64;                          // TX QM: Stride
             // Queue manager (TX CPL)
             RBB+8'h80: ctrl_reg_rd_data_reg <= 32'h0000C030;                // TX CPL QM: Type
             RBB+8'h84: ctrl_reg_rd_data_reg <= 32'h00000100;                // TX CPL QM: Version
             RBB+8'h88: ctrl_reg_rd_data_reg <= RB_BASE_ADDR+8'hA0;          // TX CPL QM: Next header
             RBB+8'h8C: ctrl_reg_rd_data_reg <= AXIL_TX_CQM_BASE_ADDR;       // TX CPL QM: Offset
             RBB+8'h90: ctrl_reg_rd_data_reg <= 2**TX_CPL_QUEUE_INDEX_WIDTH; // TX CPL QM: Count
-            RBB+8'h94: ctrl_reg_rd_data_reg <= 32;                          // TX CPL QM: Stride
+            RBB+8'h94: ctrl_reg_rd_data_reg <= 64;                          // TX CPL QM: Stride
             // Queue manager (RX)
             RBB+8'hA0: ctrl_reg_rd_data_reg <= 32'h0000C021;                // RX QM: Type
             RBB+8'hA4: ctrl_reg_rd_data_reg <= 32'h00000100;                // RX QM: Version
             RBB+8'hA8: ctrl_reg_rd_data_reg <= RB_BASE_ADDR+8'hC0;          // RX QM: Next header
             RBB+8'hAC: ctrl_reg_rd_data_reg <= AXIL_RX_QM_BASE_ADDR;        // RX QM: Offset
             RBB+8'hB0: ctrl_reg_rd_data_reg <= 2**RX_QUEUE_INDEX_WIDTH;     // RX QM: Count
-            RBB+8'hB4: ctrl_reg_rd_data_reg <= 32;                          // RX QM: Stride
+            RBB+8'hB4: ctrl_reg_rd_data_reg <= 64;                          // RX QM: Stride
             // Queue manager (RX CPL)
             RBB+8'hC0: ctrl_reg_rd_data_reg <= 32'h0000C031;                // RX CPL QM: Type
             RBB+8'hC4: ctrl_reg_rd_data_reg <= 32'h00000100;                // RX CPL QM: Version
             RBB+8'hC8: ctrl_reg_rd_data_reg <= RX_RB_BASE_ADDR;             // RX CPL QM: Next header
             RBB+8'hCC: ctrl_reg_rd_data_reg <= AXIL_RX_CQM_BASE_ADDR;       // RX CPL QM: Offset
             RBB+8'hD0: ctrl_reg_rd_data_reg <= 2**RX_CPL_QUEUE_INDEX_WIDTH; // RX CPL QM: Count
-            RBB+8'hD4: ctrl_reg_rd_data_reg <= 32;                          // RX CPL QM: Stride
+            RBB+8'hD4: ctrl_reg_rd_data_reg <= 64;                          // RX CPL QM: Stride
             default: ctrl_reg_rd_ack_reg <= 1'b0;
         endcase
     end
@@ -1863,29 +1881,29 @@
     /*
      * DMA read descriptor output
      */
-    .m_axis_dma_read_desc_dma_addr(m_axis_ctrl_dma_read_desc_dma_addr),
-    .m_axis_dma_read_desc_ram_addr(m_axis_ctrl_dma_read_desc_ram_addr),
-    .m_axis_dma_read_desc_len(m_axis_ctrl_dma_read_desc_len),
-    .m_axis_dma_read_desc_tag(m_axis_ctrl_dma_read_desc_tag),
-    .m_axis_dma_read_desc_valid(m_axis_ctrl_dma_read_desc_valid),
-    .m_axis_dma_read_desc_ready(m_axis_ctrl_dma_read_desc_ready),
+    .m_axis_dma_read_desc_dma_addr  (m_axis_ctrl_dma_read_desc_dma_addr),
+    .m_axis_dma_read_desc_ram_addr  (m_axis_ctrl_dma_read_desc_ram_addr),
+    .m_axis_dma_read_desc_len       (m_axis_ctrl_dma_read_desc_len),
+    .m_axis_dma_read_desc_tag       (m_axis_ctrl_dma_read_desc_tag),
+    .m_axis_dma_read_desc_valid     (m_axis_ctrl_dma_read_desc_valid),
+    .m_axis_dma_read_desc_ready     (m_axis_ctrl_dma_read_desc_ready),
 
     /*
      * DMA read descriptor status input
      */
-    .s_axis_dma_read_desc_status_tag(s_axis_ctrl_dma_read_desc_status_tag),
-    .s_axis_dma_read_desc_status_error(s_axis_ctrl_dma_read_desc_status_error),
-    .s_axis_dma_read_desc_status_valid(s_axis_ctrl_dma_read_desc_status_valid),
+    .s_axis_dma_read_desc_status_tag    (s_axis_ctrl_dma_read_desc_status_tag),
+    .s_axis_dma_read_desc_status_error  (s_axis_ctrl_dma_read_desc_status_error),
+    .s_axis_dma_read_desc_status_valid  (s_axis_ctrl_dma_read_desc_status_valid),
 
     /*
      * RAM interface
      */
-    .dma_ram_wr_cmd_be(ctrl_dma_ram_wr_cmd_be),
-    .dma_ram_wr_cmd_addr(ctrl_dma_ram_wr_cmd_addr),
-    .dma_ram_wr_cmd_data(ctrl_dma_ram_wr_cmd_data),
-    .dma_ram_wr_cmd_valid(ctrl_dma_ram_wr_cmd_valid),
-    .dma_ram_wr_cmd_ready(ctrl_dma_ram_wr_cmd_ready),
-    .dma_ram_wr_done(ctrl_dma_ram_wr_done),
+    .dma_ram_wr_cmd_be      (ctrl_dma_ram_wr_cmd_be),
+    .dma_ram_wr_cmd_addr    (ctrl_dma_ram_wr_cmd_addr),
+    .dma_ram_wr_cmd_data    (ctrl_dma_ram_wr_cmd_data),
+    .dma_ram_wr_cmd_valid   (ctrl_dma_ram_wr_cmd_valid),
+    .dma_ram_wr_cmd_ready   (ctrl_dma_ram_wr_cmd_ready),
+    .dma_ram_wr_done        (ctrl_dma_ram_wr_done),
 
     /*
      * Configuration
@@ -2365,6 +2383,120 @@
 end
 
 endgenerate
+//=====================
+// TODO:
+wire                                if_tx_req_desc_tvalid;
+wire [DESC_REQ_TAG_WIDTH-1:0]       if_tx_req_desc_tag; // tag, txe entry index
+wire [CPL_QUEUE_INDEX_WIDTH-1:0]    if_tx_req_desc_cpl_queue;
+wire [QUEUE_INDEX_WIDTH-1:0]        if_tx_req_desc_queue;
+wire [QUEUE_PTR_WIDTH-1:0]          if_tx_req_desc_queue_ptr;
+wire [AXIS_IF_TX_DEST_WIDTH-1:0]    if_tx_req_desc_dest;
+wire [DMA_CLIENT_LEN_WIDTH-1:0]     if_tx_req_desc_len;
+wire                                if_tx_req_desc_ready;
+
+wire                                if_tx_resp_desc_valid;
+wire [DESC_REQ_TAG_WIDTH-1:0]       if_tx_resp_desc_queue;
+wire [CL_RETX_DESC_TABLE_SIZE-1:0]  if_tx_resp_desc_tag;
+wire                                if_tx_resp_desc_ready;
+
+wire [DESC_REQ_TAG_WIDTH-1:0]       if_tx_op_cpl_queue;
+wire                                if_tx_op_cpl_valid;
+
+wire [MSG_ID_WIDTH-1:0]                  if_egress_to_retx_msg_id_int;
+wire [MSG_OFF_WIDTH-1:0]                 if_egress_to_retx_msg_offset_int;
+wire [CL_RETX_DESC_TABLE_SIZE-1:0]       if_egress_to_retx_table_ptr_int;
+wire                                     if_egress_to_retx_msg_valid_int;
+wire                                     if_egress_to_retx_is_msg_int;
+wire                                     if_egress_to_retx_msg_ready;
+
+//
+wire                                rx_rxcpl_desc_req_valid;
+wire [DESC_REQ_TAG_WIDTH-1:0]       rx_rxcpl_desc_req_tag;
+wire                                rx_rxcpl_desc_req_is_msg;
+wire [MSG_ID_WIDTH-1:0]             rx_rxcpl_desc_req_msg_id;
+wire [MSG_OFF_WIDTH-1:0]            rx_rxcpl_desc_req_msg_off;
+wire [MSG_OFF_WIDTH-1:0]            rx_rxcpl_desc_req_msg_len;
+wire                                rx_rxcpl_desc_req_ready;
+
+wire                                    rxcpl_rx_desc_resp_valid;
+wire [DESC_REQ_TAG_WIDTH-1:0]           rxcpl_rx_desc_resp_tag;
+wire [RX_CPL_DESC_REQ_TAG_WIDTH-1:0]    rxcpl_rx_desc_resp_queue;
+wire                                    rxcpl_rx_desc_resp_desc_exist;
+wire                                    rxcpl_rx_desc_resp_desc_error;
+wire                                    rxcpl_rx_desc_resp_is_msg_exist;
+
+wire [RX_CPL_DESC_REQ_TAG_WIDTH-1:0]    rxe_rxcpl_invalidate_index;
+wire                                    rxe_rxcpl_invalidate_valid;
+
+wire [QUEUE_INDEX_WIDTH-1:0]        rx_rxcpl_req_queue;
+wire [CPL_REQ_TAG_WIDTH_INT-1:0]    rx_rxcpl_req_tag;
+wire [CPL_REQ_TAG_WIDTH_INT-1:0]    rx_rxcpl_req_cpl_desc_ptr;
+wire [CPL_SIZE*8-1:0]               rx_rxcpl_req_data;
+wire                                rx_rxcpl_req_valid;
+wire                                rx_rxcpl_req_ready;
+wire                                rx_rxcpl_req_is_msg;
+wire                                rx_rxcpl_req_is_msg_exist;
+wire [MSG_OFF_WIDTH-1:0]            rx_rxcpl_req_msg_off;
+wire [MSG_OFF_WIDTH-1:0]            rx_rxcpl_req_msg_len;
+wire [DESC_REQ_TAG_WIDTH-1:0]       rx_rxcpl_req_desc_table_ptr;
+
+
+wire [DESC_REQ_TAG_WIDTH-1:0]       rxcpl_rxe_cpl_status_tag;
+wire                                rxcpl_rxe_cpl_status_valid;
+
+
+// input desc info
+wire [AXIS_DESC_DATA_WIDTH-1:0]             rxe_rxcpl_update_desc_tdata;
+wire [DESC_REQ_TAG_WIDTH-1:0]               rxe_rxcpl_update_desc_index;
+wire [RX_CPL_DESC_REQ_TAG_WIDTH-1:0]        rxe_rxcpl_update_desc_tag;
+wire [QUEUE_INDEX_WIDTH-1:0]                rxe_rxcpl_update_desc_queue;
+wire [QUEUE_PTR_WIDTH-1:0]                  rxe_rxcpl_update_desc_queue_ptr;
+wire [AXIS_IF_RX_ID_WIDTH-1:0]              rxe_rxcpl_update_desc_id;
+wire                                        rxe_rxcpl_update_desc_tvalid;
+wire                                        rxe_rxcpl_update_desc_tready;
+
+
+wire [DESC_REQ_TAG_WIDTH-1:0]               rxcpl_rxe_update_desc_resp_tag;
+wire                                        rxcpl_rxe_update_desc_resp_valid;
+
+
+// input req for desc info
+wire [DESC_REQ_TAG_WIDTH-1:0]               rxe_rxcpl_req_desc_tag;
+wire [RX_CPL_DESC_REQ_TAG_WIDTH-1:0]        rxe_rxcpl_req_desc_queue;
+wire                                        rxe_rxcpl_req_desc_valid;
+wire                                        rxe_rxcpl_req_desc_ready;
+
+// resp desc info for DMA
+wire [DESC_REQ_TAG_WIDTH-1:0]               rxcpl_rxe_resp_desc_tag;
+wire [AXIS_DESC_DATA_WIDTH-1:0]             rxcpl_rxe_resp_desc_tdata;
+wire                                        rxcpl_rxe_resp_desc_fetched;
+wire [QUEUE_INDEX_WIDTH-1:0]                rxcpl_rxe_resp_desc_queue;
+wire [QUEUE_PTR_WIDTH-1:0]                  rxcpl_rxe_resp_desc_queue_ptr;
+wire [AXIS_IF_RX_ID_WIDTH-1:0]              rxcpl_rxe_resp_desc_id;
+wire                                        rxcpl_rxe_resp_desc_error;
+wire                                        rxcpl_rxe_resp_desc_valid;
+
+
+// retx desc info
+wire [AXIS_DESC_DATA_WIDTH-1:0]          retx_to_txe_desc_tdata;
+wire [CL_RETX_DESC_TABLE_SIZE-1:0]       retx_to_txe_desc_tag;
+wire                                     retx_to_txe_desc_tvalid;
+wire                                     retx_to_txe_desc_tready;
+
+// ingress to retx ack
+wire [MSG_ID_WIDTH-1:0]                 ingress_to_retx_ack_msg_id;
+wire [MSG_OFF_WIDTH-1:0]                ingress_to_retx_ack_msg_off;
+wire                                    ingress_to_retx_ack_msg_valid;
+
+// wire [AXIS_IF_DATA_WIDTH-1:0]           ingress_to_egress_ack_tdata;
+// wire [AXIS_IF_KEEP_WIDTH-1:0]           ingress_to_egress_ack_tkeep;
+// wire                                    ingress_to_egress_ack_tvalid;
+// wire                                    ingress_to_egress_ack_tready;
+// wire                                    ingress_to_egress_ack_tlast;
+// wire [AXIS_IF_TX_ID_WIDTH-1:0]          ingress_to_egress_ack_tid;
+// wire [AXIS_IF_TX_DEST_WIDTH-1:0]        ingress_to_egress_ack_tdest;
+// wire [AXIS_IF_TX_USER_WIDTH-1:0]        ingress_to_egress_ack_tuser;
+//=====================
 
 wire [AXIS_IF_DATA_WIDTH-1:0] if_tx_axis_tdata;
 wire [AXIS_IF_KEEP_WIDTH-1:0] if_tx_axis_tkeep;
@@ -2489,19 +2621,19 @@
     /*
      * Completion request output
      */
-    .m_axis_cpl_req_queue(tx_cpl_req_queue),
-    .m_axis_cpl_req_tag(tx_cpl_req_tag),
-    .m_axis_cpl_req_data(tx_cpl_req_data),
-    .m_axis_cpl_req_valid(tx_cpl_req_valid),
-    .m_axis_cpl_req_ready(tx_cpl_req_ready),
+    .m_axis_cpl_req_queue           (tx_cpl_req_queue),
+    .m_axis_cpl_req_tag             (tx_cpl_req_tag),
+    .m_axis_cpl_req_data            (tx_cpl_req_data),
+    .m_axis_cpl_req_valid           (tx_cpl_req_valid),
+    .m_axis_cpl_req_ready           (tx_cpl_req_ready),
 
     /*
      * Completion request status input
      */
-    .s_axis_cpl_req_status_tag(tx_cpl_req_status_tag),
-    .s_axis_cpl_req_status_full(tx_cpl_req_status_full),
-    .s_axis_cpl_req_status_error(tx_cpl_req_status_error),
-    .s_axis_cpl_req_status_valid(tx_cpl_req_status_valid),
+    .s_axis_cpl_req_status_tag      (tx_cpl_req_status_tag),
+    .s_axis_cpl_req_status_full     (tx_cpl_req_status_full),
+    .s_axis_cpl_req_status_error    (tx_cpl_req_status_error),
+    .s_axis_cpl_req_status_valid    (tx_cpl_req_status_valid),
 
     /*
      * DMA read descriptor output (data)
@@ -2545,10 +2677,10 @@
     /*
      * Transmit completion input
      */
-    .s_axis_tx_cpl_ts(if_tx_cpl_ts),
-    .s_axis_tx_cpl_tag(if_tx_cpl_tag),
-    .s_axis_tx_cpl_valid(if_tx_cpl_valid),
-    .s_axis_tx_cpl_ready(if_tx_cpl_ready),
+    .s_axis_tx_cpl_ts           (if_tx_cpl_ts),
+    .s_axis_tx_cpl_tag          (if_tx_cpl_tag),
+    .s_axis_tx_cpl_valid        (if_tx_cpl_valid),
+    .s_axis_tx_cpl_ready        (if_tx_cpl_ready),
 
     /*
      * Configuration
@@ -2569,6 +2701,8 @@
 wire [AXIS_IF_RX_DEST_WIDTH-1:0] if_rx_axis_tdest;
 wire [AXIS_IF_RX_USER_WIDTH-1:0] if_rx_axis_tuser;
 
+wire [31:0] rxcpl_hard_timeout_in_us;
+
 mqnic_interface_rx #(
     // Structural configuration
     .PORTS(PORTS),
@@ -2603,6 +2737,7 @@
     .PTP_TS_ENABLE(PTP_TS_ENABLE),
     .RX_RSS_ENABLE(RX_RSS_ENABLE),
     .RX_HASH_ENABLE(RX_HASH_ENABLE),
+    .RX_ROUTING_ENABLE(RX_ROUTING_ENABLE),
     .RX_CHECKSUM_ENABLE(RX_CHECKSUM_ENABLE),
     .MAX_RX_SIZE(MAX_RX_SIZE),
     .RX_RAM_SIZE(RX_RAM_SIZE),
@@ -2630,7 +2765,17 @@
     .AXIS_KEEP_WIDTH(AXIS_IF_KEEP_WIDTH),
     .AXIS_RX_ID_WIDTH(AXIS_IF_RX_ID_WIDTH),
     .AXIS_RX_DEST_WIDTH(AXIS_IF_RX_DEST_WIDTH),
-    .AXIS_RX_USER_WIDTH(AXIS_IF_RX_USER_WIDTH)
+    .AXIS_RX_USER_WIDTH(AXIS_IF_RX_USER_WIDTH),
+    //===========
+    .AXIS_TX_ID_WIDTH(AXIS_IF_TX_ID_WIDTH),
+    .AXIS_TX_DEST_WIDTH(AXIS_IF_TX_DEST_WIDTH),
+    .AXIS_TX_USER_WIDTH(AXIS_IF_TX_USER_WIDTH),
+    .RX_CPL_DESC_TABLE_SIZE(RX_CPL_DESC_TABLE_SIZE),
+    .RX_CPL_DESC_REQ_TAG_WIDTH(RX_CPL_DESC_REQ_TAG_WIDTH),
+    .NUM_RSDS(NUM_RSDS),
+    .CAM_CMP_DATA_WIDTH(CAM_CMP_DATA_WIDTH),
+    .CAM_RAM_ADDR_WIDTH(CAM_RAM_ADDR_WIDTH),
+    .STASH_DEPTH(STASH_DEPTH)
 )
 interface_rx_inst (
     .clk(clk),
@@ -2684,19 +2829,19 @@
     /*
      * Completion request output
      */
-    .m_axis_cpl_req_queue(rx_cpl_req_queue),
-    .m_axis_cpl_req_tag(rx_cpl_req_tag),
-    .m_axis_cpl_req_data(rx_cpl_req_data),
-    .m_axis_cpl_req_valid(rx_cpl_req_valid),
-    .m_axis_cpl_req_ready(rx_cpl_req_ready),
+    // .m_axis_cpl_req_queue           (),
+    // .m_axis_cpl_req_tag             (),
+    // .m_axis_cpl_req_data            (),
+    // .m_axis_cpl_req_valid           (),
+    // .m_axis_cpl_req_ready           (),
 
     /*
      * Completion request status input
      */
-    .s_axis_cpl_req_status_tag(rx_cpl_req_status_tag),
-    .s_axis_cpl_req_status_full(rx_cpl_req_status_full),
-    .s_axis_cpl_req_status_error(rx_cpl_req_status_error),
-    .s_axis_cpl_req_status_valid(rx_cpl_req_status_valid),
+    // .s_axis_cpl_req_status_tag      (),
+    // .s_axis_cpl_req_status_full     (),
+    // .s_axis_cpl_req_status_error    (),
+    // .s_axis_cpl_req_status_valid    (),
 
     /*
      * DMA write descriptor output (data)
@@ -2737,9 +2882,92 @@
     .s_axis_rx_tdest(if_rx_axis_tdest),
     .s_axis_rx_tuser(if_rx_axis_tuser),
 
+    //============================================
+    // req to rxcpl
+    .m_axis_rxe_req_valid       (rx_rxcpl_desc_req_valid),
+    .m_axis_rxe_req_tag         (rx_rxcpl_desc_req_tag),       // ptr in desc_table
+    .m_axis_rxe_req_is_msg      (rx_rxcpl_desc_req_is_msg),
+    .m_axis_rxe_req_msg_id      (rx_rxcpl_desc_req_msg_id),
+    .m_axis_rxe_req_msg_len     (rx_rxcpl_desc_req_msg_len),
+    .m_axis_rxe_req_msg_off     (rx_rxcpl_desc_req_msg_off),
+    .m_axis_rxe_req_ready       (rx_rxcpl_desc_req_ready),
+    // resp from rxcpl
+    .s_axis_rxcpl_resp_queue        (rxcpl_rx_desc_resp_queue),
+    .s_axis_rxcpl_resp_tag          (rxcpl_rx_desc_resp_tag),
+    .s_axis_rxcpl_resp_valid        (rxcpl_rx_desc_resp_valid),
+    .s_axis_rxcpl_resp_desc_exist   (rxcpl_rx_desc_resp_desc_exist),
+    .s_axis_rxcpl_resp_desc_error   (rxcpl_rx_desc_resp_desc_error),
+    .s_axis_rxcpl_resp_is_msg_exist (rxcpl_rx_desc_resp_is_msg_exist),
+
+    // rxe to rxcpl invalidate entry
+    .m_axis_rxe_rxcpl_invalidate_entry_index  (rxe_rxcpl_invalidate_index),
+    .m_axis_rxe_rxcpl_invalidate_entry_valid  (rxe_rxcpl_invalidate_valid),
+
+    // update desc info to rxcpl, if incoming data is message
+    .m_axis_rxe_rxcpl_update_desc_tdata     (rxe_rxcpl_update_desc_tdata),
+    .m_axis_rxe_rxcpl_update_desc_index     (rxe_rxcpl_update_desc_index),
+    .m_axis_rxe_rxcpl_update_desc_tag       (rxe_rxcpl_update_desc_tag),
+    .m_axis_rxe_rxcpl_update_desc_queue     (rxe_rxcpl_update_desc_queue),
+    .m_axis_rxe_rxcpl_update_desc_queue_ptr (rxe_rxcpl_update_desc_queue_ptr),
+    .m_axis_rxe_rxcpl_update_desc_id        (rxe_rxcpl_update_desc_id),
+    .m_axis_rxe_rxcpl_update_desc_tvalid    (rxe_rxcpl_update_desc_tvalid),
+    .m_axis_rxe_rxcpl_update_desc_tready    (rxe_rxcpl_update_desc_tready),
+
+    .s_axis_rxcpl_rxe_update_desc_resp_tag      (rxcpl_rxe_update_desc_resp_tag),
+    .s_axis_rxcpl_rxe_update_desc_resp_valid    (rxcpl_rxe_update_desc_resp_valid),
+
+    // if message exists, request rxcpl for desc info, rather than desc fetch
+    .m_axis_rxe_rxcpl_req_desc_tag          (rxe_rxcpl_req_desc_tag),
+    .m_axis_rxe_rxcpl_req_desc_queue        (rxe_rxcpl_req_desc_queue),
+    .m_axis_rxe_rxcpl_req_desc_valid        (rxe_rxcpl_req_desc_valid),
+    .m_axis_rxe_rxcpl_req_desc_ready        (rxe_rxcpl_req_desc_ready),
+
+    // desc info for DMA
+    .s_axis_rxcpl_rxe_resp_desc_tag         (rxcpl_rxe_resp_desc_tag),
+    .s_axis_rxcpl_rxe_resp_desc_tdata       (rxcpl_rxe_resp_desc_tdata),
+    .s_axis_rxcpl_rxe_resp_desc_fetched     (rxcpl_rxe_resp_desc_fetched),
+    .s_axis_rxcpl_rxe_resp_desc_queue       (rxcpl_rxe_resp_desc_queue),
+    .s_axis_rxcpl_rxe_resp_desc_queue_ptr   (rxcpl_rxe_resp_desc_queue_ptr),
+    .s_axis_rxcpl_rxe_resp_desc_id          (rxcpl_rxe_resp_desc_id),
+    .s_axis_rxcpl_rxe_resp_desc_error       (rxcpl_rxe_resp_desc_error),
+    .s_axis_rxcpl_rxe_resp_desc_valid       (rxcpl_rxe_resp_desc_valid),
+
+    // cpl request to rxcpl
+    .m_axis_rxe_cpl_req_queue       (rx_rxcpl_req_queue),
+    .m_axis_rxe_cpl_req_tag         (rx_rxcpl_req_tag),     // CPL_REQ_TAG_WIDTH should be RX_CPL_DESC_REQ_TAG_WIDTH
+    .m_axis_rxe_cpl_req_cpl_desc_ptr         (rx_rxcpl_req_cpl_desc_ptr),     // CPL_REQ_TAG_WIDTH should be RX_CPL_DESC_REQ_TAG_WIDTH
+    .m_axis_rxe_cpl_req_data        (rx_rxcpl_req_data),
+    .m_axis_rxe_cpl_req_valid       (rx_rxcpl_req_valid),
+    .m_axis_rxe_cpl_req_ready       (rx_rxcpl_req_ready),
+    .m_axis_rxe_cpl_req_is_msg      (rx_rxcpl_req_is_msg),
+    .m_axis_rxe_cpl_req_is_msg_exist (rx_rxcpl_req_is_msg_exist),
+    .m_axis_rxe_cpl_req_msg_off     (rx_rxcpl_req_msg_off),
+    .m_axis_rxe_cpl_req_msg_len     (rx_rxcpl_req_msg_len),
+    .m_axis_rxe_cpl_req_desc_table_ptr (rx_rxcpl_req_desc_table_ptr),
+    // cpl complete resp from rxcpl
+    .s_axis_cpl_rxe_status_tag      (rxcpl_rxe_cpl_status_tag),
+    .s_axis_cpl_rxe_status_valid    (rxcpl_rxe_cpl_status_valid),
+
+    // ingress to retx
+    .m_ingress_to_retx_ack_msg_id           (ingress_to_retx_ack_msg_id),
+    .m_ingress_to_retx_ack_msg_off          (ingress_to_retx_ack_msg_off),
+    .m_ingress_to_retx_ack_msg_valid        (ingress_to_retx_ack_msg_valid),
+
+    // ack
+    // .m_axis_ack_tdata           (ingress_to_egress_ack_tdata ),
+    // .m_axis_ack_tkeep           (ingress_to_egress_ack_tkeep ),
+    // .m_axis_ack_tvalid          (ingress_to_egress_ack_tvalid),
+    // .m_axis_ack_tready          (ingress_to_egress_ack_tready),
+    // .m_axis_ack_tlast           (ingress_to_egress_ack_tlast ),
+    // .m_axis_ack_tid             (ingress_to_egress_ack_tid   ),
+    // .m_axis_ack_tdest           (ingress_to_egress_ack_tdest ),
+    // .m_axis_ack_tuser           (ingress_to_egress_ack_tuser ),
+
+    //==============================================================
     /*
      * Configuration
      */
+    .rxcpl_hard_timeout_in_us (rxcpl_hard_timeout_in_us),
     .mtu(rx_mtu_reg)
 );
 
@@ -2747,6 +2975,108 @@
 assign m_axis_data_dma_write_desc_imm = 0;
 assign m_axis_data_dma_write_desc_imm_en = 0;
 
+rx_cpl #(
+    // parameters from RXE
+    .RXE_DESC_REQ_TAG_WIDTH(DESC_REQ_TAG_WIDTH),
+    .QUEUE_INDEX_WIDTH(QUEUE_INDEX_WIDTH),
+    .QUEUE_PTR_WIDTH(QUEUE_PTR_WIDTH),
+    .CPL_QUEUE_INDEX_WIDTH(CPL_QUEUE_INDEX_WIDTH),
+    .CPL_REQ_TAG_WIDTH(CPL_REQ_TAG_WIDTH),
+    .CPL_SIZE(CPL_SIZE),
+    .AXIS_DESC_DATA_WIDTH(AXIS_DESC_DATA_WIDTH),
+    .AXIS_RX_ID_WIDTH(AXIS_IF_RX_ID_WIDTH),
+    //
+    .RX_CPL_DESC_TABLE_SIZE(RX_CPL_DESC_TABLE_SIZE)
+) 
+rx_cpl_ins (
+    // req from RXE
+    .s_axis_rxe_req_valid               (rx_rxcpl_desc_req_valid),
+    .s_axis_rxe_req_tag                 (rx_rxcpl_desc_req_tag),       // ptr in desc_table
+    .s_axis_rxe_req_is_msg              (rx_rxcpl_desc_req_is_msg),
+    .s_axis_rxe_req_msg_id              (rx_rxcpl_desc_req_msg_id),
+    .s_axis_rxe_req_msg_len             (rx_rxcpl_desc_req_msg_len),
+    .s_axis_rxe_req_msg_off             (rx_rxcpl_desc_req_msg_off),
+    .s_axis_rxe_req_ready               (rx_rxcpl_desc_req_ready),
+    // resp to RXE
+    .m_axis_rxcpl_resp_queue            (rxcpl_rx_desc_resp_queue),
+    .m_axis_rxcpl_resp_tag              (rxcpl_rx_desc_resp_tag),
+    .m_axis_rxcpl_resp_valid            (rxcpl_rx_desc_resp_valid),
+    .m_axis_rxcpl_resp_desc_error       (rxcpl_rx_desc_resp_desc_error),
+    .m_axis_rxcpl_resp_desc_exist       (rxcpl_rx_desc_resp_desc_exist),
+    .m_axis_rxcpl_resp_is_msg_exist     (rxcpl_rx_desc_resp_is_msg_exist),
+
+
+    .s_axis_rxe_rxcpl_invalidate_index  (rxe_rxcpl_invalidate_index),
+    .s_axis_rxe_rxcpl_invalidate_valid  (rxe_rxcpl_invalidate_valid),
+
+    // input desc info
+    .s_axis_rxe_rxcpl_update_desc_tdata         (rxe_rxcpl_update_desc_tdata),
+    .s_axis_rxe_rxcpl_update_desc_index         (rxe_rxcpl_update_desc_index),
+    .s_axis_rxe_rxcpl_update_desc_tag           (rxe_rxcpl_update_desc_tag),
+    .s_axis_rxe_rxcpl_update_desc_queue         (rxe_rxcpl_update_desc_queue),
+    .s_axis_rxe_rxcpl_update_desc_queue_ptr     (rxe_rxcpl_update_desc_queue_ptr),
+    .s_axis_rxe_rxcpl_update_desc_id            (rxe_rxcpl_update_desc_id),
+    .s_axis_rxe_rxcpl_update_desc_tvalid        (rxe_rxcpl_update_desc_tvalid),
+    .s_axis_rxe_rxcpl_update_desc_tready        (rxe_rxcpl_update_desc_tready),
+
+    .m_axis_rxcpl_rxe_update_desc_resp_tag      (rxcpl_rxe_update_desc_resp_tag),
+    .m_axis_rxcpl_rxe_update_desc_resp_valid    (rxcpl_rxe_update_desc_resp_valid),
+
+    // input req for desc info
+    .s_axis_rxe_rxcpl_req_desc_tag              (rxe_rxcpl_req_desc_tag),
+    .s_axis_rxe_rxcpl_req_desc_queue            (rxe_rxcpl_req_desc_queue),
+    .s_axis_rxe_rxcpl_req_desc_valid            (rxe_rxcpl_req_desc_valid),
+    .s_axis_rxe_rxcpl_req_desc_ready            (rxe_rxcpl_req_desc_ready),
+
+    // resp desc info for DMA
+    .m_axis_rxcpl_rxe_resp_desc_tag             (rxcpl_rxe_resp_desc_tag),
+    .m_axis_rxcpl_rxe_resp_desc_tdata           (rxcpl_rxe_resp_desc_tdata),
+    .m_axis_rxcpl_rxe_resp_desc_fetched         (rxcpl_rxe_resp_desc_fetched),
+    .m_axis_rxcpl_rxe_resp_desc_queue           (rxcpl_rxe_resp_desc_queue),
+    .m_axis_rxcpl_rxe_resp_desc_queue_ptr       (rxcpl_rxe_resp_desc_queue_ptr),
+    .m_axis_rxcpl_rxe_resp_desc_id              (rxcpl_rxe_resp_desc_id),
+    .m_axis_rxcpl_rxe_resp_desc_error           (rxcpl_rxe_resp_desc_error),
+    .m_axis_rxcpl_rxe_resp_desc_valid           (rxcpl_rxe_resp_desc_valid),
+
+    // cpl request from rxe
+    .s_axis_rxe_cpl_req_queue           (rx_rxcpl_req_queue),
+    .s_axis_rxe_cpl_req_tag             (rx_rxcpl_req_tag),
+    .s_axis_rxe_cpl_req_cpl_desc_ptr    (rx_rxcpl_req_cpl_desc_ptr),     // CPL_REQ_TAG_WIDTH should be RX_CPL_DESC_REQ_TAG_WIDTH
+    .s_axis_rxe_cpl_req_data            (rx_rxcpl_req_data),
+    .s_axis_rxe_cpl_req_valid           (rx_rxcpl_req_valid),
+    .s_axis_rxe_cpl_req_ready           (rx_rxcpl_req_ready),
+    .s_axis_rxe_cpl_req_is_msg          (rx_rxcpl_req_is_msg),
+    .s_axis_rxe_cpl_req_is_msg_exist    (rx_rxcpl_req_is_msg_exist),
+    .s_axis_rxe_cpl_req_msg_off         (rx_rxcpl_req_msg_off),
+    .s_axis_rxe_cpl_req_msg_len         (rx_rxcpl_req_msg_len),
+    .s_axis_rxe_cpl_req_desc_table_ptr  (rx_rxcpl_req_desc_table_ptr),
+
+
+    // cpl request out
+    .m_axis_cpl_req_queue               (rx_cpl_req_queue),
+    .m_axis_cpl_req_tag                 (rx_cpl_req_tag),
+    .m_axis_cpl_req_data                (rx_cpl_req_data),
+    .m_axis_cpl_req_valid               (rx_cpl_req_valid),
+    .m_axis_cpl_req_ready               (rx_cpl_req_ready),
+
+    // cpl resp
+    .s_axis_cpl_req_status_tag          (rx_cpl_req_status_tag),
+    .s_axis_cpl_req_status_full         (rx_cpl_req_status_full),
+    .s_axis_cpl_req_status_error        (rx_cpl_req_status_error),
+    .s_axis_cpl_req_status_valid        (rx_cpl_req_status_valid),
+
+    // cpl complete resp to rxe
+    .m_axis_cpl_rxe_status_tag          (rxcpl_rxe_cpl_status_tag),
+    .m_axis_cpl_rxe_status_valid        (rxcpl_rxe_cpl_status_valid),
+
+    .rxcpl_hard_timeout_in_us (rxcpl_hard_timeout_in_us),
+
+    //
+    .clk                                (clk),
+    .rst                                (rst),
+    .enable                             (1)
+);
+
 generate
 
 wire [PORTS*PTP_TS_WIDTH-1:0] axis_if_tx_cpl_ts;
diff --color -burN ./corundum-rtl/mqnic_rx_queue_map.v ./hp-rtl/mqnic_rx_queue_map.v
--- ./corundum-rtl/mqnic_rx_queue_map.v	2024-09-12 17:15:07.565794868 -0400
+++ ./hp-rtl/mqnic_rx_queue_map.v	2024-09-12 17:14:43.149796023 -0400
@@ -63,7 +63,11 @@
     // Register block base address
     parameter RB_BASE_ADDR = 0,
     // Register block next block address
-    parameter RB_NEXT_PTR = 0
+    parameter RB_NEXT_PTR = 0,
+    //
+    parameter RX_ROUTING_WIDTH = 32,
+    parameter TIMEOUT_WIDTH = 16,
+    parameter DEFAULT_HARD_TIMEOUT_US = 50
 )
 (
     input  wire                          clk,
@@ -84,12 +88,19 @@
     output wire                          reg_rd_wait,
     output wire                          reg_rd_ack,
 
+    // some registers
+    output wire                          ingress_enable,
+    output wire [31:0]      rxcpl_hard_timeout_in_us,
+    input  wire [31:0]                   ctrl_cnt,
+
     /*
      * Request input
      */
     input  wire [ID_WIDTH-1:0]           req_id,
     input  wire [DEST_WIDTH-1:0]         req_dest,
     input  wire [HASH_WIDTH-1:0]         req_hash,
+    // NOTE
+    input  wire [RX_ROUTING_WIDTH-1:0]   req_rx_routing,
     input  wire [TAG_WIDTH-1:0]          req_tag,
     input  wire                          req_valid,
 
@@ -124,6 +135,11 @@
         $error("Error: RB_NEXT_PTR overlaps block (instance %m)");
         $finish;
     end
+
+    if (PORTS != 1) begin
+        $error("number of ports should be 1");
+        $finish;
+    end
 end
 
 // control registers
@@ -135,6 +151,14 @@
 reg [QUEUE_INDEX_WIDTH-1:0] hash_mask_reg[PORTS-1:0];
 reg [QUEUE_INDEX_WIDTH-1:0] app_mask_reg[PORTS-1:0];
 
+reg ingress_enable_reg = 0;
+reg [31:0] rxcpl_hard_timeout_in_us_reg = 0;
+
+assign ingress_enable = ingress_enable_reg;
+assign rxcpl_hard_timeout_in_us = rxcpl_hard_timeout_in_us_reg;
+
+reg [31:0] ctrl_cnt_reg;
+
 reg [QUEUE_INDEX_WIDTH-1:0] resp_queue_reg = 0;
 reg [TAG_WIDTH-1:0] resp_tag_reg = 0;
 reg resp_valid_reg = 1'b0;
@@ -164,6 +188,8 @@
     reg_rd_data_reg <= 0;
     reg_rd_ack_reg <= 1'b0;
 
+    ctrl_cnt_reg <= ctrl_cnt;
+
     if (reg_wr_en && !reg_wr_ack_reg) begin
         // write operation
         reg_wr_ack_reg <= 1'b0;
@@ -180,6 +206,14 @@
                 app_mask_reg[k] <= reg_wr_data;
                 reg_wr_ack_reg <= 1'b1;
             end
+            if ({reg_wr_addr >> 2, 2'b00} == RBB+7'h20 + k*16) begin
+                ingress_enable_reg <= reg_wr_data;
+                reg_wr_ack_reg <= 1'b1;
+            end
+            if ({reg_wr_addr >> 2, 2'b00} == RBB+7'h24 + k*16) begin
+                rxcpl_hard_timeout_in_us_reg <= reg_wr_data;
+                reg_wr_ack_reg <= 1'b1;
+            end
         end
     end
 
@@ -206,10 +240,23 @@
                 reg_rd_data_reg <= app_mask_reg[k];
                 reg_rd_ack_reg <= 1'b1;
             end
+            if ({reg_rd_addr >> 2, 2'b00} == RBB+7'h1C + k*16) begin
+                reg_rd_data_reg <= ctrl_cnt_reg;
+                reg_rd_ack_reg <= 1'b1;
+            end
+            if ({reg_rd_addr >> 2, 2'b00} == RBB+7'h20 + k*16) begin
+                reg_rd_data_reg <= ingress_enable_reg;
+                reg_rd_ack_reg <= 1'b1;
+            end
+            if ({reg_rd_addr >> 2, 2'b00} == RBB+7'h24 + k*16) begin
+                reg_rd_data_reg <= rxcpl_hard_timeout_in_us_reg;
+                reg_rd_ack_reg <= 1'b1;
+            end
         end
     end
 
-    resp_queue_reg <= (req_dest & app_mask_reg[req_id]) + (req_hash & hash_mask_reg[req_id]) + offset_reg[req_id];
+    // NOTE: we reuse the hash_mask for rx routing
+    resp_queue_reg <= (req_dest & app_mask_reg[req_id]) + (req_hash & hash_mask_reg[req_id]) + offset_reg[req_id] + (req_rx_routing & hash_mask_reg[req_id]);
     resp_tag_reg <= req_tag;
     resp_valid_reg <= req_valid;
 
@@ -224,6 +271,11 @@
         end
 
         resp_valid_reg <= 1'b0;
+
+        ingress_enable_reg <= 1'b0;
+        rxcpl_hard_timeout_in_us_reg <= DEFAULT_HARD_TIMEOUT_US;
+
+        ctrl_cnt_reg <= 0;
     end
 end
 
diff --color -burN ./corundum-rtl/q_res_ram.v ./hp-rtl/q_res_ram.v
--- ./corundum-rtl/q_res_ram.v	1969-12-31 19:00:00.000000000 -0500
+++ ./hp-rtl/q_res_ram.v	2024-09-12 17:14:43.149796023 -0400
@@ -0,0 +1,62 @@
+`resetall
+`timescale 1ns / 1ps
+`default_nettype none
+
+module q_res_ram #(
+    parameter DATA_WIDTH = 8,
+    parameter ADDR_WIDTH = 8,
+    parameter NUM_ENTRIES = 2**ADDR_WIDTH
+)
+(
+    // write port
+    input  wire                             ena,
+    input  wire                             wr_en,
+    input  wire [DATA_WIDTH-1:0]            wr_data,
+    input  wire [ADDR_WIDTH-1:0]            wr_addr,
+
+    // read port
+    input  wire                             rd_en,
+    input  wire [ADDR_WIDTH-1:0]            rd_addr,
+    output wire [DATA_WIDTH-1:0]            rd_data,
+
+    //
+    input  wire              clk,
+    input  wire              rst
+);
+
+// two-cycle read
+reg [DATA_WIDTH-1:0] mem [(2**ADDR_WIDTH)-1:0];
+reg [DATA_WIDTH-1:0] rd_data_reg = 0;
+
+assign rd_data = mem[rd_addr];
+
+integer i;
+// TODO: initialization
+initial begin
+    for (i=0; i<NUM_ENTRIES; i=i+1) begin
+        mem[i] = 0;
+    end
+end
+
+always @(posedge clk) begin
+    if (ena) begin
+        if (wr_en) begin
+            mem[wr_addr] <= wr_data;
+        end
+    end
+
+    if (rd_en) begin
+        rd_data_reg <= mem[rd_addr];
+    end
+
+    if (rst) begin
+        rd_data_reg <= 0;
+    end
+end
+
+endmodule
+
+
+
+`resetall
+
diff --color -burN ./corundum-rtl/queue_manager.v ./hp-rtl/queue_manager.v
--- ./corundum-rtl/queue_manager.v	2024-09-12 17:15:07.565794868 -0400
+++ ./hp-rtl/queue_manager.v	2024-09-12 17:14:43.149796023 -0400
@@ -194,7 +194,7 @@
 reg [PIPELINE-1:0] op_commit_pipe_reg = {PIPELINE{1'b0}}, op_commit_pipe_next;
 
 reg [QUEUE_INDEX_WIDTH-1:0] queue_ram_addr_pipeline_reg[PIPELINE-1:0], queue_ram_addr_pipeline_next[PIPELINE-1:0];
-reg [2:0] axil_reg_pipeline_reg[PIPELINE-1:0], axil_reg_pipeline_next[PIPELINE-1:0];
+reg [3:0] axil_reg_pipeline_reg[PIPELINE-1:0], axil_reg_pipeline_next[PIPELINE-1:0];
 reg [AXIL_DATA_WIDTH-1:0] write_data_pipeline_reg[PIPELINE-1:0], write_data_pipeline_next[PIPELINE-1:0];
 reg [AXIL_STRB_WIDTH-1:0] write_strobe_pipeline_reg[PIPELINE-1:0], write_strobe_pipeline_next[PIPELINE-1:0];
 reg [REQ_TAG_WIDTH-1:0] req_tag_pipeline_reg[PIPELINE-1:0], req_tag_pipeline_next[PIPELINE-1:0];
@@ -237,8 +237,8 @@
 wire [QUEUE_PTR_WIDTH-1:0] queue_ram_read_data_head_ptr = queue_ram_read_data_pipeline_reg[PIPELINE-1][15:0];
 wire [QUEUE_PTR_WIDTH-1:0] queue_ram_read_data_tail_ptr = queue_ram_read_data_pipeline_reg[PIPELINE-1][31:16];
 wire [CPL_INDEX_WIDTH-1:0] queue_ram_read_data_cpl_queue = queue_ram_read_data_pipeline_reg[PIPELINE-1][47:32];
-wire [LOG_QUEUE_SIZE_WIDTH-1:0] queue_ram_read_data_log_queue_size = queue_ram_read_data_pipeline_reg[PIPELINE-1][51:48];
-wire [LOG_BLOCK_SIZE_WIDTH-1:0] queue_ram_read_data_log_block_size = queue_ram_read_data_pipeline_reg[PIPELINE-1][53:52];
+wire [LOG_QUEUE_SIZE_WIDTH-1:0] queue_ram_read_data_log_queue_size = queue_ram_read_data_pipeline_reg[PIPELINE-1][51:48]; // queue size in log2
+wire [LOG_BLOCK_SIZE_WIDTH-1:0] queue_ram_read_data_log_block_size = queue_ram_read_data_pipeline_reg[PIPELINE-1][53:52]; // block size in log2
 wire queue_ram_read_data_active = queue_ram_read_data_pipeline_reg[PIPELINE-1][55];
 wire [CL_OP_TABLE_SIZE-1:0] queue_ram_read_data_op_index = queue_ram_read_data_pipeline_reg[PIPELINE-1][63:56];
 wire [ADDR_WIDTH-1:0] queue_ram_read_data_base_addr = queue_ram_read_data_pipeline_reg[PIPELINE-1][127:64];
@@ -285,10 +285,10 @@
 assign s_axil_rresp = 2'b00;
 assign s_axil_rvalid = s_axil_rvalid_reg;
 
-wire [QUEUE_INDEX_WIDTH-1:0] s_axil_awaddr_queue = s_axil_awaddr >> 5;
-wire [2:0] s_axil_awaddr_reg = s_axil_awaddr >> 2;
-wire [QUEUE_INDEX_WIDTH-1:0] s_axil_araddr_queue = s_axil_araddr >> 5;
-wire [2:0] s_axil_araddr_reg = s_axil_araddr >> 2;
+wire [QUEUE_INDEX_WIDTH-1:0] s_axil_awaddr_queue = s_axil_awaddr >> 6;
+wire [3:0] s_axil_awaddr_reg = s_axil_awaddr >> 2;
+wire [QUEUE_INDEX_WIDTH-1:0] s_axil_araddr_queue = s_axil_araddr >> 6;
+wire [3:0] s_axil_araddr_reg = s_axil_araddr >> 2;
 
 wire queue_active = op_table_active[queue_ram_read_data_op_index] && op_table_queue[queue_ram_read_data_op_index] == queue_ram_addr_pipeline_reg[PIPELINE-1];
 wire queue_empty_idle = queue_ram_read_data_head_ptr == queue_ram_read_data_tail_ptr;
diff --color -burN ./corundum-rtl/retx.v ./hp-rtl/retx.v
--- ./corundum-rtl/retx.v	1969-12-31 19:00:00.000000000 -0500
+++ ./hp-rtl/retx.v	2024-09-12 17:14:43.149796023 -0400
@@ -0,0 +1,984 @@
+`resetall
+`timescale 1ns / 1ps
+`default_nettype none
+
+
+module retx #
+(
+    parameter MSG_ID_WIDTH = 32,
+    parameter MSG_OFF_WIDTH = 8,
+    parameter TX_MAX_DESC_REQ = 16,
+    parameter TX_DESC_FIFO_SIZE = TX_MAX_DESC_REQ*8,
+    //
+    parameter RETX_DESC_TABLE_SIZE = 1024,
+    parameter CL_RETX_DESC_TABLE_SIZE = $clog2(RETX_DESC_TABLE_SIZE),
+    parameter MAX_RETX_DESC_REQ = 512,
+    // CPL
+    parameter PTP_TS_WIDTH = 96,
+    parameter PTP_TS_KEEP_WIDTH = PTP_TS_WIDTH/8,
+    parameter PTP_TS_ENABLE = 0,
+    //
+    parameter TIMEOUT_WIDTH = 16,
+    parameter DEFAULT_HARD_TIMEOUT_US = 250,
+    parameter DEFAULT_TIMEOUT_US = 50,
+    // parameters from TXE
+    parameter TXE_DESC_TAG_WIDTH = 8, // --> REQ_TAG_WIDTH in TXE
+    parameter TXE_QUEUE_INDEX_WIDTH = 4,
+    parameter TXE_CPL_QUEUE_INDEX_WIDTH = 4,
+    parameter TXE_QUEUE_PTR_WIDTH = 16,
+    parameter TXE_PORTS = 1,
+    parameter TXE_AXIS_TX_DEST_WIDTH = $clog2(TXE_PORTS)+4,
+    parameter TXE_DMA_CLIENT_LEN_WIDTH = 20,
+    parameter TXE_CPL_REQ_TAG_WIDTH = 8, // CPL reqeust tag width
+    parameter TXE_CPL_SIZE = 32, // CPL descriptor size
+    // Transmit tag width
+    parameter TX_TAG_WIDTH = 16,
+    //
+    parameter DESC_SIZE = 16,
+    parameter AXIS_DESC_DATA_WIDTH = DESC_SIZE*8,
+    parameter AXIS_DESC_KEEP_WIDTH = AXIS_DESC_DATA_WIDTH/8,
+    parameter PIPELINE = 2,
+
+    parameter DESC_TABLE_SIZE = 32,
+    parameter CL_DESC_TABLE_SIZE = $clog2(DESC_TABLE_SIZE)
+)
+(
+    // request from tx_engine to allocate a retx table entry
+    input  wire                                  s_axis_txe_req_desc_tvalid,
+    input  wire [TXE_DESC_TAG_WIDTH-1:0]         s_axis_txe_req_desc_tag, // tag, txe entry index
+    input  wire [TXE_CPL_QUEUE_INDEX_WIDTH-1:0]  s_axis_txe_req_desc_cpl_queue,
+    input  wire [TXE_QUEUE_INDEX_WIDTH-1:0]      s_axis_txe_req_desc_queue,
+    input  wire [TXE_QUEUE_PTR_WIDTH-1:0]        s_axis_txe_req_desc_queue_ptr,
+    input  wire [TXE_AXIS_TX_DEST_WIDTH-1:0]     s_axis_txe_req_desc_dest,
+    input  wire [TXE_DMA_CLIENT_LEN_WIDTH-1:0]   s_axis_txe_req_desc_len,
+    output wire                                  s_axis_txe_req_desc_ready,
+    input  wire [AXIS_DESC_DATA_WIDTH-1:0]       s_axis_txe_req_desc_tdata,
+    // response to tx_engine 
+    output wire                                  m_axis_txe_resp_desc_valid,
+    output wire [TXE_DESC_TAG_WIDTH-1:0]         m_axis_txe_resp_desc_queue, // txe entry index
+    output wire [CL_RETX_DESC_TABLE_SIZE-1:0]    m_axis_txe_resp_desc_tag,   // retx entry index
+    input  wire                                  m_axis_txe_resp_desc_ready,
+    /*
+     * Completion request output
+     */
+    output wire [TXE_QUEUE_INDEX_WIDTH-1:0]      m_axis_cpl_req_queue,
+    output wire [TXE_CPL_REQ_TAG_WIDTH-1:0]      m_axis_cpl_req_tag,
+    output wire [TXE_CPL_SIZE*8-1:0]             m_axis_cpl_req_data,
+    output wire                                  m_axis_cpl_req_valid,
+    input  wire                                  m_axis_cpl_req_ready,
+
+    /*
+     * Completion request status input
+     */
+    input  wire [TXE_CPL_REQ_TAG_WIDTH-1:0]      s_axis_cpl_req_status_tag,
+    input  wire                                  s_axis_cpl_req_status_full,
+    input  wire                                  s_axis_cpl_req_status_error,
+    input  wire                                  s_axis_cpl_req_status_valid,
+    /*
+     * Transmit completion input
+     */
+    input  wire [TX_TAG_WIDTH-1:0]               s_axis_tx_cpl_tag,
+    input  wire [PTP_TS_WIDTH-1:0]               s_axis_tx_cpl_ts,
+    input  wire                                  s_axis_tx_cpl_valid,
+    output wire                                  s_axis_tx_cpl_ready,
+
+    output wire [TXE_DESC_TAG_WIDTH-1:0]         m_axis_tx_op_cpl_queue,        // output to TXE to release slot
+    output wire                                  m_axis_tx_op_cpl_valid,
+
+    // TODO: unused now
+    input  wire [MSG_ID_WIDTH-1:0]                  s_egress_to_retx_msg_id,
+    input  wire [MSG_OFF_WIDTH-1:0]                 s_egress_to_retx_msg_offset,
+    input  wire [CL_RETX_DESC_TABLE_SIZE-1:0]       s_egress_to_retx_table_ptr,
+    input  wire                                     s_egress_to_retx_msg_valid,
+    input  wire                                     s_egress_to_retx_is_msg,
+    output wire                                     s_egress_to_retx_msg_ready,
+
+    input  wire [MSG_ID_WIDTH-1:0]                  s_ingress_to_retx_ack_msg_id,
+    input  wire [MSG_OFF_WIDTH-1:0]                 s_ingress_to_retx_ack_msg_off,
+    input  wire                                     s_ingress_to_retx_ack_msg_valid,
+
+    // retx desc info
+    output wire [AXIS_DESC_DATA_WIDTH-1:0]          m_axis_retx_desc_tdata,
+    output wire                                     m_axis_retx_desc_tvalid,
+    output wire [CL_RETX_DESC_TABLE_SIZE-1:0]       m_axis_retx_desc_tag, // retx entry index
+    input  wire                                     m_axis_retx_desc_tready,
+
+    // dbg
+    // input wire [CL_DESC_TABLE_SIZE:0]          dbg_desc_table_start_ptr,
+    // input wire [CL_DESC_TABLE_SIZE:0]          dbg_desc_table_finish_ptr,
+    // input wire [DESC_TABLE_SIZE-1:0]           dbg_desc_table_active,
+    // input wire [DESC_TABLE_SIZE-1:0]           dbg_desc_table_invalid,
+    // input wire [DESC_TABLE_SIZE-1:0]           dbg_desc_table_desc_updated,
+    // input wire [DESC_TABLE_SIZE-1:0]           dbg_desc_table_tx_finish,
+    // input wire [DESC_TABLE_SIZE-1:0]           dbg_desc_table_cpl,
+    //
+    input  wire                                  clk,
+    input  wire                                  rst,
+    input  wire                                  enable
+);
+
+parameter RETX_DESC_PTR_MASK = {CL_RETX_DESC_TABLE_SIZE{1'b1}};
+
+// track each retx_desc
+reg [RETX_DESC_TABLE_SIZE-1:0] retx_table_active = 0;
+reg [RETX_DESC_TABLE_SIZE-1:0] retx_table_cpl_acked = 0;
+reg [RETX_DESC_TABLE_SIZE-1:0] retx_table_tx_finished = 0;
+reg [RETX_DESC_TABLE_SIZE-1:0] retx_table_is_transmitted = 0;
+reg [RETX_DESC_TABLE_SIZE-1:0] retx_table_is_msg = 0;
+reg [RETX_DESC_TABLE_SIZE-1:0] retx_table_msg_acked = 0;
+reg [RETX_DESC_TABLE_SIZE-1:0] retx_table_msg_expired = 0;
+/*
+ * we assume that every desc --> packet
+ */
+(* ram_style = "block" *)
+reg [AXIS_DESC_DATA_WIDTH-1:0]          retx_table_desc_tdata[RETX_DESC_TABLE_SIZE-1:0];
+// (* ram_style = "distributed", ramstyle = "no_rw_check, mlab" *)
+reg [TXE_DESC_TAG_WIDTH-1:0]            retx_table_desc_txe_tag [RETX_DESC_TABLE_SIZE-1:0];  // txe entry index
+reg [TXE_CPL_QUEUE_INDEX_WIDTH-1:0]     retx_table_desc_txe_cpl_queue [RETX_DESC_TABLE_SIZE-1:0];  // txe entry cpl queue
+reg [TXE_QUEUE_INDEX_WIDTH-1:0]         retx_table_queue[RETX_DESC_TABLE_SIZE-1:0];
+reg [TXE_QUEUE_PTR_WIDTH-1:0]           retx_table_queue_ptr[RETX_DESC_TABLE_SIZE-1:0];
+reg [TXE_AXIS_TX_DEST_WIDTH-1:0]        retx_table_dest[RETX_DESC_TABLE_SIZE-1:0];
+reg [TXE_DMA_CLIENT_LEN_WIDTH-1:0]      retx_table_len[RETX_DESC_TABLE_SIZE-1:0];
+reg [TIMEOUT_WIDTH-1:0]                 retx_table_desc_timeout_in_us[RETX_DESC_TABLE_SIZE-1:0];
+reg [TIMEOUT_WIDTH-1:0]                 retx_table_desc_hardtimeout_in_us[RETX_DESC_TABLE_SIZE-1:0];
+reg [PTP_TS_WIDTH-1:0]                  retx_table_ptp_ts[RETX_DESC_TABLE_SIZE-1:0];
+
+//
+reg [CL_RETX_DESC_TABLE_SIZE:0]      retx_table_start_ptr_reg = 0, retx_table_finish_ptr_reg = 0;
+
+reg [AXIS_DESC_DATA_WIDTH-1:0]           retx_table_start_info_tdata;
+reg [TXE_DESC_TAG_WIDTH-1:0]             retx_table_start_txe_tag;
+reg [TXE_CPL_QUEUE_INDEX_WIDTH-1:0]      retx_table_start_cpl_queue;
+reg [TXE_QUEUE_INDEX_WIDTH-1:0]          retx_table_start_queue;
+reg [TXE_QUEUE_PTR_WIDTH-1:0]            retx_table_start_queue_ptr;
+reg [TXE_AXIS_TX_DEST_WIDTH-1:0]         retx_table_start_dest;
+reg [TXE_DMA_CLIENT_LEN_WIDTH-1:0]       retx_table_start_len;
+reg [AXIS_DESC_DATA_WIDTH-1:0]           retx_table_start_desc_tdata;
+reg                                      retx_table_start_en;
+
+reg                                     retx_table_finish_en;
+reg retx_table_cpl_acked_en;
+reg [CL_RETX_DESC_TABLE_SIZE-1:0] retx_table_cpl_acked_ptr;
+
+// handle txe request
+reg s_axis_txe_req_desc_ready_reg = 0, s_axis_txe_req_desc_ready_next;
+
+reg [TXE_DESC_TAG_WIDTH-1:0] m_axis_txe_resp_desc_queue_reg = 0, m_axis_txe_resp_desc_queue_next;
+reg [CL_RETX_DESC_TABLE_SIZE-1:0] m_axis_txe_resp_desc_tag_reg = 0, m_axis_txe_resp_desc_tag_next;
+reg m_axis_txe_resp_desc_valid_reg = 0, m_axis_txe_resp_desc_valid_next;
+
+assign s_axis_txe_req_desc_ready    = s_axis_txe_req_desc_ready_reg;
+assign m_axis_txe_resp_desc_valid   = m_axis_txe_resp_desc_valid_reg;
+assign m_axis_txe_resp_desc_queue   = m_axis_txe_resp_desc_queue_reg;
+assign m_axis_txe_resp_desc_tag     = m_axis_txe_resp_desc_tag_reg;
+
+// [end] handle txe request
+
+// handle tx finish
+reg s_axis_tx_cpl_ready_reg = 0, s_axis_tx_cpl_ready_next;
+assign s_axis_tx_cpl_ready = s_axis_tx_cpl_ready_reg;
+
+reg [CL_RETX_DESC_TABLE_SIZE-1:0] retx_table_tx_finish_ptr;
+reg [PTP_TS_WIDTH-1:0] retx_table_tx_finish_ts;
+reg retx_table_tx_finish_en;
+
+// handle CPL
+reg [TXE_QUEUE_INDEX_WIDTH-1:0]          m_axis_cpl_req_queue_reg = 0;
+reg [TXE_QUEUE_INDEX_WIDTH-1:0]          m_axis_cpl_req_queue_next;
+reg [TXE_CPL_REQ_TAG_WIDTH-1:0]          m_axis_cpl_req_tag_reg = 0;
+reg [TXE_CPL_REQ_TAG_WIDTH-1:0]          m_axis_cpl_req_tag_next;
+reg [TXE_CPL_SIZE*8-1:0]                 m_axis_cpl_req_data_reg = 0;
+reg [TXE_CPL_SIZE*8-1:0]                 m_axis_cpl_req_data_next;
+reg                                      m_axis_cpl_req_valid_reg = 0;
+reg                                      m_axis_cpl_req_valid_next;
+
+reg [CL_RETX_DESC_TABLE_SIZE:0]         retx_table_cpl_enq_start_ptr_reg = 0;
+reg retx_table_cpl_enq_start_en;
+
+assign m_axis_cpl_req_queue = m_axis_cpl_req_queue_reg;
+assign m_axis_cpl_req_tag = m_axis_cpl_req_tag_reg;
+assign m_axis_cpl_req_data = m_axis_cpl_req_data_reg;
+assign m_axis_cpl_req_valid = m_axis_cpl_req_valid_reg;
+
+// 
+reg [TXE_DESC_TAG_WIDTH-1:0] m_axis_tx_op_cpl_queue_reg = 0;
+reg [TXE_DESC_TAG_WIDTH-1:0] m_axis_tx_op_cpl_queue_next;
+reg                         m_axis_tx_op_cpl_valid_reg = 0;
+reg                         m_axis_tx_op_cpl_valid_next;
+
+assign m_axis_tx_op_cpl_queue = m_axis_tx_op_cpl_queue_reg;
+assign m_axis_tx_op_cpl_valid = m_axis_tx_op_cpl_valid_reg;
+// [end] handle CPL
+
+// handle egress-to-retx update
+reg [CL_RETX_DESC_TABLE_SIZE-1:0]       retx_update_entry_ptr;
+reg [MSG_ID_WIDTH-1:0]                  retx_update_entry_msg_id;
+reg [MSG_OFF_WIDTH-1:0]                 retx_update_entry_msg_offset;
+reg                                     retx_update_entry_is_msg;
+reg retx_update_entry_en, retx_update_entry_hard_timeout;
+
+reg s_egress_to_retx_msg_ready_reg = 0, s_egress_to_retx_msg_ready_next;
+assign s_egress_to_retx_msg_ready = s_egress_to_retx_msg_ready_reg;
+
+// handle ACK from ingress
+reg [MSG_ID_WIDTH-1:0]                  s_ingress_to_retx_ack_msg_id_reg = 0;
+reg [MSG_OFF_WIDTH-1:0]                 s_ingress_to_retx_ack_msg_off_reg = 0;
+reg                                     s_ingress_to_retx_ack_msg_valid_reg = 0;
+
+reg [CL_RETX_DESC_TABLE_SIZE-1:0]       retx_table_msg_acked_ptr;
+reg retx_table_msg_acked_en;
+
+// handle retx
+reg [CL_RETX_DESC_TABLE_SIZE-1:0]       retx_table_desc_expired_ptr;
+reg retx_table_desc_expired_en;
+
+wire retx_op_ready;
+reg  retx_op_ready_reg = 0, retx_op_ready_next;
+
+reg [CL_RETX_DESC_TABLE_SIZE-1:0] retx_req_ptr_reg = 0, retx_req_ptr_next;
+reg retx_req_valid_reg = 0, retx_req_valid_next;
+
+assign retx_op_ready = retx_op_ready_reg;
+
+reg [AXIS_DESC_DATA_WIDTH-1:0]          m_axis_retx_desc_tdata_reg = 0, m_axis_retx_desc_tdata_next;
+reg                                     m_axis_retx_desc_tvalid_reg = 0, m_axis_retx_desc_tvalid_next;
+reg [CL_RETX_DESC_TABLE_SIZE-1:0]       m_axis_retx_desc_tag_reg = 0, m_axis_retx_desc_tag_next;// retx entry index
+
+assign m_axis_retx_desc_tdata = m_axis_retx_desc_tdata_reg;
+assign m_axis_retx_desc_tvalid = m_axis_retx_desc_tvalid_reg;
+assign m_axis_retx_desc_tag = m_axis_retx_desc_tag_reg;
+
+// CAM
+localparam CAM_DATA_WIDTH = MSG_ID_WIDTH + 4;
+wire cam_match;
+wire [CL_RETX_DESC_TABLE_SIZE-1:0] cam_match_addr;
+
+wire cam_wr_busy;
+reg  [CL_RETX_DESC_TABLE_SIZE-1:0] cam_wr_addr_reg = 0, cam_wr_addr_next;
+reg  [CAM_DATA_WIDTH-1:0] cam_wr_data_reg = 0, cam_wr_data_next;
+reg  cam_wr_en_reg = 0, cam_wr_en_next;
+
+//
+integer i, j;
+
+reg [TIMEOUT_WIDTH-1:0] retx_time_in_us = 0;
+
+// pipeline
+reg op_txe_req_pipe_hazard;
+reg op_retx_req_pipe_hazard;
+reg op_tx_cpl_req_pipe_hazard;
+reg stage_active;
+
+reg [PIPELINE-1:0] op_txe_req_pipe_reg = {PIPELINE{1'b0}}, op_txe_req_pipe_next;
+reg [PIPELINE-1:0] op_retx_req_pipe_reg = {PIPELINE{1'b0}}, op_retx_req_pipe_next;
+reg [PIPELINE-1:0] op_retx_update_msg_entry_pipe_reg = {PIPELINE{1'b0}}, op_retx_update_msg_entry_pipe_next;
+reg [PIPELINE-1:0] op_tx_cpl_req_pipe_reg = {PIPELINE{1'b0}}, op_tx_cpl_req_pipe_next;
+
+reg [TXE_DESC_TAG_WIDTH-1:0]         txe_req_desc_tag_reg[PIPELINE-1:0], txe_req_desc_tag_next[PIPELINE-1:0];
+reg [TXE_CPL_QUEUE_INDEX_WIDTH-1:0]  txe_req_desc_cpl_queue_reg[PIPELINE-1:0], txe_req_desc_cpl_queue_next[PIPELINE-1:0];
+reg [TXE_QUEUE_INDEX_WIDTH-1:0]      txe_req_desc_queue_reg[PIPELINE-1:0], txe_req_desc_queue_next[PIPELINE-1:0];
+reg [TXE_QUEUE_PTR_WIDTH-1:0]        txe_req_desc_queue_ptr_reg[PIPELINE-1:0], txe_req_desc_queue_ptr_next[PIPELINE-1:0];
+reg [TXE_AXIS_TX_DEST_WIDTH-1:0]     txe_req_desc_dest_reg[PIPELINE-1:0], txe_req_desc_dest_next[PIPELINE-1:0];
+reg [TXE_DMA_CLIENT_LEN_WIDTH-1:0]   txe_req_desc_len_reg[PIPELINE-1:0], txe_req_desc_len_next[PIPELINE-1:0];
+reg [AXIS_DESC_DATA_WIDTH-1:0]       txe_req_desc_tdata_reg[PIPELINE-1:0], txe_req_desc_tdata_next[PIPELINE-1:0];
+
+reg [MSG_ID_WIDTH-1:0]                  retx_update_entry_msg_id_reg[PIPELINE-1:0], retx_update_entry_msg_id_next[PIPELINE-1:0];
+reg [MSG_OFF_WIDTH-1:0]                 retx_update_entry_msg_offset_reg[PIPELINE-1:0], retx_update_entry_msg_offset_next[PIPELINE-1:0];
+reg [CL_RETX_DESC_TABLE_SIZE-1:0]       retx_update_entry_table_ptr_reg[PIPELINE-1:0], retx_update_entry_table_ptr_next[PIPELINE-1:0];
+reg                                     retx_update_entry_is_transmitted_reg[PIPELINE-1:0], retx_update_entry_is_transmitted_next[PIPELINE-1:0];
+reg                                     retx_update_entry_is_msg_reg[PIPELINE-1:0], retx_update_entry_is_msg_next[PIPELINE-1:0];
+
+// retx
+reg [CL_RETX_DESC_TABLE_SIZE-1:0] retx_req_desc_ptr_reg[PIPELINE-1:0], retx_req_desc_ptr_next[PIPELINE-1:0];
+
+// read from RAM
+reg [CL_RETX_DESC_TABLE_SIZE-1:0]   ram_read_addr;
+reg [CL_RETX_DESC_TABLE_SIZE-1:0]   ram_read_addr_pipe_reg[PIPELINE-1:0], ram_read_addr_pipe_next[PIPELINE-1:0];
+reg [TXE_CPL_QUEUE_INDEX_WIDTH-1:0] ram_read_cpl_queue_pipe_reg[PIPELINE-1:0], ram_read_cpl_queue_reg = 0;
+reg [TXE_QUEUE_INDEX_WIDTH-1:0]     ram_read_queue_pipe_reg[PIPELINE-1:0], ram_read_queue_reg = 0;
+reg [TXE_QUEUE_PTR_WIDTH-1:0]       ram_read_queue_ptr_pipe_reg[PIPELINE-1:0], ram_read_queue_ptr_reg = 0;
+reg [TXE_AXIS_TX_DEST_WIDTH-1:0]    ram_read_dest_pipe_reg[PIPELINE-1:0], ram_read_dest_reg = 0;
+reg [TXE_DMA_CLIENT_LEN_WIDTH-1:0]  ram_read_len_pipe_reg[PIPELINE-1:0], ram_read_len_reg = 0;
+reg [PTP_TS_WIDTH-1:0]              ram_read_ts_pipe_reg[PIPELINE-1:0], ram_read_ts_reg = 0;
+// read from RAM for retx
+reg [CL_RETX_DESC_TABLE_SIZE-1:0]  ram_read_desc_tdata_addr;
+reg [CL_RETX_DESC_TABLE_SIZE-1:0]  ram_read_desc_tdata_addr_pipe_reg[PIPELINE-1:0], ram_read_desc_tdata_addr_pipe_next[PIPELINE-1:0];
+reg [AXIS_DESC_DATA_WIDTH-1:0]     ram_read_desc_tdata_pipe_reg[PIPELINE-1:0], ram_read_desc_tdata_reg = 0;
+
+// reg                                 ram_read_is_msg_pipe_reg[PIPELINE-1:0], ram_read_is_msg_reg = 0;
+// reg [TXE_DESC_TAG_WIDTH-1:0]        ram_read_txe_tag_pipe_reg[PIPELINE-1:0], ram_read_txe_tag_reg = 0;
+
+// table initialization
+initial begin
+    for (i=0; i<RETX_DESC_TABLE_SIZE; i=i+1) begin
+        retx_table_desc_txe_tag [i] = 0;  // txe entry index
+        retx_table_desc_txe_cpl_queue [i] = 0;  // txe entry cpl queue
+        retx_table_queue[i] = 0;
+        retx_table_queue_ptr[i] = 0;
+        retx_table_dest[i] = 0;
+        retx_table_len[i] = 0;
+        retx_table_desc_tdata[i] = 0;
+
+        retx_table_desc_timeout_in_us[i] = 0;
+        retx_table_desc_hardtimeout_in_us[i] = 0;
+
+        retx_table_ptp_ts[i] = 0;
+    end
+end
+// [end] table initialization
+
+always @(*) begin
+    s_axis_txe_req_desc_ready_next = 1'b0;
+
+    retx_table_start_info_tdata = 0;
+    retx_table_start_txe_tag = 0;
+    retx_table_start_cpl_queue = 0;
+    retx_table_start_queue = 0;
+    retx_table_start_queue_ptr = 0;
+    retx_table_start_dest = 0;
+    retx_table_start_len = 0;
+    retx_table_start_en = 1'b0;
+
+    // finish
+    retx_table_finish_en = 1'b0;
+
+    // tx finish
+    s_axis_tx_cpl_ready_next = 1'b1;
+    retx_table_tx_finish_en = 1'b0;
+    retx_table_tx_finish_ptr = s_axis_tx_cpl_tag & RETX_DESC_PTR_MASK;
+    retx_table_tx_finish_ts = s_axis_tx_cpl_ts;
+
+    // update entry
+    retx_update_entry_en = 1'b0;
+    retx_update_entry_hard_timeout = 1'b0;
+
+    retx_update_entry_is_msg = 0;
+    retx_update_entry_ptr = 0;
+
+    s_egress_to_retx_msg_ready_next = 1'b0;
+
+    cam_wr_en_next = 1'b0;
+    cam_wr_addr_next = cam_wr_addr_reg;
+    cam_wr_data_next = cam_wr_data_reg;
+
+    // ACK from ingress
+    retx_table_msg_acked_en = 1'b0;
+    retx_table_msg_acked_ptr = cam_match_addr;
+
+
+    // retx
+    retx_op_ready_next = 1'b0;
+    m_axis_retx_desc_tvalid_next = m_axis_retx_desc_tvalid_reg && !m_axis_retx_desc_tready;
+    m_axis_retx_desc_tdata_next = m_axis_retx_desc_tdata_reg;
+    m_axis_retx_desc_tag_next = m_axis_retx_desc_tag_reg;
+
+    // CPL action
+    retx_table_cpl_acked_en = 1'b0;
+    retx_table_cpl_acked_ptr = 0;
+
+    retx_table_cpl_enq_start_en = 1'b0;
+    // CPL related
+    // fifo_out_tx_cpl_ready = 1'b0;
+    m_axis_cpl_req_valid_next = m_axis_cpl_req_valid_reg && !m_axis_cpl_req_ready;
+    m_axis_cpl_req_queue_next = m_axis_cpl_req_queue_reg;
+    m_axis_cpl_req_tag_next   = m_axis_cpl_req_tag_reg;
+    m_axis_cpl_req_data_next  = m_axis_cpl_req_data_reg;
+
+    m_axis_txe_resp_desc_valid_next = 1'b0;
+    m_axis_txe_resp_desc_queue_next = s_axis_txe_req_desc_tag;
+    m_axis_txe_resp_desc_tag_next   = retx_table_start_ptr_reg & RETX_DESC_PTR_MASK;
+
+    // retx --> txe CPL finish
+    m_axis_tx_op_cpl_valid_next = 1'b0;
+    m_axis_tx_op_cpl_queue_next = 0;
+
+    // pipeline
+    op_txe_req_pipe_next = {op_txe_req_pipe_reg, 1'b0};
+    op_tx_cpl_req_pipe_next = {op_tx_cpl_req_pipe_reg, 1'b0};
+    op_retx_req_pipe_next = {op_retx_req_pipe_reg, 1'b0};
+    op_retx_update_msg_entry_pipe_next = {op_retx_update_msg_entry_pipe_reg, 1'b0};
+
+    ram_read_addr = 0;
+    // retx
+    ram_read_desc_tdata_addr = 0;
+
+
+    // TODO: all op related next
+    ram_read_addr_pipe_next[0]      = 0;
+
+    txe_req_desc_tag_next[0]        = 0;
+    txe_req_desc_cpl_queue_next[0]  = 0;
+    txe_req_desc_queue_next[0]      = 0;
+    txe_req_desc_queue_ptr_next[0]  = 0;
+    txe_req_desc_dest_next[0]       = 0;
+    txe_req_desc_len_next[0]        = 0;
+    txe_req_desc_tdata_next[0]      = 0;
+
+
+    retx_update_entry_msg_id_next[0]         = 0;
+    retx_update_entry_msg_offset_next[0]     = 0;
+    retx_update_entry_is_msg_next[0]         = 0;
+    retx_update_entry_is_transmitted_next[0] = 0;
+    retx_update_entry_table_ptr_next[0]      = 0;
+
+    for (j=1; j<PIPELINE; j=j+1) begin
+        ram_read_addr_pipe_next[j]      = ram_read_addr_pipe_reg[j-1];
+        ram_read_desc_tdata_addr_pipe_next[j] = ram_read_desc_tdata_addr_pipe_reg[j-1];
+
+        txe_req_desc_tag_next[j]        = txe_req_desc_tag_reg[j-1];
+        txe_req_desc_cpl_queue_next[j]  = txe_req_desc_cpl_queue_reg[j-1];
+        txe_req_desc_queue_next[j]      = txe_req_desc_queue_reg[j-1];
+        txe_req_desc_queue_ptr_next[j]  = txe_req_desc_queue_ptr_reg[j-1];
+        txe_req_desc_dest_next[j]       = txe_req_desc_dest_reg[j-1];
+        txe_req_desc_len_next[j]        = txe_req_desc_len_reg[j-1];
+        txe_req_desc_tdata_next[j]      = txe_req_desc_tdata_reg[j-1];
+
+
+        retx_update_entry_msg_id_next[j]         = retx_update_entry_msg_id_reg[j-1];
+        retx_update_entry_msg_offset_next[j]     = retx_update_entry_msg_offset_reg[j-1];
+        retx_update_entry_is_msg_next[j]         = retx_update_entry_is_msg_reg[j-1];
+        retx_update_entry_is_transmitted_next[j] = retx_update_entry_is_transmitted_reg[j-1];
+        retx_update_entry_table_ptr_next[j]      = retx_update_entry_table_ptr_reg[j-1];
+
+        retx_req_desc_ptr_next[j] = retx_req_desc_ptr_reg[j-1];
+    end
+
+
+    op_txe_req_pipe_hazard = 1'b0;
+    op_tx_cpl_req_pipe_hazard = 1'b0;
+    op_retx_req_pipe_hazard = 1'b0;
+    for (j=0; j<PIPELINE; j=j+1) begin
+        stage_active = op_txe_req_pipe_reg[j] || op_retx_req_pipe_reg[j] || op_tx_cpl_req_pipe_reg[j];
+        op_txe_req_pipe_hazard = 1'b0;
+        op_tx_cpl_req_pipe_hazard = 1'b0;
+        op_retx_req_pipe_hazard = 1'b0;
+    end
+
+    // pipeline stage 0 - receive request
+    if (enable && !retx_table_active[retx_table_start_ptr_reg & RETX_DESC_PTR_MASK]
+                && $unsigned(retx_table_start_ptr_reg - retx_table_finish_ptr_reg) < RETX_DESC_TABLE_SIZE
+                && s_axis_txe_req_desc_tvalid
+                && !m_axis_txe_resp_desc_valid
+                && !op_txe_req_pipe_hazard
+                && !op_txe_req_pipe_reg) begin
+
+        op_txe_req_pipe_next[0] = 1'b1;
+        s_axis_txe_req_desc_ready_next = 1'b1;
+
+        txe_req_desc_tag_next[0]        = s_axis_txe_req_desc_tag;
+        txe_req_desc_cpl_queue_next[0]  = s_axis_txe_req_desc_cpl_queue;
+        txe_req_desc_queue_next[0]      = s_axis_txe_req_desc_queue;
+        txe_req_desc_queue_ptr_next[0]  = s_axis_txe_req_desc_queue_ptr;
+        txe_req_desc_dest_next[0]       = s_axis_txe_req_desc_dest;
+        txe_req_desc_len_next[0]        = s_axis_txe_req_desc_len;
+
+        txe_req_desc_tdata_next[0]      = s_axis_txe_req_desc_tdata;
+    end
+
+    // nothing to read, just insert to CAM
+    if (enable && retx_table_active[s_egress_to_retx_table_ptr & RETX_DESC_PTR_MASK]
+                && !cam_wr_busy
+                && !op_retx_update_msg_entry_pipe_reg
+                && s_egress_to_retx_msg_valid) begin
+
+        op_retx_update_msg_entry_pipe_next[0] = 1'b1;
+        s_egress_to_retx_msg_ready_next = 1'b1;
+
+        // update timeout
+        retx_update_entry_msg_id_next[0]            = s_egress_to_retx_msg_id;
+        retx_update_entry_msg_offset_next[0]        = s_egress_to_retx_msg_offset;
+        retx_update_entry_is_msg_next[0]            = s_egress_to_retx_is_msg;
+        retx_update_entry_table_ptr_next[0]         = s_egress_to_retx_table_ptr & RETX_DESC_PTR_MASK;
+        retx_update_entry_is_transmitted_next[0]    = retx_table_is_transmitted[s_egress_to_retx_table_ptr & RETX_DESC_PTR_MASK];
+    end
+
+    // send out CPL request
+    if (enable && retx_table_active[retx_table_cpl_enq_start_ptr_reg & RETX_DESC_PTR_MASK]
+                    && retx_table_cpl_enq_start_ptr_reg != retx_table_start_ptr_reg
+                    && (!m_axis_cpl_req_valid_reg || m_axis_cpl_req_ready)
+                    && !op_tx_cpl_req_pipe_hazard
+                    && !op_tx_cpl_req_pipe_reg) begin
+        if (retx_table_is_transmitted[retx_table_cpl_enq_start_ptr_reg & RETX_DESC_PTR_MASK]) begin
+            // msg
+            if (retx_table_is_msg[retx_table_cpl_enq_start_ptr_reg & RETX_DESC_PTR_MASK]) begin
+                if (retx_table_msg_acked[retx_table_cpl_enq_start_ptr_reg & RETX_DESC_PTR_MASK]
+                        || retx_table_msg_expired[retx_table_cpl_enq_start_ptr_reg & RETX_DESC_PTR_MASK]) begin
+                    op_tx_cpl_req_pipe_next[0] = 1'b1;
+                    ram_read_addr = retx_table_cpl_enq_start_ptr_reg & RETX_DESC_PTR_MASK;
+
+                end
+            end
+            // non-msg
+            else if (retx_table_tx_finished[retx_table_cpl_enq_start_ptr_reg & RETX_DESC_PTR_MASK]) begin
+                op_tx_cpl_req_pipe_next[0] = 1'b1;
+
+                ram_read_addr = retx_table_cpl_enq_start_ptr_reg & RETX_DESC_PTR_MASK;
+
+            end
+        end
+    end
+
+    // handle retx
+    if (enable && !op_retx_req_pipe_reg
+            && retx_req_valid_reg
+            && !m_axis_retx_desc_tvalid) begin
+        op_retx_req_pipe_next[0] = 1'b1;
+        ram_read_desc_tdata_addr = retx_req_ptr_reg;
+        retx_req_desc_ptr_next[0] = retx_req_ptr_reg;
+
+        retx_op_ready_next = 1'b1;
+    end
+
+    // perform operation
+    if (op_txe_req_pipe_reg[PIPELINE-1]) begin
+        retx_table_start_txe_tag    = txe_req_desc_tag_reg[PIPELINE-1];
+        retx_table_start_cpl_queue  = txe_req_desc_cpl_queue_reg[PIPELINE-1];
+        retx_table_start_queue      = txe_req_desc_queue_reg[PIPELINE-1];
+        retx_table_start_queue_ptr  = txe_req_desc_queue_ptr_reg[PIPELINE-1];
+        retx_table_start_dest       = txe_req_desc_dest_reg[PIPELINE-1];
+        retx_table_start_len        = txe_req_desc_len_reg[PIPELINE-1];
+        retx_table_start_desc_tdata = txe_req_desc_tdata_reg[PIPELINE-1];
+        retx_table_start_en         = 1'b1;
+
+        // response to txe
+        m_axis_txe_resp_desc_valid_next = 1'b1;
+        m_axis_txe_resp_desc_queue_next = txe_req_desc_tag_reg[PIPELINE-1];
+        m_axis_txe_resp_desc_tag_next   = retx_table_start_ptr_reg & RETX_DESC_PTR_MASK;
+    end
+    // [END] handle txe request
+
+    if (op_retx_update_msg_entry_pipe_reg[PIPELINE-1]) begin
+        // retx_update_entry_msg_id        = retx_update_entry_msg_id_reg[PIPELINE-1];
+        // retx_update_entry_msg_offset    = retx_update_entry_msg_offset_reg[PIPELINE-1];
+        retx_update_entry_is_msg        = retx_update_entry_is_msg_reg[PIPELINE-1];
+        retx_update_entry_ptr           = retx_update_entry_table_ptr_reg[PIPELINE-1];
+
+        cam_wr_data_next = {retx_update_entry_msg_offset_reg[PIPELINE-1][3:0], retx_update_entry_msg_id_reg[PIPELINE-1]};
+        cam_wr_addr_next = retx_update_entry_table_ptr_reg[PIPELINE-1] & RETX_DESC_PTR_MASK;
+
+        if (retx_update_entry_is_transmitted_reg[PIPELINE-1]) begin
+            retx_update_entry_hard_timeout = 1'b0;
+        end
+        else begin
+            retx_update_entry_hard_timeout = 1'b1;
+            // cam_wr_en_next = 1'b1;
+        end
+        retx_update_entry_en            = 1'b1;
+    end
+
+    // handle retx
+    if (op_retx_req_pipe_reg[PIPELINE-1]) begin
+
+        m_axis_retx_desc_tvalid_next = 1'b1;
+        m_axis_retx_desc_tdata_next = ram_read_desc_tdata_pipe_reg[PIPELINE-1];
+        m_axis_retx_desc_tag_next = retx_req_desc_ptr_reg[PIPELINE-1];
+    end
+
+    // send CPL request
+    if (op_tx_cpl_req_pipe_reg[PIPELINE-1]) begin
+        // if ready to cpl, then send out cpl request to cpl write 
+        //      --> cpl queue
+        // initiate queue query
+        retx_table_cpl_enq_start_en = 1'b1;
+
+        m_axis_cpl_req_queue_next = ram_read_cpl_queue_pipe_reg[PIPELINE-1];
+        m_axis_cpl_req_tag_next = retx_table_cpl_enq_start_ptr_reg & RETX_DESC_PTR_MASK;
+        m_axis_cpl_req_data_next = 0;
+        m_axis_cpl_req_data_next[15:0]  = ram_read_queue_pipe_reg[PIPELINE-1];
+        m_axis_cpl_req_data_next[31:16] = ram_read_queue_ptr_pipe_reg[PIPELINE-1];
+        m_axis_cpl_req_data_next[47:32] = ram_read_len_pipe_reg[PIPELINE-1];
+        if (PTP_TS_ENABLE) begin
+            //m_axis_cpl_req_data_next[127:64] = desc_table_ptp_ts[desc_table_cpl_enqueue_start_ptr_reg & DESC_PTR_MASK] >> 16;
+            m_axis_cpl_req_data_next[111:64] = ram_read_ts_pipe_reg[PIPELINE-1] >> 16;
+        end
+        m_axis_cpl_req_data_next[176:168] = ram_read_dest_pipe_reg[PIPELINE-1];
+        m_axis_cpl_req_valid_next = 1'b1;
+    end
+
+    // handle tx finish
+    if (s_axis_tx_cpl_valid && s_axis_tx_cpl_tag[TX_TAG_WIDTH-1]) begin
+        retx_table_tx_finish_en = 1'b1;
+        retx_table_tx_finish_ptr = s_axis_tx_cpl_tag & RETX_DESC_PTR_MASK;
+        retx_table_tx_finish_ts = s_axis_tx_cpl_ts;
+    end
+
+    // CPL response
+    if (s_axis_cpl_req_status_valid) begin
+        m_axis_tx_op_cpl_valid_next = 1'b1;
+        m_axis_tx_op_cpl_queue_next = retx_table_desc_txe_tag[s_axis_cpl_req_status_tag & RETX_DESC_PTR_MASK]; // txe_tag table is relatively small
+        // desc finish
+        retx_table_cpl_acked_en = 1'b1;
+        retx_table_cpl_acked_ptr = s_axis_cpl_req_status_tag & RETX_DESC_PTR_MASK;
+    end
+
+
+    // handle ACK from ingress
+    if (cam_match && s_ingress_to_retx_ack_msg_valid_reg) begin
+        retx_table_msg_acked_en = 1'b1;
+        retx_table_msg_acked_ptr = cam_match_addr;
+    end
+
+    if (retx_table_active[retx_table_finish_ptr_reg & RETX_DESC_PTR_MASK]
+        && retx_table_finish_ptr_reg != retx_table_cpl_enq_start_ptr_reg
+        && retx_table_finish_ptr_reg != retx_table_start_ptr_reg) begin
+
+        if (retx_table_cpl_acked[retx_table_finish_ptr_reg & RETX_DESC_PTR_MASK]) begin
+
+            retx_table_finish_en = 1'b1;
+        end
+    end
+end
+
+
+always @(posedge clk) begin
+    // handle txe request
+    s_axis_txe_req_desc_ready_reg <= s_axis_txe_req_desc_ready_next;
+    m_axis_txe_resp_desc_valid_reg <= m_axis_txe_resp_desc_valid_next;
+    m_axis_txe_resp_desc_queue_reg <= m_axis_txe_resp_desc_queue_next;
+    m_axis_txe_resp_desc_tag_reg   <= m_axis_txe_resp_desc_tag_next;
+
+    if (retx_table_start_en) begin
+        retx_table_desc_txe_cpl_queue[retx_table_start_ptr_reg & RETX_DESC_PTR_MASK]    <= retx_table_start_cpl_queue;
+        retx_table_queue[retx_table_start_ptr_reg & RETX_DESC_PTR_MASK]                 <= retx_table_start_queue;
+        retx_table_queue_ptr[retx_table_start_ptr_reg & RETX_DESC_PTR_MASK]             <= retx_table_start_queue_ptr;
+        retx_table_dest[retx_table_start_ptr_reg & RETX_DESC_PTR_MASK]                  <= retx_table_start_dest;
+        retx_table_len[retx_table_start_ptr_reg & RETX_DESC_PTR_MASK]                   <= retx_table_start_len;
+        retx_table_desc_txe_tag[retx_table_start_ptr_reg & RETX_DESC_PTR_MASK]          <= retx_table_start_txe_tag;
+        retx_table_desc_tdata[retx_table_start_ptr_reg & RETX_DESC_PTR_MASK]            <= retx_table_start_desc_tdata;
+
+        // 
+        retx_table_tx_finished[retx_table_start_ptr_reg & RETX_DESC_PTR_MASK] <= 1'b0;
+        retx_table_is_transmitted[retx_table_start_ptr_reg & RETX_DESC_PTR_MASK] <= 1'b0;
+        retx_table_is_msg[retx_table_start_ptr_reg & RETX_DESC_PTR_MASK] <= 1'b0;
+        retx_table_msg_acked[retx_table_start_ptr_reg & RETX_DESC_PTR_MASK] <= 1'b0;
+        retx_table_msg_expired[retx_table_start_ptr_reg & RETX_DESC_PTR_MASK] <= 1'b0;
+        retx_table_cpl_acked[retx_table_start_ptr_reg & RETX_DESC_PTR_MASK] <= 1'b0;
+        retx_table_active[retx_table_start_ptr_reg & RETX_DESC_PTR_MASK] <= 1'b1;
+
+        retx_table_start_ptr_reg <= retx_table_start_ptr_reg+1;
+    end
+    // [end] handle txe request
+
+
+    if (retx_update_entry_en) begin
+        // update timeout
+        retx_table_desc_timeout_in_us[retx_update_entry_ptr & RETX_DESC_PTR_MASK] <= retx_time_in_us;
+
+        if (retx_update_entry_hard_timeout) begin
+            retx_table_desc_hardtimeout_in_us[retx_update_entry_ptr & RETX_DESC_PTR_MASK] <= retx_time_in_us;
+        end
+
+        retx_table_is_msg[retx_update_entry_ptr & RETX_DESC_PTR_MASK] <= retx_update_entry_is_msg;
+        retx_table_is_transmitted[retx_update_entry_ptr & RETX_DESC_PTR_MASK] <= 1'b1;
+    end
+
+
+    s_axis_tx_cpl_ready_reg <= s_axis_tx_cpl_ready_next;
+
+
+
+    // handle retx
+    if (retx_table_desc_expired_en) begin
+        retx_table_msg_expired[retx_table_desc_expired_ptr & RETX_DESC_PTR_MASK] <= 1'b1;
+    end
+
+    // CPL related
+    m_axis_cpl_req_queue_reg <= m_axis_cpl_req_queue_next;
+    m_axis_cpl_req_tag_reg   <= m_axis_cpl_req_tag_next;
+    m_axis_cpl_req_data_reg  <= m_axis_cpl_req_data_next;
+    m_axis_cpl_req_valid_reg <= m_axis_cpl_req_valid_next;
+    m_axis_tx_op_cpl_queue_reg <= m_axis_tx_op_cpl_queue_next;
+    m_axis_tx_op_cpl_valid_reg <= m_axis_tx_op_cpl_valid_next;
+
+    if (retx_table_finish_en) begin
+        retx_table_active[retx_table_finish_ptr_reg & RETX_DESC_PTR_MASK] <= 1'b0;
+        retx_table_finish_ptr_reg <= retx_table_finish_ptr_reg + 1;
+    end
+
+    if (retx_table_tx_finish_en) begin
+        retx_table_tx_finished[retx_table_tx_finish_ptr] <= 1'b1;
+        retx_table_ptp_ts[retx_table_tx_finish_ptr] <= retx_table_tx_finish_ts;
+    end
+
+    if (retx_table_cpl_enq_start_en) begin
+        retx_table_cpl_enq_start_ptr_reg <= retx_table_cpl_enq_start_ptr_reg+1;
+    end
+
+    if (retx_table_cpl_acked_en) begin
+        retx_table_cpl_acked[retx_table_cpl_acked_ptr & RETX_DESC_PTR_MASK] <= 1'b1;
+    end
+
+
+    // handle ACK from ingress
+    s_ingress_to_retx_ack_msg_id_reg <= s_ingress_to_retx_ack_msg_id;
+    s_ingress_to_retx_ack_msg_valid_reg <= s_ingress_to_retx_ack_msg_valid;
+    s_ingress_to_retx_ack_msg_off_reg <= s_ingress_to_retx_ack_msg_off;
+
+    if (retx_table_msg_acked_en) begin
+        retx_table_msg_acked[retx_table_msg_acked_ptr & RETX_DESC_PTR_MASK] <= 1'b1;
+    end
+
+    // hand retx
+    retx_op_ready_reg <= retx_op_ready_next;
+    retx_req_valid_reg <= retx_req_valid_next;
+    retx_req_ptr_reg <= retx_req_ptr_next;
+
+    m_axis_retx_desc_tvalid_reg <= m_axis_retx_desc_tvalid_next;
+    m_axis_retx_desc_tdata_reg <= m_axis_retx_desc_tdata_next;
+    m_axis_retx_desc_tag_reg <= m_axis_retx_desc_tag_next;
+
+    //
+    s_egress_to_retx_msg_ready_reg <= s_egress_to_retx_msg_ready_next;
+
+    // CAM insertion
+    cam_wr_en_reg   <= cam_wr_en_next;
+    cam_wr_data_reg <= cam_wr_data_next;
+    cam_wr_addr_reg <= cam_wr_addr_next;
+
+    // pipeline
+    op_txe_req_pipe_reg <= op_txe_req_pipe_next;
+    op_tx_cpl_req_pipe_reg <= op_tx_cpl_req_pipe_next;
+    op_retx_req_pipe_reg <= op_retx_req_pipe_next;
+    op_retx_update_msg_entry_pipe_reg <= op_retx_update_msg_entry_pipe_next;
+
+    for (i=0; i<PIPELINE; i=i+1) begin
+        ram_read_addr_pipe_reg[i]      <= ram_read_addr_pipe_next[i];
+        ram_read_desc_tdata_addr_pipe_reg[i] <= ram_read_desc_tdata_addr_pipe_next[i];
+
+        txe_req_desc_tag_reg[i]        <= txe_req_desc_tag_next[i];
+        txe_req_desc_cpl_queue_reg[i]  <= txe_req_desc_cpl_queue_next[i];
+        txe_req_desc_queue_reg[i]      <= txe_req_desc_queue_next[i];
+        txe_req_desc_queue_ptr_reg[i]  <= txe_req_desc_queue_ptr_next[i];
+        txe_req_desc_dest_reg[i]       <= txe_req_desc_dest_next[i];
+        txe_req_desc_len_reg[i]        <= txe_req_desc_len_next[i];
+        txe_req_desc_tdata_reg[i]      <= txe_req_desc_tdata_next[i];
+
+        retx_update_entry_msg_id_reg[i]         <= retx_update_entry_msg_id_next[i];
+        retx_update_entry_msg_offset_reg[i]     <= retx_update_entry_msg_offset_next[i];
+        retx_update_entry_is_msg_reg[i]         <= retx_update_entry_is_msg_next[i];
+        retx_update_entry_is_transmitted_reg[i] <= retx_update_entry_is_transmitted_next[i];
+        retx_update_entry_table_ptr_reg[i]      <= retx_update_entry_table_ptr_next[i];
+
+        retx_req_desc_ptr_reg[i]       <= retx_req_desc_ptr_next[i];
+    end
+
+    // pipeline read
+    ram_read_cpl_queue_reg      <= retx_table_desc_txe_cpl_queue[ram_read_addr];
+    ram_read_queue_reg          <= retx_table_queue[ram_read_addr];
+    ram_read_queue_ptr_reg      <= retx_table_queue_ptr[ram_read_addr];
+    ram_read_dest_reg           <= retx_table_dest[ram_read_addr];
+    ram_read_len_reg            <= retx_table_len[ram_read_addr];
+    ram_read_ts_reg             <= retx_table_ptp_ts[ram_read_addr];
+
+    ram_read_desc_tdata_reg     <= retx_table_desc_tdata[ram_read_desc_tdata_addr];
+    // ram_read_txe_tag_reg        <= retx_table_desc_txe_tag[ram_read_addr];
+
+    ram_read_cpl_queue_pipe_reg[1] <= ram_read_cpl_queue_reg;
+    ram_read_queue_pipe_reg[1] <= ram_read_queue_reg;
+    ram_read_queue_ptr_pipe_reg[1] <= ram_read_queue_ptr_reg;
+    ram_read_dest_pipe_reg[1] <= ram_read_dest_reg;
+    ram_read_len_pipe_reg[1] <= ram_read_len_reg;
+    ram_read_ts_pipe_reg[1] <= ram_read_ts_reg;
+
+    ram_read_desc_tdata_pipe_reg[1] <= ram_read_desc_tdata_reg;
+    // ram_read_is_msg_pipe_reg[1] <= ram_read_is_msg_reg;
+    // ram_read_txe_tag_pipe_reg[1] <= ram_read_txe_tag_reg;
+
+    for (i=2; i<PIPELINE; i=i+1) begin
+        ram_read_cpl_queue_pipe_reg[i] <= ram_read_cpl_queue_pipe_reg[i-1];
+        ram_read_queue_pipe_reg[i] <= ram_read_cpl_queue_pipe_reg[i-1];
+        ram_read_queue_ptr_pipe_reg[i] <= ram_read_queue_ptr_pipe_reg[i-1];
+        ram_read_dest_pipe_reg[i] <= ram_read_dest_pipe_reg[i-1];
+        ram_read_len_pipe_reg[i] <= ram_read_len_pipe_reg[i-1];
+        ram_read_ts_pipe_reg[i] <= ram_read_ts_pipe_reg[i-1];
+
+        ram_read_desc_tdata_pipe_reg[i] <= ram_read_desc_tdata_pipe_reg[i-1];
+        // ram_read_is_msg_pipe_reg[i] <= ram_read_is_msg_pipe_reg[i-1];
+        // ram_read_txe_tag_pipe_reg[i] <= ram_read_txe_tag_pipe_reg[i-1];
+    end
+
+    // reset initialization
+    if (rst) begin
+
+        retx_table_start_ptr_reg <= 0;
+        retx_table_cpl_enq_start_ptr_reg <= 0;
+        retx_table_finish_ptr_reg <= 0;
+        // handle txe request
+        s_axis_txe_req_desc_ready_reg <= 0;
+        m_axis_txe_resp_desc_valid_reg <= 0;
+        m_axis_txe_resp_desc_queue_reg <= 0;
+        m_axis_txe_resp_desc_tag_reg   <= 0;
+        // [end] handle txe request
+        // CPL related
+        m_axis_cpl_req_queue_reg <= 0;
+        m_axis_cpl_req_tag_reg   <= 0;
+        m_axis_cpl_req_data_reg  <= 0;
+        m_axis_cpl_req_valid_reg <= 0;
+        m_axis_tx_op_cpl_queue_reg <= 0;
+        m_axis_tx_op_cpl_valid_reg <= 0;
+
+        // table initialization
+        retx_table_active <= 0;
+        retx_table_cpl_acked <= 0;
+        retx_table_tx_finished <= 0;
+        retx_table_is_transmitted <= 0;
+        retx_table_is_msg <= 0;
+        retx_table_msg_acked <= 0;
+        retx_table_msg_expired <= 0;
+
+        s_axis_tx_cpl_ready_reg <= 0;
+
+        // handle ACK from ingress
+        s_ingress_to_retx_ack_msg_id_reg    <= 0;
+        s_ingress_to_retx_ack_msg_valid_reg <= 0;
+        s_ingress_to_retx_ack_msg_off_reg   <= 0;
+
+        // hand retx
+        retx_op_ready_reg <= 0;
+        retx_req_valid_reg <= 0;
+        retx_req_ptr_reg <= 0;
+
+        m_axis_retx_desc_tvalid_reg <= 0;
+        m_axis_retx_desc_tdata_reg <= 0;
+        m_axis_retx_desc_tag_reg <= 0;
+        //
+        s_egress_to_retx_msg_ready_reg <= 0;
+        //
+        cam_wr_en_reg   <= 0;
+        cam_wr_data_reg <= 0;
+        cam_wr_addr_reg <= 0;
+
+        // pipeline
+        op_txe_req_pipe_reg     <= 0;
+        op_tx_cpl_req_pipe_reg  <= 0;
+        op_retx_req_pipe_reg    <= 0;
+        op_retx_update_msg_entry_pipe_reg <= 0;
+
+        for (i=0; i<PIPELINE; i=i+1) begin
+            ram_read_addr_pipe_reg[i]      <= 0;
+            ram_read_desc_tdata_addr_pipe_reg[i] <= 0;
+
+            txe_req_desc_tag_reg[i]        <= 0;
+            txe_req_desc_cpl_queue_reg[i]  <= 0;
+            txe_req_desc_queue_reg[i]      <= 0;
+            txe_req_desc_queue_ptr_reg[i]  <= 0;
+            txe_req_desc_dest_reg[i]       <= 0;
+            txe_req_desc_len_reg[i]        <= 0;
+            txe_req_desc_tdata_reg[i]      <= 0;
+
+            retx_update_entry_msg_id_reg[i]         <= 0;
+            retx_update_entry_msg_offset_reg[i]     <= 0;
+            retx_update_entry_is_msg_reg[i]         <= 0;
+            retx_update_entry_is_transmitted_reg[i] <= 0;
+            retx_update_entry_table_ptr_reg[i]      <= 0;
+
+            retx_req_desc_ptr_reg[i]    <= 0;
+
+        end
+        for (i=0; i<PIPELINE; i=i+1) begin
+            ram_read_cpl_queue_pipe_reg[i]  <= 0;
+            ram_read_queue_pipe_reg[i]      <= 0;
+            ram_read_queue_ptr_pipe_reg[i]  <= 0;
+            ram_read_dest_pipe_reg[i]       <= 0;
+            ram_read_len_pipe_reg[i]        <= 0;
+            ram_read_ts_pipe_reg[i]         <= 0;
+
+            ram_read_desc_tdata_pipe_reg[i] <= 0;
+            // ram_read_is_msg_pipe_reg[i]     <= 0;
+            // ram_read_txe_tag_pipe_reg[i]    <= 0;
+        end
+    end
+end
+
+// handle RETX
+localparam US_CYCLE = 250;
+reg [7:0] cnt_cycle = 0;
+
+
+reg [CL_RETX_DESC_TABLE_SIZE-1:0] chk_retx_index_reg = 0, chk_retx_index_next;
+
+always @(*) begin
+
+    chk_retx_index_next = chk_retx_index_reg;
+
+    //
+    retx_table_desc_expired_en = 1'b0;
+    retx_table_desc_expired_ptr = chk_retx_index_reg;
+
+    // retx req
+    retx_req_ptr_next = retx_req_ptr_reg;
+    retx_req_valid_next = retx_req_valid_reg && !retx_op_ready_reg;
+
+    if (retx_table_active[chk_retx_index_reg]
+        && retx_table_is_msg[chk_retx_index_reg]
+        && !retx_table_msg_expired[chk_retx_index_reg]) begin
+        if ($unsigned(retx_time_in_us - retx_table_desc_hardtimeout_in_us[chk_retx_index_reg]) >= DEFAULT_HARD_TIMEOUT_US) begin
+            retx_table_desc_expired_en = 1'b1;
+            retx_table_desc_expired_ptr = chk_retx_index_reg;
+        end
+        else if (($unsigned(retx_time_in_us - retx_table_desc_timeout_in_us[chk_retx_index_reg]) >= DEFAULT_TIMEOUT_US)) begin
+            // need to retx
+            if (!retx_req_valid_reg || retx_op_ready) begin
+                retx_req_ptr_next = chk_retx_index_reg;
+                retx_req_valid_next = 1'b1;
+
+                chk_retx_index_next = (chk_retx_index_reg+1) & RETX_DESC_PTR_MASK;
+            end
+        end
+        else begin
+            // update timeout
+            // it will be updated when it enters RETX module again
+            // egress --> retx
+        end
+    end
+    else begin
+        chk_retx_index_next = (chk_retx_index_reg+1) & RETX_DESC_PTR_MASK;
+    end
+end
+
+always @(posedge clk) begin
+
+    retx_time_in_us <= retx_time_in_us + (cnt_cycle==US_CYCLE);
+
+    if (cnt_cycle < US_CYCLE) begin
+        cnt_cycle <= cnt_cycle+1;
+    end
+    else if (cnt_cycle == US_CYCLE) begin
+        cnt_cycle <= 0;
+    end
+
+    chk_retx_index_reg <= chk_retx_index_next;
+
+    if (rst) begin
+        retx_time_in_us <= 0;
+        cnt_cycle <= 0;
+        chk_retx_index_reg <= 0;
+    end
+end
+
+// handle CAM insertion
+
+cam_srl #(
+    .DATA_WIDTH(CAM_DATA_WIDTH),
+    .ADDR_WIDTH(CL_RETX_DESC_TABLE_SIZE)
+)
+cam_ins (
+    .clk            (clk),
+    .rst            (rst),
+
+    .write_addr     (cam_wr_addr_reg),
+    .write_data     (cam_wr_data_reg),
+    .write_delete   (1'b0),
+    .write_enable   (cam_wr_en_reg),
+    .write_busy     (cam_wr_busy),
+
+    .compare_data   ({s_ingress_to_retx_ack_msg_off[3:0], s_ingress_to_retx_ack_msg_id}),
+    .match_many     (),
+    .match_single   (),
+    .match_addr     (cam_match_addr),
+    .match          (cam_match)
+);
+
+endmodule
+
+`resetall
diff --color -burN ./corundum-rtl/rx_cpl.v ./hp-rtl/rx_cpl.v
--- ./corundum-rtl/rx_cpl.v	1969-12-31 19:00:00.000000000 -0500
+++ ./hp-rtl/rx_cpl.v	2024-09-12 17:14:43.149796023 -0400
@@ -0,0 +1,1447 @@
+`resetall
+`timescale 1ns / 1ps
+`default_nettype none
+
+
+// here, two things
+//      --> (1) desc req
+//      --> (2) dma data to host
+//      --> (3) cpl
+module rx_cpl #(
+    // parameters from RXE
+    parameter RXE_DESC_REQ_TAG_WIDTH = 8,
+    parameter DMA_CLIENT_LEN_WIDTH = 20,
+    parameter QUEUE_INDEX_WIDTH = 4,
+    parameter QUEUE_PTR_WIDTH = 8,
+    parameter CPL_QUEUE_INDEX_WIDTH = 16,
+    parameter CPL_REQ_TAG_WIDTH = 8,
+    parameter CPL_SIZE = 32,
+    parameter AXIS_DESC_DATA_WIDTH = 16*8,
+    parameter AXIS_DESC_KEEP_WIDTH = AXIS_DESC_DATA_WIDTH/8,
+    parameter AXIS_RX_ID_WIDTH = 1,
+    parameter PIPELINE = 3,
+    //
+    parameter RX_CPL_DESC_TABLE_SIZE = 1024,
+    parameter RX_CPL_DESC_REQ_TAG_WIDTH = $clog2(RX_CPL_DESC_TABLE_SIZE),
+    parameter MAX_RXCPL_REQ = 512,
+    parameter MSG_ID_WIDTH = 32,
+    parameter MSG_OFF_WIDTH = 8,
+    parameter TIMEOUT_WIDTH = 24
+)
+(
+    // req from RXE
+    input  wire                                         s_axis_rxe_req_valid,
+    input  wire [RXE_DESC_REQ_TAG_WIDTH-1:0]            s_axis_rxe_req_tag,       // ptr in desc_table
+    input  wire                                         s_axis_rxe_req_is_msg,
+    input  wire [MSG_ID_WIDTH-1:0]                      s_axis_rxe_req_msg_id,
+    input  wire [MSG_OFF_WIDTH-1:0]                     s_axis_rxe_req_msg_len,
+    input  wire [MSG_OFF_WIDTH-1:0]                     s_axis_rxe_req_msg_off,
+    output wire                                         s_axis_rxe_req_ready,
+    // resp to RXE
+    output wire [RX_CPL_DESC_REQ_TAG_WIDTH-1:0]         m_axis_rxcpl_resp_queue,
+    output wire [RXE_DESC_REQ_TAG_WIDTH-1:0]            m_axis_rxcpl_resp_tag,
+    output wire                                         m_axis_rxcpl_resp_valid,
+    output wire                                         m_axis_rxcpl_resp_desc_exist,
+    output wire                                         m_axis_rxcpl_resp_is_msg_exist,
+    output wire                                         m_axis_rxcpl_resp_desc_error,
+
+    // invalidate rxcpl entry
+    input  wire [RX_CPL_DESC_REQ_TAG_WIDTH-1:0]         s_axis_rxe_rxcpl_invalidate_index,
+    input  wire                                         s_axis_rxe_rxcpl_invalidate_valid,
+
+    // input desc info
+    input  wire [AXIS_DESC_DATA_WIDTH-1:0]              s_axis_rxe_rxcpl_update_desc_tdata,
+    input  wire [RXE_DESC_REQ_TAG_WIDTH-1:0]            s_axis_rxe_rxcpl_update_desc_index,
+    input  wire [RX_CPL_DESC_REQ_TAG_WIDTH-1:0]         s_axis_rxe_rxcpl_update_desc_tag,
+    input  wire [QUEUE_INDEX_WIDTH-1:0]                 s_axis_rxe_rxcpl_update_desc_queue,
+    input  wire [QUEUE_PTR_WIDTH-1:0]                   s_axis_rxe_rxcpl_update_desc_queue_ptr,
+    input  wire [AXIS_RX_ID_WIDTH-1:0]                  s_axis_rxe_rxcpl_update_desc_id,
+    input  wire                                         s_axis_rxe_rxcpl_update_desc_tvalid,
+    output wire                                         s_axis_rxe_rxcpl_update_desc_tready,
+
+    // desc update info resp
+    output wire [RXE_DESC_REQ_TAG_WIDTH-1:0]            m_axis_rxcpl_rxe_update_desc_resp_tag,
+    output wire                                         m_axis_rxcpl_rxe_update_desc_resp_valid,
+
+    // input req for desc info --> multi-packet msg
+    input  wire [RXE_DESC_REQ_TAG_WIDTH-1:0]            s_axis_rxe_rxcpl_req_desc_tag,
+    input  wire [RX_CPL_DESC_REQ_TAG_WIDTH-1:0]         s_axis_rxe_rxcpl_req_desc_queue,
+    input  wire                                         s_axis_rxe_rxcpl_req_desc_valid,
+    output wire                                         s_axis_rxe_rxcpl_req_desc_ready,
+
+    // resp desc info for DMA
+    output wire [RXE_DESC_REQ_TAG_WIDTH-1:0]            m_axis_rxcpl_rxe_resp_desc_tag,
+    output wire [AXIS_DESC_DATA_WIDTH-1:0]              m_axis_rxcpl_rxe_resp_desc_tdata,
+    output wire                                         m_axis_rxcpl_rxe_resp_desc_fetched,
+    output wire [QUEUE_INDEX_WIDTH-1:0]                 m_axis_rxcpl_rxe_resp_desc_queue,
+    output wire [QUEUE_PTR_WIDTH-1:0]                   m_axis_rxcpl_rxe_resp_desc_queue_ptr,
+    output wire [AXIS_RX_ID_WIDTH-1:0]                  m_axis_rxcpl_rxe_resp_desc_id,
+    output wire                                         m_axis_rxcpl_rxe_resp_desc_error,
+    output wire                                         m_axis_rxcpl_rxe_resp_desc_valid,
+
+    //
+    // cpl request from rxe
+    input  wire [CPL_QUEUE_INDEX_WIDTH-1:0]             s_axis_rxe_cpl_req_queue,
+    input  wire [CPL_REQ_TAG_WIDTH-1:0]                 s_axis_rxe_cpl_req_tag,
+    input  wire [CPL_REQ_TAG_WIDTH-1:0]                 s_axis_rxe_cpl_req_cpl_desc_ptr,
+    input  wire [CPL_SIZE*8-1:0]                        s_axis_rxe_cpl_req_data,
+    input  wire                                         s_axis_rxe_cpl_req_valid,
+    output wire                                         s_axis_rxe_cpl_req_ready,
+    input  wire [MSG_OFF_WIDTH-1:0]                     s_axis_rxe_cpl_req_msg_off,
+    input  wire [MSG_OFF_WIDTH-1:0]                     s_axis_rxe_cpl_req_msg_len,
+    input  wire                                         s_axis_rxe_cpl_req_is_msg,
+    input  wire                                         s_axis_rxe_cpl_req_is_msg_exist,
+    input  wire [RXE_DESC_REQ_TAG_WIDTH-1:0]            s_axis_rxe_cpl_req_desc_table_ptr,
+
+    // cpl request out
+    output wire [CPL_QUEUE_INDEX_WIDTH-1:0]             m_axis_cpl_req_queue,
+    output wire [CPL_REQ_TAG_WIDTH-1:0]                 m_axis_cpl_req_tag,
+    output wire [CPL_SIZE*8-1:0]                        m_axis_cpl_req_data,
+    output wire                                         m_axis_cpl_req_valid,
+    input  wire                                         m_axis_cpl_req_ready,
+
+    // cpl resp
+    input  wire [CPL_REQ_TAG_WIDTH-1:0]                 s_axis_cpl_req_status_tag,
+    input  wire                                         s_axis_cpl_req_status_full,
+    input  wire                                         s_axis_cpl_req_status_error,
+    input  wire                                         s_axis_cpl_req_status_valid,
+
+    // cpl complete resp to rxe
+    output wire [RXE_DESC_REQ_TAG_WIDTH-1:0]            m_axis_cpl_rxe_status_tag,
+    output wire                                         m_axis_cpl_rxe_status_valid,
+
+    input  wire [31:0]                                  rxcpl_hard_timeout_in_us,
+    //
+    input  wire             clk,
+    input  wire             rst,
+    input  wire             enable
+);
+
+parameter CL_CPL_DESC_TABLE_SIZE = $clog2(RX_CPL_DESC_TABLE_SIZE);
+parameter RXCPL_DESC_PTR_MASK = {CL_CPL_DESC_TABLE_SIZE{1'b1}};
+
+wire [1:0]                          to_rxe_cpl_fifo_ready;
+reg  [1:0] to_rxe_cpl_fifo_valid_reg, to_rxe_cpl_fifo_valid_next;
+reg [RXE_DESC_REQ_TAG_WIDTH-1:0]   to_rxe_cpl_fifo_rxe_ptr_reg[1:0], to_rxe_cpl_fifo_rxe_ptr_next[1:0];
+reg [CL_CPL_DESC_TABLE_SIZE-1:0]   to_rxe_cpl_fifo_rxcpl_ptr_reg[1:0], to_rxe_cpl_fifo_rxcpl_ptr_next[1:0];
+reg                                to_rxe_cpl_fifo_rdy_to_inact_reg[1:0], to_rxe_cpl_fifo_rdy_to_inact_next[1:0];
+
+wire [RXE_DESC_REQ_TAG_WIDTH-1:0]  arbiter_out_rxe_ptr;
+wire [CL_CPL_DESC_TABLE_SIZE-1:0]  arbiter_out_rxcpl_ptr;
+wire                               arbiter_out_rdy_to_inact;
+wire                               arbiter_out_which_q;
+wire arbiter_out_valid;
+reg arbiter_out_ready;
+
+// arbiter for both msg and non-msg packets
+two_q_arbiter #(
+    .FIFO_DEPTH(40),
+    .AXIS_DATA_WIDTH(RXE_DESC_REQ_TAG_WIDTH+CL_CPL_DESC_TABLE_SIZE+1+1),
+    .KEEP_ENABLE(0),
+    .LAST_ENABLE(0),
+    .ID_ENABLE(0),
+    .DEST_ENABLE(0),
+    .USER_ENABLE(0)
+) to_rxe_cpl
+(
+    .clk                (clk),
+    .rst                (rst),
+
+    .s_axis_tdata_0                 ({to_rxe_cpl_fifo_rxe_ptr_reg[0], to_rxe_cpl_fifo_rxcpl_ptr_reg[0], to_rxe_cpl_fifo_rdy_to_inact_reg[0], 1'b0}),
+    .s_axis_tkeep_0                 (0),
+    .s_axis_tvalid_0                (to_rxe_cpl_fifo_valid_reg[0]),
+    .s_axis_tready_0                (to_rxe_cpl_fifo_ready[0]),
+    .s_axis_tlast_0                 (0),
+    .s_axis_tid_0                   (0),
+    .s_axis_tuser_0                 (0),
+    .s_axis_tdest_0                 (0),
+
+    .s_axis_tdata_1                 ({to_rxe_cpl_fifo_rxe_ptr_reg[1], to_rxe_cpl_fifo_rxcpl_ptr_reg[1], to_rxe_cpl_fifo_rdy_to_inact_reg[1], 1'b1}),
+    .s_axis_tkeep_1                 (0),
+    .s_axis_tvalid_1                (to_rxe_cpl_fifo_valid_reg[1]),
+    .s_axis_tready_1                (to_rxe_cpl_fifo_ready[1]),
+    .s_axis_tlast_1                 (0),
+    .s_axis_tid_1                   (0),
+    .s_axis_tuser_1                 (0),
+    .s_axis_tdest_1                 (0),
+
+    .m_axis_tdata                   ({arbiter_out_rxe_ptr, arbiter_out_rxcpl_ptr, arbiter_out_rdy_to_inact, arbiter_out_which_q}),
+    .m_axis_tkeep                   (),
+    .m_axis_tvalid                  (arbiter_out_valid),
+    .m_axis_tready                  (arbiter_out_ready),
+    .m_axis_tlast                   (),
+    .m_axis_tid                     (),
+    .m_axis_tuser                   (),
+    .m_axis_tdest                   ()
+);
+
+// FIFO for CPL resp
+wire cpl_resp_fifo_in_tready;
+
+wire cpl_resp_fifo_out_tvalid;
+wire [CPL_REQ_TAG_WIDTH-1:0] cpl_resp_fifo_out_tag;
+reg  cpl_resp_fifo_out_tready;
+
+axis_fifo #(
+    .DEPTH(CPL_REQ_TAG_WIDTH * 40),
+    .DATA_WIDTH(CPL_REQ_TAG_WIDTH),
+    .KEEP_ENABLE(0),
+    .LAST_ENABLE(0),
+    .ID_ENABLE(0),
+    .DEST_ENABLE(0),
+    .USER_ENABLE(0),
+    // .PIPELINE_OUTPUT(1),
+    .FRAME_FIFO(0)
+) cpl_resp_fifo
+(
+    .clk        (clk),
+    .rst        (rst),
+
+    .s_axis_tdata           (s_axis_cpl_req_status_tag),
+    .s_axis_tkeep           (0),
+    .s_axis_tvalid          (s_axis_cpl_req_status_valid & cpl_resp_fifo_in_tready),
+    .s_axis_tready          (cpl_resp_fifo_in_tready),
+    .s_axis_tlast           (0),
+    .s_axis_tid             (0),
+    .s_axis_tdest           (0),
+    .s_axis_tuser           (0),
+
+    .m_axis_tdata           (cpl_resp_fifo_out_tag),
+    .m_axis_tkeep           (),
+    .m_axis_tvalid          (cpl_resp_fifo_out_tvalid),
+    .m_axis_tready          (cpl_resp_fifo_out_tready),
+    .m_axis_tlast           (),
+    .m_axis_tid             (),
+    .m_axis_tdest           (),
+    .m_axis_tuser           (),
+
+    .status_overflow    (),
+    .status_bad_frame   (),
+    .status_good_frame  ()
+);
+
+
+// desc table infos
+reg [RX_CPL_DESC_TABLE_SIZE-1:0]            desc_table_active = 0;
+reg [RX_CPL_DESC_TABLE_SIZE-1:0]            desc_table_invalid = 0;
+reg [RX_CPL_DESC_TABLE_SIZE-1:0]            desc_table_desc_fetched = 0;
+reg [RX_CPL_DESC_TABLE_SIZE-1:0]            desc_table_data_written = 0;
+reg [RX_CPL_DESC_TABLE_SIZE-1:0]            desc_table_is_msg = 0;
+reg [RX_CPL_DESC_TABLE_SIZE-1:0]            desc_table_msg_entry_expired = 0;
+reg [RXE_DESC_REQ_TAG_WIDTH-1:0]            desc_table_rxe_tag [RX_CPL_DESC_TABLE_SIZE-1:0];
+(* ram_style = "block" *)
+reg [AXIS_DESC_DATA_WIDTH-1:0]              desc_table_desc_tdata [RX_CPL_DESC_TABLE_SIZE-1:0];  // TODO: check the ram in the synth report
+reg [QUEUE_INDEX_WIDTH-1:0]                 desc_table_queue [RX_CPL_DESC_TABLE_SIZE-1:0];
+reg [QUEUE_PTR_WIDTH-1:0]                   desc_table_queue_ptr [RX_CPL_DESC_TABLE_SIZE-1:0];
+reg [AXIS_RX_ID_WIDTH-1:0]                  desc_table_id [RX_CPL_DESC_TABLE_SIZE-1:0];
+(* ram_style = "block" *)
+reg [MSG_OFF_WIDTH-1:0]                     desc_table_msg_len [RX_CPL_DESC_TABLE_SIZE-1:0];
+(* ram_style = "block" *)
+reg [DMA_CLIENT_LEN_WIDTH-1:0]              desc_table_dma_len [RX_CPL_DESC_TABLE_SIZE-1:0];
+// for inact rx entry due to hard timeout
+reg [QUEUE_INDEX_WIDTH-1:0]                 desc_table_inact_rx_entry_queue [RX_CPL_DESC_TABLE_SIZE-1:0];
+reg [QUEUE_PTR_WIDTH-1:0]                   desc_table_inact_rx_entry_queue_ptr [RX_CPL_DESC_TABLE_SIZE-1:0];
+reg [AXIS_RX_ID_WIDTH-1:0]                  desc_table_inact_rx_entry_id [RX_CPL_DESC_TABLE_SIZE-1:0];
+// timeout
+reg [TIMEOUT_WIDTH-1:0]                     desc_table_desc_timeout_in_us [RX_CPL_DESC_TABLE_SIZE-1:0];
+reg [TIMEOUT_WIDTH-1:0] timeout_in_us = 0;
+
+reg [CL_CPL_DESC_TABLE_SIZE:0]          desc_table_start_ptr_reg = 0, desc_table_finish_ptr_reg = 0;
+reg desc_table_finish_en;
+reg [CL_CPL_DESC_TABLE_SIZE-1:0] desc_table_data_written_ptr;
+reg desc_table_data_written_en;
+reg [CL_CPL_DESC_TABLE_SIZE:0]          active_rxcpl_cnt_reg = 0;
+reg inc_active_rxcpl_req, dec_active_rxcpl_req;
+reg s_axis_rxe_req_ready_reg = 0, s_axis_rxe_req_ready_next;
+
+reg m_axis_rxcpl_resp_valid_reg = 0, m_axis_rxcpl_resp_valid_next;
+reg m_axis_rxcpl_resp_is_msg_exist_reg = 0, m_axis_rxcpl_resp_is_msg_exist_next;
+reg m_axis_rxcpl_resp_desc_exist_reg = 0, m_axis_rxcpl_resp_desc_exist_next;
+reg m_axis_rxcpl_resp_desc_error_reg = 0, m_axis_rxcpl_resp_desc_error_next;
+reg [RXE_DESC_REQ_TAG_WIDTH-1:0] m_axis_rxcpl_resp_tag_reg = 0, m_axis_rxcpl_resp_tag_next;
+reg [RX_CPL_DESC_REQ_TAG_WIDTH-1:0] m_axis_rxcpl_resp_queue_reg = 0, m_axis_rxcpl_resp_queue_next;
+
+// invalidate rxcpl entry
+reg invalidate_entry_en;
+reg [CL_CPL_DESC_TABLE_SIZE-1:0] invalidate_entry_index;
+
+// expire rxcpl entry
+reg desc_table_msg_entry_expired_en;
+reg [CL_CPL_DESC_TABLE_SIZE-1:0] desc_table_msg_entry_expired_ptr;
+
+// update desc info tready
+reg s_axis_rxe_rxcpl_update_desc_tready_reg = 0, s_axis_rxe_rxcpl_update_desc_tready_next;
+// udpate desc info resp to RXE
+reg [RXE_DESC_REQ_TAG_WIDTH-1:0] m_axis_rxcpl_rxe_update_desc_resp_tag_reg = 0, m_axis_rxcpl_rxe_update_desc_resp_tag_next;
+reg m_axis_rxcpl_rxe_update_desc_resp_valid_reg = 0, m_axis_rxcpl_rxe_update_desc_resp_valid_next;
+
+assign s_axis_rxe_rxcpl_update_desc_tready = s_axis_rxe_rxcpl_update_desc_tready_reg;
+assign m_axis_rxcpl_rxe_update_desc_resp_valid = m_axis_rxcpl_rxe_update_desc_resp_valid_reg;
+assign m_axis_rxcpl_rxe_update_desc_resp_tag = m_axis_rxcpl_rxe_update_desc_resp_tag_reg;
+
+assign s_axis_rxe_req_ready = s_axis_rxe_req_ready_reg;
+assign m_axis_rxcpl_resp_valid = m_axis_rxcpl_resp_valid_reg;
+assign m_axis_rxcpl_resp_is_msg_exist = m_axis_rxcpl_resp_is_msg_exist_reg;
+assign m_axis_rxcpl_resp_desc_exist = m_axis_rxcpl_resp_desc_exist_reg;
+assign m_axis_rxcpl_resp_desc_error = m_axis_rxcpl_resp_desc_error_reg;
+assign m_axis_rxcpl_resp_tag = m_axis_rxcpl_resp_tag_reg;
+assign m_axis_rxcpl_resp_queue = m_axis_rxcpl_resp_queue_reg;
+
+// handle CPL req
+reg [CPL_QUEUE_INDEX_WIDTH-1:0]             m_axis_cpl_req_queue_reg = 0, m_axis_cpl_req_queue_next;
+reg [CPL_REQ_TAG_WIDTH-1:0]                 m_axis_cpl_req_tag_reg = 0, m_axis_cpl_req_tag_next;
+reg [CPL_SIZE*8-1:0]                        m_axis_cpl_req_data_reg = 0, m_axis_cpl_req_data_next;
+reg                                         m_axis_cpl_req_valid_reg = 0, m_axis_cpl_req_valid_next;
+
+assign m_axis_cpl_req_valid = m_axis_cpl_req_valid_reg;
+assign m_axis_cpl_req_tag = m_axis_cpl_req_tag_reg;
+assign m_axis_cpl_req_data = m_axis_cpl_req_data_reg;
+assign m_axis_cpl_req_queue = m_axis_cpl_req_queue_reg;
+
+
+reg [RXE_DESC_REQ_TAG_WIDTH-1:0]            m_axis_cpl_rxe_status_tag_reg = 0, m_axis_cpl_rxe_status_tag_next;
+reg                                         m_axis_cpl_rxe_status_valid_reg = 0, m_axis_cpl_rxe_status_valid_next;
+
+assign m_axis_cpl_rxe_status_tag = m_axis_cpl_rxe_status_tag_reg;
+assign m_axis_cpl_rxe_status_valid = m_axis_cpl_rxe_status_valid_reg;
+
+reg [RXE_DESC_REQ_TAG_WIDTH-1:0]    m_axis_rxcpl_rxe_resp_desc_tag_reg = 0, m_axis_rxcpl_rxe_resp_desc_tag_next;
+reg [AXIS_DESC_DATA_WIDTH-1:0]      m_axis_rxcpl_rxe_resp_desc_tdata_reg = 0, m_axis_rxcpl_rxe_resp_desc_tdata_next;
+reg                                 m_axis_rxcpl_rxe_resp_desc_fetched_reg = 0, m_axis_rxcpl_rxe_resp_desc_fetched_next;
+reg [QUEUE_INDEX_WIDTH-1:0]         m_axis_rxcpl_rxe_resp_desc_queue_reg = 0, m_axis_rxcpl_rxe_resp_desc_queue_next;
+reg [QUEUE_PTR_WIDTH-1:0]           m_axis_rxcpl_rxe_resp_desc_queue_ptr_reg = 0, m_axis_rxcpl_rxe_resp_desc_queue_ptr_next;
+reg [AXIS_RX_ID_WIDTH-1:0]          m_axis_rxcpl_rxe_resp_desc_id_reg = 0, m_axis_rxcpl_rxe_resp_desc_id_next;
+reg                                 m_axis_rxcpl_rxe_resp_desc_error_reg = 0, m_axis_rxcpl_rxe_resp_desc_error_next;
+reg                                 m_axis_rxcpl_rxe_resp_desc_valid_reg = 0, m_axis_rxcpl_rxe_resp_desc_valid_next;
+reg                                 s_axis_rxe_rxcpl_req_desc_ready_reg = 0, s_axis_rxe_rxcpl_req_desc_ready_next;
+
+assign m_axis_rxcpl_rxe_resp_desc_tag = m_axis_rxcpl_rxe_resp_desc_tag_reg;
+assign m_axis_rxcpl_rxe_resp_desc_tdata = m_axis_rxcpl_rxe_resp_desc_tdata_reg;
+assign m_axis_rxcpl_rxe_resp_desc_fetched = m_axis_rxcpl_rxe_resp_desc_fetched_reg;
+assign m_axis_rxcpl_rxe_resp_desc_queue = m_axis_rxcpl_rxe_resp_desc_queue_reg;
+assign m_axis_rxcpl_rxe_resp_desc_queue_ptr = m_axis_rxcpl_rxe_resp_desc_queue_ptr_reg;
+assign m_axis_rxcpl_rxe_resp_desc_id = m_axis_rxcpl_rxe_resp_desc_id_reg;
+assign m_axis_rxcpl_rxe_resp_desc_error = m_axis_rxcpl_rxe_resp_desc_error_reg;
+assign m_axis_rxcpl_rxe_resp_desc_valid = m_axis_rxcpl_rxe_resp_desc_valid_reg;
+assign s_axis_rxe_rxcpl_req_desc_ready = s_axis_rxe_rxcpl_req_desc_ready_reg;
+//
+
+
+reg [RXE_DESC_REQ_TAG_WIDTH-1:0]        desc_table_start_rxe_req_tag;
+reg [MSG_OFF_WIDTH-1:0]                 desc_table_start_msg_len;
+reg                                     desc_table_start_is_msg;
+reg                                     desc_table_start_en;
+// reg [CL_CPL_DESC_TABLE_SIZE-1:0]        desc_table_inactivate_ptr;
+// reg                                     inactivate_en;
+
+// reg [CL_CPL_DESC_TABLE_SIZE-1:0]        desc_table_is_ongoing_op_ptr;
+// reg                                     desc_table_is_ongoing_op_en;
+
+reg [CL_CPL_DESC_TABLE_SIZE-1:0]        desc_table_is_ongoing_inact_op_ptr;
+reg                                     desc_table_is_ongoing_inact_op_en;
+
+wire invalidate_rx_msg_entry_valid;
+wire [CL_CPL_DESC_TABLE_SIZE-1:0] invalidate_rx_msg_entry_ptr;
+reg invalidate_rx_msg_entry_valid_reg = 0, invalidate_rx_msg_entry_valid_next;
+reg [CL_CPL_DESC_TABLE_SIZE-1:0] invalidate_rx_msg_entry_ptr_reg = 0, invalidate_rx_msg_entry_ptr_next;
+
+assign invalidate_rx_msg_entry_valid = invalidate_rx_msg_entry_valid_reg;
+assign invalidate_rx_msg_entry_ptr = invalidate_rx_msg_entry_ptr_reg;
+
+wire invalidate_rx_msg_cpl_ready;
+reg invalidate_rx_msg_cpl_ready_reg = 0, invalidate_rx_msg_cpl_ready_next;
+
+assign invalidate_rx_msg_cpl_ready = invalidate_rx_msg_cpl_ready_reg;
+
+// update msg len
+reg                                     desc_table_update_msg_len_en;
+reg [MSG_OFF_WIDTH-1:0]                 desc_table_update_msg_len;
+reg [DMA_CLIENT_LEN_WIDTH-1:0]          desc_table_update_dma_len;
+reg [CL_CPL_DESC_TABLE_SIZE-1:0]        desc_table_update_msg_len_ptr;
+
+// update
+reg [CL_CPL_DESC_TABLE_SIZE-1:0]        desc_table_update_desc_ptr;
+reg [AXIS_DESC_DATA_WIDTH-1:0]          desc_table_update_desc_tdata;
+reg [QUEUE_INDEX_WIDTH-1:0]             desc_table_update_desc_queue;
+reg [QUEUE_PTR_WIDTH-1:0]               desc_table_update_desc_queue_ptr;
+reg [AXIS_RX_ID_WIDTH-1:0]              desc_table_update_desc_id;
+reg                                     desc_table_update_en;
+
+// pipeline registers
+reg op_update_desc_info_pipe_hazard;
+reg op_read_desc_info_pipe_hazard;
+reg op_rxe_cpl_req_pipe_hazard;
+reg stage_active;
+
+reg [PIPELINE-1:0] op_rxe_req_pipe_reg = {PIPELINE{1'b0}}, op_rxe_req_pipe_next;
+reg [PIPELINE-1:0] op_update_desc_info_pipe_reg = {PIPELINE{1'b0}}, op_update_desc_info_pipe_next;
+reg [PIPELINE-1:0] op_read_desc_info_pipe_reg = {PIPELINE{1'b0}}, op_read_desc_info_pipe_next;
+reg [PIPELINE-1:0] op_rxe_cpl_req_pipe_reg = {PIPELINE{1'b0}}, op_rxe_cpl_req_pipe_next;
+reg [PIPELINE-1:0] op_rxe_cpl_resp_pipe_reg = {PIPELINE{1'b0}}, op_rxe_cpl_resp_pipe_next;
+
+reg [RXE_DESC_REQ_TAG_WIDTH-1:0] rxe_req_tag_pipe_reg[PIPELINE-1:0], rxe_req_tag_pipe_next[PIPELINE-1:0];
+reg rxe_req_is_msg_pipe_reg[PIPELINE-1:0], rxe_req_is_msg_pipe_next[PIPELINE-1:0];
+reg [MSG_ID_WIDTH-1:0] rxe_req_msg_id_pipe_reg[PIPELINE-1:0], rxe_req_msg_id_pipe_next[PIPELINE-1:0];
+reg [MSG_OFF_WIDTH-1:0] rxe_req_msg_len_pipe_reg[PIPELINE-1:0], rxe_req_msg_len_pipe_next[PIPELINE-1:0];
+reg [MSG_OFF_WIDTH-1:0] rxe_req_msg_off_pipe_reg[PIPELINE-1:0], rxe_req_msg_off_pipe_next[PIPELINE-1:0];
+
+reg [AXIS_DESC_DATA_WIDTH-1:0] update_desc_info_tdata_reg[PIPELINE-1:0], update_desc_info_tdata_next[PIPELINE-1:0];
+reg [RX_CPL_DESC_REQ_TAG_WIDTH-1:0] update_desc_info_tag_reg[PIPELINE-1:0], update_desc_info_tag_next[PIPELINE-1:0];
+reg [RXE_DESC_REQ_TAG_WIDTH-1:0] update_desc_info_index_reg[PIPELINE-1:0], update_desc_info_index_next[PIPELINE-1:0];
+reg [QUEUE_INDEX_WIDTH-1:0] update_desc_info_queue_reg[PIPELINE-1:0], update_desc_info_queue_next[PIPELINE-1:0];
+reg [QUEUE_PTR_WIDTH-1:0] update_desc_info_queue_ptr_reg[PIPELINE-1:0], update_desc_info_queue_ptr_next[PIPELINE-1:0];
+reg [AXIS_RX_ID_WIDTH-1:0] update_desc_info_id_reg[PIPELINE-1:0], update_desc_info_id_next[PIPELINE-1:0];
+
+reg [RXE_DESC_REQ_TAG_WIDTH-1:0] read_desc_info_tag_reg[PIPELINE-1:0], read_desc_info_tag_next[PIPELINE-1:0];
+reg [RX_CPL_DESC_REQ_TAG_WIDTH-1:0] read_desc_info_queue_reg[PIPELINE-1:0], read_desc_info_queue_next[PIPELINE-1:0];
+reg read_desc_info_desc_fetched_reg[PIPELINE-1:0], read_desc_info_desc_fetched_next[PIPELINE-1:0];
+reg read_desc_info_desc_error_reg[PIPELINE-1:0], read_desc_info_desc_error_next[PIPELINE-1:0];
+
+reg rxe_cpl_type_reg[PIPELINE-1:0], rxe_cpl_type_next[PIPELINE-1:0];
+reg [CPL_QUEUE_INDEX_WIDTH-1:0] rxe_cpl_req_queue_reg[PIPELINE-1:0], rxe_cpl_req_queue_next[PIPELINE-1:0];
+reg [CPL_REQ_TAG_WIDTH-1:0] rxe_cpl_req_tag_reg[PIPELINE-1:0], rxe_cpl_req_tag_next[PIPELINE-1:0];
+reg [CPL_SIZE*8-1:0] rxe_cpl_req_data_reg[PIPELINE-1:0], rxe_cpl_req_data_next[PIPELINE-1:0];
+reg [MSG_OFF_WIDTH-1:0] rxe_cpl_req_msg_off_reg[PIPELINE-1:0], rxe_cpl_req_msg_off_next[PIPELINE-1:0];
+reg [MSG_OFF_WIDTH-1:0] rxe_cpl_req_msg_len_reg[PIPELINE-1:0], rxe_cpl_req_msg_len_next[PIPELINE-1:0];
+reg rxe_cpl_req_is_msg_reg[PIPELINE-1:0], rxe_cpl_req_is_msg_next[PIPELINE-1:0];
+reg rxe_cpl_req_is_msg_exist_reg[PIPELINE-1:0], rxe_cpl_req_is_msg_exist_next[PIPELINE-1:0];
+reg [RXE_DESC_REQ_TAG_WIDTH-1:0] rxe_cpl_req_desc_table_ptr_reg[PIPELINE-1:0], rxe_cpl_req_desc_table_ptr_next[PIPELINE-1:0];
+
+
+reg [CPL_REQ_TAG_WIDTH-1:0] rxe_cpl_resp_tag_reg[PIPELINE-1:0], rxe_cpl_resp_tag_next[PIPELINE-1:0];
+// read from RAM
+reg [CL_CPL_DESC_TABLE_SIZE-1:0] ram_read_addr, ram_read_desc_info_addr, ram_read_desc_tag_addr, ram_read_desc_info_for_inact_desc_addr;
+reg [CL_CPL_DESC_TABLE_SIZE-1:0] ram_read_addr_pipe_reg[PIPELINE-1:0], ram_read_addr_pipe_next[PIPELINE-1:0];
+
+(* shreg_extract = "no" *) reg [AXIS_DESC_DATA_WIDTH-1:0] ram_read_tdata_reg = 0, ram_read_tdata_pipe_reg[PIPELINE-1:0];
+
+reg ram_read_fetched_reg = 0, ram_read_fetched_pipe_reg[PIPELINE-1:0];
+reg [QUEUE_INDEX_WIDTH-1:0] ram_read_queue_reg = 0, ram_read_queue_pipe_reg[PIPELINE-1:0];
+reg [QUEUE_PTR_WIDTH-1:0] ram_read_queue_ptr_reg = 0, ram_read_queue_ptr_pipe_reg[PIPELINE-1:0];
+reg [AXIS_RX_ID_WIDTH-1:0] ram_read_id_reg = 0, ram_read_id_pipe_reg[PIPELINE-1:0];
+reg ram_read_msg_expired_reg = 0, ram_read_msg_expired_pipe_reg[PIPELINE-1:0];
+
+reg [QUEUE_INDEX_WIDTH-1:0] ram_read_for_inact_rx_entry_queue_reg = 0, ram_read_for_inact_rx_entry_queue_pipe_reg[PIPELINE-1:0];
+reg [QUEUE_PTR_WIDTH-1:0] ram_read_for_inact_rx_entry_queue_ptr_reg = 0, ram_read_for_inact_rx_entry_queue_ptr_pipe_reg[PIPELINE-1:0];
+reg [AXIS_RX_ID_WIDTH-1:0] ram_read_for_inact_rx_entry_id_reg = 0, ram_read_for_inact_rx_entry_id_pipe_reg[PIPELINE-1:0];
+
+reg [DMA_CLIENT_LEN_WIDTH-1:0] ram_read_dma_len_reg = 0, ram_read_dma_len_pipe_reg[PIPELINE-1:0];
+reg [MSG_OFF_WIDTH-1:0] ram_read_msg_len_reg = 0, ram_read_msg_len_pipe_reg[PIPELINE-1:0];
+
+reg [RXE_DESC_REQ_TAG_WIDTH-1:0] ram_read_tag_reg = 0, ram_read_tag_pipe_reg[PIPELINE-1:0];
+
+// CAM-related
+localparam CAM_DATA_WDITH = MSG_ID_WIDTH;
+// write side
+reg  [CAM_DATA_WDITH-1:0] cam_wr_data_reg, cam_wr_data_next;
+reg  [CL_CPL_DESC_TABLE_SIZE-1:0] cam_wr_addr_reg, cam_wr_addr_next;
+reg  cam_wr_en_reg, cam_wr_en_next;
+wire cam_wr_busy;
+
+// read side
+wire cam_match;
+wire [CL_CPL_DESC_TABLE_SIZE-1:0] cam_match_addr;
+reg  [PIPELINE-1:0]cam_match_pipe_reg, cam_match_pipe_next;
+reg  [CL_CPL_DESC_TABLE_SIZE-1:0] cam_match_addr_reg;
+
+wire [MSG_ID_WIDTH-1:0] cam_compare_data;
+// [DONE] CAM
+
+integer i, j;
+
+assign cam_compare_data = rxe_req_msg_id_pipe_reg[0];
+
+// initialization
+initial begin
+    for (i=0; i<RX_CPL_DESC_TABLE_SIZE; i=i+1) begin
+        // TODO: initialize all tables
+        desc_table_rxe_tag [i] = 0;     // TODO: we may have this as pipeline structure, output
+        desc_table_desc_tdata [i] = 0;  // TODO: check the ram in the synth report
+        desc_table_queue [i] = 0;
+        desc_table_queue_ptr [i] = 0;
+        desc_table_id [i] = 0;
+        desc_table_msg_len [i] = 0;
+        desc_table_dma_len [i] = 0;
+
+        desc_table_inact_rx_entry_queue [i] = 0;
+        desc_table_inact_rx_entry_queue_ptr [i] = 0;
+        desc_table_inact_rx_entry_id [i] = 0;
+
+        desc_table_desc_timeout_in_us [i] = 0;
+    end
+end
+
+// wire connection
+reg s_axis_rxe_cpl_req_ready_reg = 0, s_axis_rxe_cpl_req_ready_next;
+assign s_axis_rxe_cpl_req_ready = s_axis_rxe_cpl_req_ready_reg;
+
+reg  cpl_rxe_status_desc_table_active_reg = 0;
+wire cpl_rxe_status_desc_table_active;
+assign cpl_rxe_status_desc_table_active = desc_table_active[arbiter_out_rxcpl_ptr & RXCPL_DESC_PTR_MASK];
+
+// process CPL
+wire [7:0]  w_desc_table_msg_len;
+wire [7:0]  w_full_msg_len;
+wire [7:0]  w_curr_msg_off;
+wire [7:0]  w_remaining_msg_off;
+wire [7:0]  w_curr_recv_msg;
+wire        w_is_curr_msg_seg_recved;
+
+assign w_desc_table_msg_len = ram_read_msg_len_pipe_reg[PIPELINE-1];
+assign w_full_msg_len = (8'b1<<rxe_cpl_req_msg_len_reg[PIPELINE-1])-1;
+assign w_curr_msg_off = (8'b1<<rxe_cpl_req_msg_off_reg[PIPELINE-1]);
+assign w_curr_recv_msg = w_full_msg_len ^ w_curr_msg_off;
+assign w_is_curr_msg_seg_recved = w_desc_table_msg_len==0?0:!(w_desc_table_msg_len & w_curr_msg_off);
+assign w_remaining_msg_off= w_desc_table_msg_len==0? w_full_msg_len^w_curr_msg_off
+                                : (w_is_curr_msg_seg_recved==0? w_desc_table_msg_len & w_curr_recv_msg
+                                : w_desc_table_msg_len);
+
+always @(*) begin
+
+    inc_active_rxcpl_req = 1'b0;
+    dec_active_rxcpl_req = 1'b0;
+    //
+    desc_table_start_en = 1'b0;
+    desc_table_start_rxe_req_tag = 0;
+    desc_table_start_msg_len = 0;
+    desc_table_start_is_msg = 0;
+    //
+    invalidate_entry_en = 1'b0;
+    invalidate_entry_index = s_axis_rxe_rxcpl_invalidate_index & RXCPL_DESC_PTR_MASK;
+    //
+    desc_table_msg_entry_expired_en = 1'b0;
+    desc_table_msg_entry_expired_ptr = 0;
+
+    // desc_table_is_ongoing_op_en = 1'b0;
+    // desc_table_is_ongoing_op_ptr = 0;
+    desc_table_is_ongoing_inact_op_en = 1'b0;
+    desc_table_is_ongoing_inact_op_ptr = 0;
+
+    invalidate_rx_msg_cpl_ready_next = 1'b0;
+
+    // rxcpl response
+    s_axis_rxe_req_ready_next = 1'b0;
+
+    s_axis_rxe_rxcpl_req_desc_ready_next = 1'b0;
+    m_axis_rxcpl_resp_valid_next = 1'b0;
+    m_axis_rxcpl_resp_is_msg_exist_next = 1'b0;
+    m_axis_rxcpl_resp_desc_exist_next = 1'b0;
+    m_axis_rxcpl_resp_desc_error_next = 1'b0;
+    m_axis_rxcpl_resp_queue_next = m_axis_rxcpl_resp_queue_reg;
+    m_axis_rxcpl_resp_tag_next = m_axis_rxcpl_resp_tag_reg;
+
+    // update desc info
+    s_axis_rxe_rxcpl_update_desc_tready_next = 1'b0;
+    // resp
+    m_axis_rxcpl_rxe_update_desc_resp_valid_next = 1'b0;
+    m_axis_rxcpl_rxe_update_desc_resp_tag_next = 0;
+
+    // handle CPL
+    s_axis_rxe_cpl_req_ready_next = 1'b0;
+    m_axis_cpl_req_valid_next = m_axis_cpl_req_valid_reg & !m_axis_cpl_req_ready;
+    m_axis_cpl_req_data_next  = m_axis_cpl_req_data_reg;
+    m_axis_cpl_req_queue_next = m_axis_cpl_req_queue_reg;
+    m_axis_cpl_req_tag_next   = m_axis_cpl_req_tag_reg;
+
+    m_axis_cpl_rxe_status_valid_next = 1'b0;
+    m_axis_cpl_rxe_status_tag_next = m_axis_cpl_rxe_status_tag_reg;
+
+
+    cpl_resp_fifo_out_tready = 1'b0;
+    //
+    desc_table_update_msg_len_en = 1'b0;
+    desc_table_update_msg_len = 0;
+    desc_table_update_dma_len = 0;
+    desc_table_update_msg_len_ptr = s_axis_rxe_cpl_req_tag & RXCPL_DESC_PTR_MASK;
+
+    //
+    desc_table_update_desc_ptr = s_axis_rxe_rxcpl_update_desc_tag & RXCPL_DESC_PTR_MASK;
+    desc_table_update_desc_tdata = 0;
+    desc_table_update_desc_queue = 0;
+    desc_table_update_desc_queue_ptr = 0;
+    desc_table_update_desc_id = 0;
+    desc_table_update_en = 1'b0;
+
+    //
+    m_axis_rxcpl_rxe_resp_desc_tag_next         = m_axis_rxcpl_rxe_resp_desc_tag_reg;
+    m_axis_rxcpl_rxe_resp_desc_fetched_next     = m_axis_rxcpl_rxe_resp_desc_fetched_reg;
+    m_axis_rxcpl_rxe_resp_desc_tdata_next       = m_axis_rxcpl_rxe_resp_desc_tdata_reg;
+    m_axis_rxcpl_rxe_resp_desc_queue_next       = m_axis_rxcpl_rxe_resp_desc_queue_reg;
+    m_axis_rxcpl_rxe_resp_desc_queue_ptr_next   = m_axis_rxcpl_rxe_resp_desc_queue_ptr_reg;
+    m_axis_rxcpl_rxe_resp_desc_id_next          = m_axis_rxcpl_rxe_resp_desc_id_reg;
+    m_axis_rxcpl_rxe_resp_desc_error_next       = m_axis_rxcpl_rxe_resp_desc_error_reg;
+    m_axis_rxcpl_rxe_resp_desc_valid_next       = 1'b0;
+
+
+    //
+    desc_table_finish_en = 1'b0;
+
+    desc_table_data_written_en = 1'b0;
+    desc_table_data_written_ptr = 0;
+
+    // free descs in RXE
+    arbiter_out_ready = 1'b0;
+
+    to_rxe_cpl_fifo_valid_next[0] = 1'b0;
+    to_rxe_cpl_fifo_valid_next[1] = 1'b0;
+
+    to_rxe_cpl_fifo_rxe_ptr_next[0]      = to_rxe_cpl_fifo_rxe_ptr_reg[0];
+    to_rxe_cpl_fifo_rxe_ptr_next[1]      = to_rxe_cpl_fifo_rxe_ptr_reg[1];
+    to_rxe_cpl_fifo_rxcpl_ptr_next[0]    = to_rxe_cpl_fifo_rxcpl_ptr_reg[0];
+    to_rxe_cpl_fifo_rxcpl_ptr_next[1]    = to_rxe_cpl_fifo_rxcpl_ptr_reg[1];
+    to_rxe_cpl_fifo_rdy_to_inact_next[0] = 1'b0;
+    to_rxe_cpl_fifo_rdy_to_inact_next[1] = 1'b0;
+
+    // pipeline 
+    op_rxe_req_pipe_next = {op_rxe_req_pipe_reg, 1'b0};
+    op_update_desc_info_pipe_next = {op_update_desc_info_pipe_reg, 1'b0};
+    op_read_desc_info_pipe_next = {op_read_desc_info_pipe_reg, 1'b0};
+    op_rxe_cpl_req_pipe_next = {op_rxe_cpl_req_pipe_reg, 1'b0};
+    op_rxe_cpl_resp_pipe_next = {op_rxe_cpl_resp_pipe_reg, 1'b0};
+
+    rxe_req_tag_pipe_next[0] = 0;
+    rxe_req_is_msg_pipe_next[0] = 0;
+    rxe_req_msg_id_pipe_next[0] = 0;
+    rxe_req_msg_len_pipe_next[0] = 0;
+    rxe_req_msg_off_pipe_next[0] = 0;
+
+    update_desc_info_tdata_next[0] = 0;
+    update_desc_info_tag_next[0] = 0;
+    update_desc_info_index_next[0] = 0;
+    update_desc_info_queue_next[0] = 0;
+    update_desc_info_queue_ptr_next[0] = 0;
+    update_desc_info_id_next[0] = 0;
+
+    rxe_cpl_type_next[0]                 = 0;
+    rxe_cpl_req_queue_next[0]            = 0;
+    rxe_cpl_req_tag_next[0]              = 0;
+    rxe_cpl_req_data_next[0]             = 0;
+    rxe_cpl_req_msg_off_next[0]          = 0;
+    rxe_cpl_req_msg_len_next[0]          = 0;
+    rxe_cpl_req_is_msg_next[0]           = 0;
+    rxe_cpl_req_is_msg_exist_next[0]     = 0;
+    rxe_cpl_req_desc_table_ptr_next[0]   = 0;
+
+    rxe_cpl_resp_tag_next[0] = 0;
+
+    ram_read_addr = 0;
+    ram_read_desc_info_addr = 0;
+    ram_read_desc_tag_addr = 0;
+    ram_read_desc_info_for_inact_desc_addr = 0;
+
+    ram_read_addr_pipe_next[0] = 0;
+    read_desc_info_tag_next[0] = 0;
+    read_desc_info_queue_next[0] = 0;
+    read_desc_info_desc_fetched_next[0] = 0;
+    read_desc_info_desc_error_next[0] = 0;
+    for (j=1; j<PIPELINE; j=j+1) begin
+        ram_read_addr_pipe_next[j] = ram_read_addr_pipe_reg[j-1];
+        rxe_req_tag_pipe_next[j] = rxe_req_tag_pipe_reg[j-1];
+        rxe_req_is_msg_pipe_next[j] = rxe_req_is_msg_pipe_reg[j-1];
+        rxe_req_msg_id_pipe_next[j] = rxe_req_msg_id_pipe_reg[j-1];
+        rxe_req_msg_len_pipe_next[j] = rxe_req_msg_len_pipe_reg[j-1];
+        rxe_req_msg_off_pipe_next[j] = rxe_req_msg_off_pipe_reg[j-1];
+
+        update_desc_info_tdata_next[j] = update_desc_info_tdata_reg[j-1];
+        update_desc_info_tag_next[j] = update_desc_info_tag_reg[j-1];
+        update_desc_info_index_next[j] = update_desc_info_index_reg[j-1];
+        update_desc_info_queue_next[j] = update_desc_info_queue_reg[j-1];
+        update_desc_info_queue_ptr_next[j] = update_desc_info_queue_ptr_reg[j-1];
+        update_desc_info_id_next[j] = update_desc_info_id_reg[j-1];
+
+        read_desc_info_tag_next[j] = read_desc_info_tag_reg[j-1];
+        read_desc_info_queue_next[j] = read_desc_info_queue_reg[j-1];
+        read_desc_info_desc_fetched_next[j] = read_desc_info_desc_fetched_reg[j-1];
+        read_desc_info_desc_error_next[j] = read_desc_info_desc_error_reg[j-1];
+
+        rxe_cpl_type_next[j]                 = rxe_cpl_type_reg[j-1];
+        rxe_cpl_req_queue_next[j]            = rxe_cpl_req_queue_reg[j-1];
+        rxe_cpl_req_tag_next[j]              = rxe_cpl_req_tag_reg[j-1];
+        rxe_cpl_req_data_next[j]             = rxe_cpl_req_data_reg[j-1];
+        rxe_cpl_req_msg_off_next[j]          = rxe_cpl_req_msg_off_reg[j-1];
+        rxe_cpl_req_msg_len_next[j]          = rxe_cpl_req_msg_len_reg[j-1];
+        rxe_cpl_req_is_msg_next[j]           = rxe_cpl_req_is_msg_reg[j-1];
+        rxe_cpl_req_is_msg_exist_next[j]     = rxe_cpl_req_is_msg_exist_reg[j-1];
+        rxe_cpl_req_desc_table_ptr_next[j]   = rxe_cpl_req_desc_table_ptr_reg[j-1];
+
+        rxe_cpl_resp_tag_next[j] = rxe_cpl_resp_tag_reg[j-1];
+    end
+
+
+    cam_match_pipe_next[0] = cam_match;
+    for (j=1; j<PIPELINE; j=j+1) begin
+        cam_match_pipe_next[j] = cam_match_pipe_reg[j-1];
+    end
+
+    op_update_desc_info_pipe_hazard = 1'b0;
+    op_read_desc_info_pipe_hazard = 1'b0;
+    op_rxe_cpl_req_pipe_hazard = 1'b0;
+    stage_active = 1'b0;
+
+    for (j=0; j<PIPELINE; j=j+1) begin
+        stage_active = op_update_desc_info_pipe_reg[j] || op_read_desc_info_pipe_reg[j]
+                        || op_rxe_cpl_req_pipe_reg[j];
+        // op_update_desc_info_pipe_hazard = op_update_desc_info_pipe_hazard
+        //                             || (stage_active && ram_read_addr_pipe_reg[j] == (s_axis_rxe_rxcpl_update_desc_tag&RXCPL_DESC_PTR_MASK));
+        // op_read_desc_info_pipe_hazard = op_read_desc_info_pipe_hazard
+        //                             || (stage_active && ram_read_addr_pipe_reg[j] == (s_axis_rxe_rxcpl_req_desc_queue&RXCPL_DESC_PTR_MASK));
+        // op_rxe_cpl_req_pipe_hazard = op_rxe_cpl_req_pipe_hazard
+        //                             || (stage_active && ram_read_addr_pipe_reg[j] == (s_axis_rxe_cpl_req_tag&RXCPL_DESC_PTR_MASK));
+        op_update_desc_info_pipe_hazard = 0;
+        op_read_desc_info_pipe_hazard = 0;
+        op_rxe_cpl_req_pipe_hazard = 0;
+    end
+
+    // cam-related
+    cam_wr_en_next = 0;
+    cam_wr_data_next = rxe_req_msg_id_pipe_reg[PIPELINE-1];
+    cam_wr_addr_next = (desc_table_start_ptr_reg & RXCPL_DESC_PTR_MASK);
+
+    // pipeline stage 0 - receive request
+    if (enable && !desc_table_active[desc_table_start_ptr_reg & RXCPL_DESC_PTR_MASK] 
+            && ($unsigned(desc_table_start_ptr_reg - desc_table_finish_ptr_reg) < RX_CPL_DESC_TABLE_SIZE) 
+            && s_axis_rxe_req_valid 
+            && !m_axis_rxcpl_resp_valid 
+            && !cam_wr_busy // if cam not busy, we can initiate a rxe-to-rxcpl request
+            && !op_rxe_req_pipe_reg) begin
+        op_rxe_req_pipe_next[0] = 1'b1;
+        s_axis_rxe_req_ready_next = 1'b1;
+
+        rxe_req_tag_pipe_next[0] = s_axis_rxe_req_tag;
+        rxe_req_is_msg_pipe_next[0] = s_axis_rxe_req_is_msg;
+        rxe_req_msg_id_pipe_next[0] = s_axis_rxe_req_msg_id;
+        rxe_req_msg_len_pipe_next[0] = s_axis_rxe_req_msg_len;
+        rxe_req_msg_off_pipe_next[0] = s_axis_rxe_req_msg_off;
+
+    end
+
+    if (enable && s_axis_rxe_rxcpl_invalidate_valid) begin
+        invalidate_entry_en = 1'b1;
+        invalidate_entry_index = s_axis_rxe_rxcpl_invalidate_index & RXCPL_DESC_PTR_MASK;
+    end
+
+    // update desc
+    if (enable && desc_table_active[s_axis_rxe_rxcpl_update_desc_tag & RXCPL_DESC_PTR_MASK] 
+                && s_axis_rxe_rxcpl_update_desc_tvalid
+                && !op_update_desc_info_pipe_hazard && !op_update_desc_info_pipe_reg) begin
+
+        op_update_desc_info_pipe_next[0] = 1'b1;
+        ram_read_addr_pipe_next[0] = s_axis_rxe_rxcpl_update_desc_tag & RXCPL_DESC_PTR_MASK;
+        s_axis_rxe_rxcpl_update_desc_tready_next = 1'b1;
+
+        update_desc_info_tdata_next[0] = s_axis_rxe_rxcpl_update_desc_tdata;
+        update_desc_info_tag_next[0] = s_axis_rxe_rxcpl_update_desc_tag & RXCPL_DESC_PTR_MASK;
+        update_desc_info_index_next[0] = s_axis_rxe_rxcpl_update_desc_index;
+        update_desc_info_queue_next[0] = s_axis_rxe_rxcpl_update_desc_queue;
+        update_desc_info_queue_ptr_next[0] = s_axis_rxe_rxcpl_update_desc_queue_ptr;
+        update_desc_info_id_next[0] = s_axis_rxe_rxcpl_update_desc_id;
+    end
+
+    // read desc operation
+    if (enable && s_axis_rxe_rxcpl_req_desc_valid 
+                && !op_read_desc_info_pipe_hazard && !op_read_desc_info_pipe_reg
+                && desc_table_desc_fetched[s_axis_rxe_rxcpl_req_desc_queue & RXCPL_DESC_PTR_MASK]) begin
+
+        op_read_desc_info_pipe_next[0] = 1'b1;
+        s_axis_rxe_rxcpl_req_desc_ready_next = 1'b1;
+        ram_read_addr_pipe_next[0] = s_axis_rxe_rxcpl_req_desc_queue;
+
+        ram_read_desc_info_addr = s_axis_rxe_rxcpl_req_desc_queue & RXCPL_DESC_PTR_MASK;
+        read_desc_info_tag_next[0] = s_axis_rxe_rxcpl_req_desc_tag;
+        read_desc_info_queue_next[0] = s_axis_rxe_rxcpl_req_desc_queue;
+        read_desc_info_desc_fetched_next[0] = 1'b1;
+
+        if (desc_table_active[s_axis_rxe_rxcpl_req_desc_queue & RXCPL_DESC_PTR_MASK]
+            && !desc_table_invalid[s_axis_rxe_rxcpl_req_desc_queue & RXCPL_DESC_PTR_MASK]
+            && !desc_table_msg_entry_expired[s_axis_rxe_rxcpl_req_desc_queue & RXCPL_DESC_PTR_MASK]) begin
+            read_desc_info_desc_error_next[0] = 1'b0;
+        end
+        else begin
+            read_desc_info_desc_error_next[0] = 1'b1;
+        end
+    end
+
+    // cpl operation
+    if (enable && !op_rxe_cpl_req_pipe_hazard && !op_rxe_cpl_req_pipe_reg
+                && !m_axis_cpl_req_valid_reg
+                && to_rxe_cpl_fifo_ready[0]
+                && to_rxe_cpl_fifo_ready[1]
+                && cpl_resp_fifo_in_tready) begin
+        if (s_axis_rxe_cpl_req_valid) begin
+            // normal cpl operation
+            if (desc_table_active[s_axis_rxe_cpl_req_tag & RXCPL_DESC_PTR_MASK]) begin
+                // if entry is not expired
+                op_rxe_cpl_req_pipe_next[0] = 1'b1;
+                s_axis_rxe_cpl_req_ready_next = 1'b1;
+                ram_read_addr_pipe_next[0] = s_axis_rxe_cpl_req_tag & RXCPL_DESC_PTR_MASK;
+
+                ram_read_addr = s_axis_rxe_cpl_req_tag & RXCPL_DESC_PTR_MASK;
+
+                rxe_cpl_type_next[0]                 = 0;
+                rxe_cpl_req_queue_next[0]            = s_axis_rxe_cpl_req_queue;
+                rxe_cpl_req_tag_next[0]              = s_axis_rxe_cpl_req_tag;
+                rxe_cpl_req_data_next[0]             = s_axis_rxe_cpl_req_data;
+                rxe_cpl_req_msg_off_next[0]          = s_axis_rxe_cpl_req_msg_off;
+                rxe_cpl_req_msg_len_next[0]          = s_axis_rxe_cpl_req_msg_len;
+                rxe_cpl_req_is_msg_next[0]           = s_axis_rxe_cpl_req_is_msg;
+                rxe_cpl_req_is_msg_exist_next[0]     = s_axis_rxe_cpl_req_is_msg_exist;
+                rxe_cpl_req_desc_table_ptr_next[0]   = s_axis_rxe_cpl_req_desc_table_ptr;
+            end
+            else begin
+                // if entry is expired
+                s_axis_rxe_cpl_req_ready_next = 1'b1;
+
+                to_rxe_cpl_fifo_rdy_to_inact_next[0] = 1'b1;
+                to_rxe_cpl_fifo_rxe_ptr_next[0] = s_axis_rxe_cpl_req_desc_table_ptr;
+                to_rxe_cpl_fifo_rxcpl_ptr_next[0] = s_axis_rxe_cpl_req_tag & RXCPL_DESC_PTR_MASK;
+                to_rxe_cpl_fifo_valid_next[0] = 1'b1;
+            end
+        end
+        // invalidate entry
+        else if (invalidate_rx_msg_entry_valid) begin
+            op_rxe_cpl_req_pipe_next[0] = 1'b1;
+            invalidate_rx_msg_cpl_ready_next = 1'b1;
+            ram_read_addr_pipe_next[0] = invalidate_rx_msg_entry_ptr & RXCPL_DESC_PTR_MASK;
+
+            rxe_cpl_type_next[0]    = 1;
+            rxe_cpl_req_tag_next[0] = invalidate_rx_msg_entry_ptr & RXCPL_DESC_PTR_MASK;
+            ram_read_desc_info_for_inact_desc_addr = invalidate_rx_msg_entry_ptr & RXCPL_DESC_PTR_MASK;
+
+            // expire msg entry
+            desc_table_msg_entry_expired_en = 1'b1;
+            desc_table_msg_entry_expired_ptr = invalidate_rx_msg_entry_ptr & RXCPL_DESC_PTR_MASK;
+        end
+    end
+    // if (enable && !desc_table_is_msg[s_axis_cpl_req_status_tag & RXCPL_DESC_PTR_MASK]
+    if (enable && cpl_resp_fifo_out_tvalid
+                && !op_rxe_cpl_resp_pipe_reg) begin
+
+        op_rxe_cpl_resp_pipe_next[0] = 1'b1;
+        // rxe_cpl_resp_tag_next[0] = s_axis_cpl_req_status_tag & RXCPL_DESC_PTR_MASK;
+        rxe_cpl_resp_tag_next[0] = cpl_resp_fifo_out_tag & RXCPL_DESC_PTR_MASK;
+
+        // ram_read_addr_pipe_next[0] = s_axis_cpl_req_status_tag & RXCPL_DESC_PTR_MASK;
+        ram_read_addr_pipe_next[0] = cpl_resp_fifo_out_tag & RXCPL_DESC_PTR_MASK;
+        // ram_read_desc_tag_addr = s_axis_cpl_req_status_tag & RXCPL_DESC_PTR_MASK;
+        ram_read_desc_tag_addr = cpl_resp_fifo_out_tag & RXCPL_DESC_PTR_MASK;
+
+        cpl_resp_fifo_out_tready = 1'b1;
+    end
+
+    /*====================================================================================================*/
+    // perform operation
+    if (op_rxe_req_pipe_reg[PIPELINE-1]) begin
+        inc_active_rxcpl_req = 1'b1;
+        if (rxe_req_is_msg_pipe_reg[PIPELINE-1]) begin
+            // first packet or single-packet message
+            if (rxe_req_msg_off_pipe_reg[PIPELINE-1]==0) begin
+                // TODO: whether to check if the msg id was already in CAM
+                m_axis_rxcpl_resp_queue_next = desc_table_start_ptr_reg & RXCPL_DESC_PTR_MASK;
+
+                desc_table_start_en = 1'b1;
+
+                desc_table_start_rxe_req_tag = rxe_req_tag_pipe_reg[PIPELINE-1];
+                desc_table_start_msg_len = rxe_req_msg_len_pipe_reg[PIPELINE-1];
+                desc_table_start_is_msg = rxe_req_is_msg_pipe_reg[PIPELINE-1];
+
+                if (rxe_req_msg_len_pipe_reg[PIPELINE-1] > 1) begin
+                    // write into CAM
+                    cam_wr_en_next = 1'b1;
+                    cam_wr_addr_next = desc_table_start_ptr_reg & RXCPL_DESC_PTR_MASK;
+                    cam_wr_data_next = rxe_req_msg_id_pipe_reg[PIPELINE-1];
+                end
+            end
+            // subsequent packets within a message
+            else begin
+                if (cam_match_pipe_reg[PIPELINE-3]
+                    && desc_table_active[cam_match_addr_reg]
+                    && !desc_table_invalid[cam_match_addr_reg]
+                    && !desc_table_msg_entry_expired[cam_match_addr_reg]) begin
+
+                    m_axis_rxcpl_resp_queue_next = cam_match_addr_reg & RXCPL_DESC_PTR_MASK;
+                    m_axis_rxcpl_resp_is_msg_exist_next = 1'b1;
+                    m_axis_rxcpl_resp_desc_error_next = 1'b0;
+                end
+                else begin
+                    m_axis_rxcpl_resp_desc_error_next = 1'b1;
+                end
+            end
+            m_axis_rxcpl_resp_desc_exist_next = cam_match_pipe_reg[PIPELINE-3]
+                                                    && desc_table_active[cam_match_addr_reg]
+                                                    && !desc_table_invalid[cam_match_addr_reg]
+                                                    && !desc_table_msg_entry_expired[cam_match_addr_reg]
+                                                    && rxe_req_msg_off_pipe_reg[PIPELINE-1]!=0;
+
+            m_axis_rxcpl_resp_valid_next = 1'b1;
+            m_axis_rxcpl_resp_tag_next = rxe_req_tag_pipe_reg[PIPELINE-1];
+
+        end
+        else begin
+            // non-msg
+            desc_table_start_en = 1'b1;
+
+            desc_table_start_rxe_req_tag = rxe_req_tag_pipe_reg[PIPELINE-1];
+            desc_table_start_msg_len = rxe_req_msg_len_pipe_reg[PIPELINE-1];
+            desc_table_start_is_msg = rxe_req_is_msg_pipe_reg[PIPELINE-1];
+
+            m_axis_rxcpl_resp_valid_next = 1'b1;
+            m_axis_rxcpl_resp_is_msg_exist_next = 1'b0;
+            m_axis_rxcpl_resp_desc_exist_next = 1'b0;
+            m_axis_rxcpl_resp_queue_next = desc_table_start_ptr_reg & RXCPL_DESC_PTR_MASK;
+            m_axis_rxcpl_resp_tag_next = rxe_req_tag_pipe_reg[PIPELINE-1];
+        end
+    end
+    // update desc
+    if (op_update_desc_info_pipe_reg[PIPELINE-1]) begin
+        desc_table_update_en = 1'b1;
+        desc_table_update_desc_ptr       = update_desc_info_tag_reg[PIPELINE-1];
+        desc_table_update_desc_tdata     = update_desc_info_tdata_reg[PIPELINE-1];
+        desc_table_update_desc_queue     = update_desc_info_queue_reg[PIPELINE-1];
+        desc_table_update_desc_queue_ptr = update_desc_info_queue_ptr_reg[PIPELINE-1];
+        desc_table_update_desc_id        = update_desc_info_id_reg[PIPELINE-1];
+        // resp to rxe
+        m_axis_rxcpl_rxe_update_desc_resp_valid_next = 1'b1;
+        m_axis_rxcpl_rxe_update_desc_resp_tag_next = update_desc_info_index_reg[PIPELINE-1];
+    end
+
+    // read desc
+    if (op_read_desc_info_pipe_reg[PIPELINE-1]) begin
+        m_axis_rxcpl_rxe_resp_desc_tag_next         = read_desc_info_tag_reg[PIPELINE-1];
+        m_axis_rxcpl_rxe_resp_desc_tdata_next       = ram_read_tdata_pipe_reg[PIPELINE-1];
+        // m_axis_rxcpl_rxe_resp_desc_fetched_next     = ram_read_fetched_pipe_reg[PIPELINE-1];
+        m_axis_rxcpl_rxe_resp_desc_fetched_next     = read_desc_info_desc_fetched_reg[PIPELINE-1];
+        m_axis_rxcpl_rxe_resp_desc_queue_next       = ram_read_queue_pipe_reg[PIPELINE-1];
+        m_axis_rxcpl_rxe_resp_desc_queue_ptr_next   = ram_read_queue_ptr_pipe_reg[PIPELINE-1];
+        m_axis_rxcpl_rxe_resp_desc_id_next          = ram_read_id_pipe_reg[PIPELINE-1];
+        m_axis_rxcpl_rxe_resp_desc_error_next       = read_desc_info_desc_error_reg[PIPELINE-1];
+        m_axis_rxcpl_rxe_resp_desc_valid_next       = 1'b1;
+    end
+
+    // cpl
+    if (op_rxe_cpl_req_pipe_reg[PIPELINE-1]) begin
+        if (rxe_cpl_type_reg[PIPELINE-1] == 0) begin
+            // if this is a msg packet
+            if (rxe_cpl_req_is_msg_reg[PIPELINE-1]) begin
+                if (to_rxe_cpl_fifo_ready[0]) begin // 0 --> packet delivery, 1 --> msg delivery
+                    if (w_remaining_msg_off == 0) begin
+                        // it completes a msg
+                        m_axis_cpl_req_valid_next = 1'b1;
+                        m_axis_cpl_req_tag_next   = rxe_cpl_req_tag_reg[PIPELINE-1];
+                        m_axis_cpl_req_data_next  = rxe_cpl_req_data_reg[PIPELINE-1];
+                        if (rxe_cpl_req_is_msg_exist_reg[PIPELINE-1]) begin
+                            m_axis_cpl_req_data_next[47:32] = ram_read_dma_len_pipe_reg[PIPELINE-1]
+                                                                + rxe_cpl_req_data_reg[PIPELINE-1][47:32];
+                        end
+                        m_axis_cpl_req_queue_next = rxe_cpl_req_queue_reg[PIPELINE-1];
+                        // if (ram_read_msg_len_pipe_reg[PIPELINE-1] > 0) begin
+                        // if (rxe_cpl_req_msg_len_reg[PIPELINE-1] > 1) begin
+                        to_rxe_cpl_fifo_rdy_to_inact_next[0] = 1'b1;
+                        // end
+                    end
+                    else begin
+                        to_rxe_cpl_fifo_rdy_to_inact_next[0] = 1'b1;
+                        m_axis_cpl_req_valid_next = 1'b0;
+                    end
+                    desc_table_update_msg_len_en = 1'b1;
+                    desc_table_update_msg_len_ptr = rxe_cpl_req_tag_reg[PIPELINE-1];
+                    // desc_table_update_msg_len = (desc_table_msg_len[s_axis_rxe_cpl_req_tag & RXCPL_DESC_PTR_MASK])
+                    //                                 ^ (8'b1<<s_axis_rxe_cpl_req_msg_off);
+                    desc_table_update_msg_len = w_remaining_msg_off;
+                    if (ram_read_msg_len_pipe_reg[PIPELINE-1] == 0) begin
+                        desc_table_update_dma_len = rxe_cpl_req_data_reg[PIPELINE-1][47:32];
+                    end
+                    else begin
+                        desc_table_update_dma_len = ram_read_dma_len_pipe_reg[PIPELINE-1] + rxe_cpl_req_data_reg[PIPELINE-1][47:32];
+                    end
+                    to_rxe_cpl_fifo_rxe_ptr_next[0] = rxe_cpl_req_desc_table_ptr_reg[PIPELINE-1];
+                    to_rxe_cpl_fifo_rxcpl_ptr_next[0] = rxe_cpl_req_tag_reg[PIPELINE-1] & RXCPL_DESC_PTR_MASK;
+                    to_rxe_cpl_fifo_valid_next[0] = 1'b1;
+                end
+            end
+            else begin
+                m_axis_cpl_req_valid_next = 1'b1;
+                m_axis_cpl_req_tag_next   = rxe_cpl_req_tag_reg[PIPELINE-1];
+                m_axis_cpl_req_data_next  = rxe_cpl_req_data_reg[PIPELINE-1];
+                m_axis_cpl_req_queue_next = rxe_cpl_req_queue_reg[PIPELINE-1];
+            end
+        end
+        // hard timeout
+        else if (rxe_cpl_type_reg[PIPELINE-1] == 1) begin
+            m_axis_cpl_req_valid_next   = 1'b1;
+            m_axis_cpl_req_tag_next     = rxe_cpl_req_tag_reg[PIPELINE-1];
+            m_axis_cpl_req_data_next    = 0;
+            m_axis_cpl_req_data_next[15:0] = ram_read_for_inact_rx_entry_queue_pipe_reg[PIPELINE-1];
+            m_axis_cpl_req_data_next[31:16] = ram_read_for_inact_rx_entry_queue_ptr_pipe_reg[PIPELINE-1];
+            m_axis_cpl_req_data_next[47:32] = 1; // TODO: just a dummy value
+            m_axis_cpl_req_data_next[176:168] = ram_read_for_inact_rx_entry_id_pipe_reg[PIPELINE-1];
+
+            m_axis_cpl_req_data_next[255:224] = 32'hffff_ffff;
+
+            m_axis_cpl_req_queue_next   = ram_read_for_inact_rx_entry_queue_pipe_reg[PIPELINE-1];
+        end
+    end
+
+    if (op_rxe_cpl_resp_pipe_reg[PIPELINE-1]) begin
+        to_rxe_cpl_fifo_rxe_ptr_next[1] = ram_read_tag_pipe_reg[PIPELINE-1];
+        to_rxe_cpl_fifo_rxcpl_ptr_next[1] = rxe_cpl_resp_tag_reg[PIPELINE-1];
+        to_rxe_cpl_fifo_valid_next[1] = 1'b1;
+        to_rxe_cpl_fifo_rdy_to_inact_next[1] = 1'b0;
+    end
+
+    // send back
+    if (arbiter_out_valid) begin
+        if (arbiter_out_rdy_to_inact) begin
+            m_axis_cpl_rxe_status_tag_next = arbiter_out_rxe_ptr;
+            m_axis_cpl_rxe_status_valid_next = 1'b1;
+        end
+        // Entry can not be cleared until all segs are written
+        if (arbiter_out_which_q == 1) begin
+            desc_table_data_written_en = 1'b1;
+            desc_table_data_written_ptr = arbiter_out_rxcpl_ptr & RXCPL_DESC_PTR_MASK;
+        end
+        arbiter_out_ready = 1'b1;
+    end
+
+    // clean entry
+    if (desc_table_active[desc_table_finish_ptr_reg & RXCPL_DESC_PTR_MASK]
+            && desc_table_finish_ptr_reg != desc_table_start_ptr_reg) begin
+
+        if (desc_table_invalid[desc_table_finish_ptr_reg & RXCPL_DESC_PTR_MASK]) begin
+            desc_table_finish_en = 1'b1;
+        end
+        else begin
+            if (desc_table_data_written[desc_table_finish_ptr_reg & RXCPL_DESC_PTR_MASK]) begin
+                desc_table_finish_en = 1'b1;
+            end
+        end
+    end
+end
+
+always @(posedge clk) begin
+
+    active_rxcpl_cnt_reg <= active_rxcpl_cnt_reg + inc_active_rxcpl_req - dec_active_rxcpl_req;
+    s_axis_rxe_req_ready_reg <= s_axis_rxe_req_ready_next;
+
+    // update desc info
+    s_axis_rxe_rxcpl_update_desc_tready_reg     <= s_axis_rxe_rxcpl_update_desc_tready_next;
+    m_axis_rxcpl_rxe_update_desc_resp_valid_reg <= m_axis_rxcpl_rxe_update_desc_resp_valid_next;
+    m_axis_rxcpl_rxe_update_desc_resp_tag_reg   <= m_axis_rxcpl_rxe_update_desc_resp_tag_next;
+
+    m_axis_rxcpl_resp_valid_reg <= m_axis_rxcpl_resp_valid_next;
+    m_axis_rxcpl_resp_is_msg_exist_reg <= m_axis_rxcpl_resp_is_msg_exist_next;
+    m_axis_rxcpl_resp_desc_exist_reg <= m_axis_rxcpl_resp_desc_exist_next;
+    m_axis_rxcpl_resp_desc_error_reg <= m_axis_rxcpl_resp_desc_error_next;
+    m_axis_rxcpl_resp_tag_reg <= m_axis_rxcpl_resp_tag_next;
+    m_axis_rxcpl_resp_queue_reg <= m_axis_rxcpl_resp_queue_next;
+
+    s_axis_rxe_cpl_req_ready_reg <= s_axis_rxe_cpl_req_ready_next;
+    m_axis_cpl_req_valid_reg <= m_axis_cpl_req_valid_next;
+    m_axis_cpl_req_tag_reg   <= m_axis_cpl_req_tag_next;
+    m_axis_cpl_req_data_reg  <= m_axis_cpl_req_data_next;
+    m_axis_cpl_req_queue_reg <= m_axis_cpl_req_queue_next;
+
+    m_axis_cpl_rxe_status_tag_reg   <= m_axis_cpl_rxe_status_tag_next;
+    m_axis_cpl_rxe_status_valid_reg <= m_axis_cpl_rxe_status_valid_next;
+
+    s_axis_rxe_rxcpl_req_desc_ready_reg         <= s_axis_rxe_rxcpl_req_desc_ready_next;
+    m_axis_rxcpl_rxe_resp_desc_tag_reg          <= m_axis_rxcpl_rxe_resp_desc_tag_next;
+    m_axis_rxcpl_rxe_resp_desc_tdata_reg        <= m_axis_rxcpl_rxe_resp_desc_tdata_next;
+    m_axis_rxcpl_rxe_resp_desc_fetched_reg      <= m_axis_rxcpl_rxe_resp_desc_fetched_next;
+    m_axis_rxcpl_rxe_resp_desc_queue_reg        <= m_axis_rxcpl_rxe_resp_desc_queue_next;
+    m_axis_rxcpl_rxe_resp_desc_queue_ptr_reg    <= m_axis_rxcpl_rxe_resp_desc_queue_ptr_next;
+    m_axis_rxcpl_rxe_resp_desc_id_reg           <= m_axis_rxcpl_rxe_resp_desc_id_next;
+    m_axis_rxcpl_rxe_resp_desc_error_reg        <= m_axis_rxcpl_rxe_resp_desc_error_next;
+    m_axis_rxcpl_rxe_resp_desc_valid_reg        <= m_axis_rxcpl_rxe_resp_desc_valid_next;
+
+    if (desc_table_start_en) begin
+        desc_table_rxe_tag[desc_table_start_ptr_reg & RXCPL_DESC_PTR_MASK] <= desc_table_start_rxe_req_tag;
+        // desc_table_msg_len[desc_table_start_ptr_reg & RXCPL_DESC_PTR_MASK] <= (8'b1<<desc_table_start_msg_len)-1;
+        // desc_table_dma_len[desc_table_start_ptr_reg & RXCPL_DESC_PTR_MASK] <= 0;
+        desc_table_is_msg[desc_table_start_ptr_reg & RXCPL_DESC_PTR_MASK] <= desc_table_start_is_msg;
+
+        desc_table_active[desc_table_start_ptr_reg & RXCPL_DESC_PTR_MASK] <= 1'b1;
+        desc_table_invalid[desc_table_start_ptr_reg & RXCPL_DESC_PTR_MASK] <= 1'b0;
+        desc_table_data_written[desc_table_start_ptr_reg & RXCPL_DESC_PTR_MASK] <= 1'b0;
+        desc_table_desc_fetched[desc_table_start_ptr_reg & RXCPL_DESC_PTR_MASK] <= 1'b0;
+        desc_table_msg_entry_expired[desc_table_start_ptr_reg & RXCPL_DESC_PTR_MASK] <= 1'b0;
+
+        desc_table_desc_timeout_in_us[desc_table_start_ptr_reg & RXCPL_DESC_PTR_MASK] <= timeout_in_us;
+        desc_table_start_ptr_reg <= desc_table_start_ptr_reg + 1;
+    end
+
+    if (invalidate_entry_en) begin
+        desc_table_invalid[invalidate_entry_index] <= 1'b1;
+    end
+
+    if (desc_table_msg_entry_expired_en) begin
+        desc_table_msg_entry_expired[desc_table_msg_entry_expired_ptr] <= 1'b1;
+    end
+
+    if (desc_table_finish_en) begin
+        desc_table_active[desc_table_finish_ptr_reg & RXCPL_DESC_PTR_MASK] <= 1'b0;
+        desc_table_finish_ptr_reg <= desc_table_finish_ptr_reg + 1;
+    end
+
+    if (desc_table_data_written_en) begin
+        desc_table_data_written[desc_table_data_written_ptr & RXCPL_DESC_PTR_MASK] <= 1'b1;
+    end
+
+    // TODO: should somehow change to the pipeline style
+    if (desc_table_update_en) begin
+        desc_table_desc_tdata[desc_table_update_desc_ptr] <= desc_table_update_desc_tdata;
+        desc_table_queue[desc_table_update_desc_ptr] <= desc_table_update_desc_queue;
+        desc_table_queue_ptr[desc_table_update_desc_ptr] <= desc_table_update_desc_queue_ptr;
+        desc_table_id[desc_table_update_desc_ptr] <= desc_table_update_desc_id;
+        desc_table_desc_fetched[desc_table_update_desc_ptr] <= 1'b1;
+
+        desc_table_inact_rx_entry_queue[desc_table_update_desc_ptr] <= desc_table_update_desc_queue;
+        desc_table_inact_rx_entry_queue_ptr[desc_table_update_desc_ptr] <= desc_table_update_desc_queue_ptr;
+        desc_table_inact_rx_entry_id[desc_table_update_desc_ptr] <= desc_table_update_desc_id;
+    end
+
+    if (desc_table_update_msg_len_en) begin
+        desc_table_msg_len[desc_table_update_msg_len_ptr] <= desc_table_update_msg_len;
+        desc_table_dma_len[desc_table_update_msg_len_ptr] <= desc_table_update_dma_len;
+    end
+
+    // cam
+    cam_wr_en_reg <= cam_wr_en_next;
+    cam_wr_data_reg <= cam_wr_data_next;
+    cam_wr_addr_reg <= cam_wr_addr_next;
+
+    to_rxe_cpl_fifo_valid_reg[0] <= to_rxe_cpl_fifo_valid_next[0];
+    to_rxe_cpl_fifo_valid_reg[1] <= to_rxe_cpl_fifo_valid_next[1];
+
+    to_rxe_cpl_fifo_rxe_ptr_reg[0]      <= to_rxe_cpl_fifo_rxe_ptr_next[0];
+    to_rxe_cpl_fifo_rxe_ptr_reg[1]      <= to_rxe_cpl_fifo_rxe_ptr_next[1];
+    to_rxe_cpl_fifo_rxcpl_ptr_reg[0]    <= to_rxe_cpl_fifo_rxcpl_ptr_next[0];
+    to_rxe_cpl_fifo_rxcpl_ptr_reg[1]    <= to_rxe_cpl_fifo_rxcpl_ptr_next[1];
+    to_rxe_cpl_fifo_rdy_to_inact_reg[0] <= to_rxe_cpl_fifo_rdy_to_inact_next[0];
+    to_rxe_cpl_fifo_rdy_to_inact_reg[1] <= to_rxe_cpl_fifo_rdy_to_inact_next[1];
+
+    // pipeline
+    op_rxe_req_pipe_reg <= op_rxe_req_pipe_next;
+    op_update_desc_info_pipe_reg <= op_update_desc_info_pipe_next;
+    op_read_desc_info_pipe_reg <= op_read_desc_info_pipe_next;
+    op_rxe_cpl_req_pipe_reg <= op_rxe_cpl_req_pipe_next;
+    op_rxe_cpl_resp_pipe_reg <= op_rxe_cpl_resp_pipe_next;
+    for (i=0; i<PIPELINE; i=i+1) begin
+        rxe_req_tag_pipe_reg[i]        <= rxe_req_tag_pipe_next[i];
+        rxe_req_is_msg_pipe_reg[i]     <= rxe_req_is_msg_pipe_next[i];
+        rxe_req_msg_id_pipe_reg[i]     <= rxe_req_msg_id_pipe_next[i];
+        rxe_req_msg_len_pipe_reg[i]    <= rxe_req_msg_len_pipe_next[i];
+        rxe_req_msg_off_pipe_reg[i]    <= rxe_req_msg_off_pipe_next[i];
+
+        update_desc_info_tdata_reg[i]      <= update_desc_info_tdata_next[i];
+        update_desc_info_tag_reg[i]        <= update_desc_info_tag_next[i];
+        update_desc_info_index_reg[i]        <= update_desc_info_index_next[i];
+        update_desc_info_queue_reg[i]      <= update_desc_info_queue_next[i];
+        update_desc_info_queue_ptr_reg[i]  <= update_desc_info_queue_ptr_next[i];
+        update_desc_info_id_reg[i]         <= update_desc_info_id_next[i];
+
+        read_desc_info_tag_reg[i]      <= read_desc_info_tag_next[i];
+        read_desc_info_queue_reg[i]    <= read_desc_info_queue_next[i];
+        read_desc_info_desc_fetched_reg[i] <= read_desc_info_desc_fetched_next[i];
+        read_desc_info_desc_error_reg[i] <= read_desc_info_desc_error_next[i];
+
+
+        rxe_cpl_type_reg[i] <= rxe_cpl_type_next[i];
+        rxe_cpl_req_queue_reg[i] <= rxe_cpl_req_queue_next[i];
+        rxe_cpl_req_tag_reg[i] <= rxe_cpl_req_tag_next[i];
+        rxe_cpl_req_data_reg[i] <= rxe_cpl_req_data_next[i];
+        rxe_cpl_req_msg_off_reg[i] <= rxe_cpl_req_msg_off_next[i];
+        rxe_cpl_req_msg_len_reg[i] <= rxe_cpl_req_msg_len_next[i];
+        rxe_cpl_req_is_msg_reg[i] <= rxe_cpl_req_is_msg_next[i];
+        rxe_cpl_req_is_msg_exist_reg[i] <= rxe_cpl_req_is_msg_exist_next[i];
+        rxe_cpl_req_desc_table_ptr_reg[i] <= rxe_cpl_req_desc_table_ptr_next[i];
+
+        rxe_cpl_resp_tag_reg[i] <= rxe_cpl_resp_tag_next[i];
+
+        ram_read_addr_pipe_reg[i] <= ram_read_addr_pipe_next[i];
+    end
+
+    // pipeline read
+    // read desc info
+    ram_read_tdata_reg <= desc_table_desc_tdata[ram_read_desc_info_addr];
+    ram_read_fetched_reg <= desc_table_desc_fetched[ram_read_desc_info_addr];
+    ram_read_queue_reg <= desc_table_queue[ram_read_desc_info_addr];
+    ram_read_queue_ptr_reg <= desc_table_queue_ptr[ram_read_desc_info_addr];
+    ram_read_id_reg <= desc_table_id[ram_read_desc_info_addr];
+    ram_read_msg_expired_reg <= desc_table_msg_entry_expired[ram_read_desc_info_addr];
+
+    ram_read_for_inact_rx_entry_queue_reg <= desc_table_inact_rx_entry_queue[ram_read_desc_info_for_inact_desc_addr];
+    ram_read_for_inact_rx_entry_queue_ptr_reg <= desc_table_inact_rx_entry_queue_ptr[ram_read_desc_info_for_inact_desc_addr];
+    ram_read_for_inact_rx_entry_id_reg <= desc_table_inact_rx_entry_id[ram_read_desc_info_for_inact_desc_addr];
+
+    // read info for cpl
+    ram_read_dma_len_reg <= desc_table_dma_len[ram_read_addr];
+    ram_read_msg_len_reg <= desc_table_msg_len[ram_read_addr];
+
+    //
+    ram_read_tag_reg <= desc_table_rxe_tag[ram_read_desc_tag_addr];
+
+    //
+    ram_read_tdata_pipe_reg[1] <= ram_read_tdata_reg;
+    ram_read_fetched_pipe_reg[1] <= ram_read_fetched_reg;
+    ram_read_queue_pipe_reg[1] <= ram_read_queue_reg;
+    ram_read_queue_ptr_pipe_reg[1] <= ram_read_queue_ptr_reg;
+    ram_read_id_pipe_reg[1] <= ram_read_id_reg;
+    ram_read_msg_expired_pipe_reg[1] <= ram_read_msg_expired_reg;
+
+    ram_read_for_inact_rx_entry_queue_pipe_reg[1] <= ram_read_for_inact_rx_entry_queue_reg;
+    ram_read_for_inact_rx_entry_queue_ptr_pipe_reg[1] <= ram_read_for_inact_rx_entry_queue_ptr_reg;
+    ram_read_for_inact_rx_entry_id_pipe_reg[1] <= ram_read_for_inact_rx_entry_id_reg;
+
+    ram_read_dma_len_pipe_reg[1] <= ram_read_dma_len_reg;
+    ram_read_msg_len_pipe_reg[1] <= ram_read_msg_len_reg;
+
+    ram_read_tag_pipe_reg[1] <= ram_read_tag_reg;
+    for (i=2; i<PIPELINE; i=i+1) begin
+        ram_read_tdata_pipe_reg[i] <= ram_read_tdata_pipe_reg[i-1];
+        ram_read_fetched_pipe_reg[i] <= ram_read_fetched_pipe_reg[i-1];
+        ram_read_queue_pipe_reg[i] <= ram_read_queue_pipe_reg[i-1];
+        ram_read_queue_ptr_pipe_reg[i] <= ram_read_queue_ptr_pipe_reg[i-1];
+        ram_read_id_pipe_reg[i] <= ram_read_id_pipe_reg[i-1];
+        ram_read_msg_expired_pipe_reg[i] <= ram_read_msg_expired_pipe_reg[i-1];
+
+        ram_read_for_inact_rx_entry_queue_pipe_reg[i] <= ram_read_for_inact_rx_entry_queue_pipe_reg[i-1];
+        ram_read_for_inact_rx_entry_queue_ptr_pipe_reg[i] <= ram_read_for_inact_rx_entry_queue_ptr_pipe_reg[i-1];
+        ram_read_for_inact_rx_entry_id_pipe_reg[i] <= ram_read_for_inact_rx_entry_id_pipe_reg[i-1];
+
+        ram_read_dma_len_pipe_reg[i] <= ram_read_dma_len_pipe_reg[i-1];
+        ram_read_msg_len_pipe_reg[i] <= ram_read_msg_len_pipe_reg[i-1];
+
+        ram_read_tag_pipe_reg[i] <= ram_read_tag_pipe_reg[i-1];
+    end
+
+    // desc_active op
+    cpl_rxe_status_desc_table_active_reg <= cpl_rxe_status_desc_table_active;
+
+    if (rst) begin
+        active_rxcpl_cnt_reg <= 0;
+        desc_table_start_ptr_reg <= 0;
+        desc_table_finish_ptr_reg <= 0;
+
+        s_axis_rxe_req_ready_reg <= 0;
+        m_axis_rxcpl_resp_valid_reg <= 0;
+        m_axis_rxcpl_resp_is_msg_exist_reg <= 0;
+        m_axis_rxcpl_resp_desc_exist_reg <= 0;
+        m_axis_rxcpl_resp_desc_error_reg <= 0;
+        m_axis_rxcpl_resp_tag_reg <= 0;
+        m_axis_rxcpl_resp_queue_reg <= 0;
+
+        // update desc info
+        s_axis_rxe_rxcpl_update_desc_tready_reg     <= 0;
+        m_axis_rxcpl_rxe_update_desc_resp_valid_reg <= 0;
+        m_axis_rxcpl_rxe_update_desc_resp_tag_reg   <= 0;
+        //
+        s_axis_rxe_cpl_req_ready_reg <= 0;
+        m_axis_cpl_req_valid_reg <= 0;
+        m_axis_cpl_req_tag_reg   <= 0;
+        m_axis_cpl_req_data_reg  <= 0;
+        m_axis_cpl_req_queue_reg <= 0;
+
+        m_axis_cpl_rxe_status_tag_reg   <= 0;
+        m_axis_cpl_rxe_status_valid_reg <= 0;
+
+        s_axis_rxe_rxcpl_req_desc_ready_reg         <= 0;
+        m_axis_rxcpl_rxe_resp_desc_tag_reg          <= 0;
+        m_axis_rxcpl_rxe_resp_desc_fetched_reg      <= 0;
+        m_axis_rxcpl_rxe_resp_desc_tdata_reg        <= 0;
+        m_axis_rxcpl_rxe_resp_desc_queue_reg        <= 0;
+        m_axis_rxcpl_rxe_resp_desc_queue_ptr_reg    <= 0;
+        m_axis_rxcpl_rxe_resp_desc_id_reg           <= 0;
+        m_axis_rxcpl_rxe_resp_desc_error_reg        <= 0;
+        m_axis_rxcpl_rxe_resp_desc_valid_reg        <= 0;
+
+        to_rxe_cpl_fifo_valid_reg[0] <= 0;
+        to_rxe_cpl_fifo_valid_reg[1] <= 0;
+
+        to_rxe_cpl_fifo_rxe_ptr_reg[0]      <= 0;
+        to_rxe_cpl_fifo_rxe_ptr_reg[1]      <= 0;
+        to_rxe_cpl_fifo_rxcpl_ptr_reg[0]    <= 0;
+        to_rxe_cpl_fifo_rxcpl_ptr_reg[1]    <= 0;
+        to_rxe_cpl_fifo_rdy_to_inact_reg[0] <= 0;
+        to_rxe_cpl_fifo_rdy_to_inact_reg[1] <= 0;
+
+        // cam
+        cam_wr_en_reg <= 0;
+        cam_wr_data_reg <= 0;
+        cam_wr_addr_reg <= 0;
+
+        // pipeline
+        op_rxe_req_pipe_reg <= 0;
+        op_update_desc_info_pipe_reg <= 0;
+        op_read_desc_info_pipe_reg <= 0;
+        op_rxe_cpl_req_pipe_reg <= 0;
+        op_rxe_cpl_resp_pipe_reg <= 0;
+
+        for (i=0; i<PIPELINE; i=i+1) begin
+            rxe_req_tag_pipe_reg[i]         <= 0;
+            rxe_req_is_msg_pipe_reg[i]      <= 0;
+            rxe_req_msg_id_pipe_reg[i]      <= 0;
+            rxe_req_msg_len_pipe_reg[i]     <= 0;
+            rxe_req_msg_off_pipe_reg[i]     <= 0;
+
+            update_desc_info_tdata_reg[i]      <= 0;
+            update_desc_info_tag_reg[i]        <= 0;
+            update_desc_info_queue_reg[i]      <= 0;
+            update_desc_info_queue_ptr_reg[i]  <= 0;
+            update_desc_info_id_reg[i]         <= 0;
+
+            read_desc_info_tag_reg[i]      <= 0;
+            read_desc_info_queue_reg[i]    <= 0;
+            read_desc_info_desc_error_reg[i] <= 0;
+
+            rxe_cpl_type_reg[i]                 <= 0;
+            rxe_cpl_req_queue_reg[i]            <= 0;
+            rxe_cpl_req_tag_reg[i]              <= 0;
+            rxe_cpl_req_data_reg[i]             <= 0;
+            rxe_cpl_req_msg_off_reg[i]          <= 0;
+            rxe_cpl_req_msg_len_reg[i]          <= 0;
+            rxe_cpl_req_is_msg_reg[i]           <= 0;
+            rxe_cpl_req_is_msg_exist_reg[i]           <= 0;
+            rxe_cpl_req_desc_table_ptr_reg[i]   <= 0;
+
+            rxe_cpl_resp_tag_reg[i] <= 0;
+            ram_read_addr_pipe_reg[i] <= 0;
+        end
+
+        for (i=0; i<PIPELINE; i=i+1) begin
+            ram_read_tdata_pipe_reg[i]      <= 0;
+            ram_read_fetched_pipe_reg[i]    <= 0;
+            ram_read_queue_pipe_reg[i]      <= 0;
+            ram_read_queue_ptr_pipe_reg[i]  <= 0;
+            ram_read_id_pipe_reg[i]         <= 0;
+            ram_read_msg_expired_pipe_reg[i]         <= 0;
+
+            ram_read_for_inact_rx_entry_queue_pipe_reg[i] <= 0;
+            ram_read_for_inact_rx_entry_queue_ptr_pipe_reg[i] <= 0;
+            ram_read_for_inact_rx_entry_id_pipe_reg[i] <= 0;
+
+            ram_read_dma_len_pipe_reg[i]    <= 0;
+            ram_read_msg_len_pipe_reg[i]    <= 0;
+
+            ram_read_tag_pipe_reg[i]        <= 0;
+        end
+
+        // for table initialization
+        desc_table_active <= 0;
+        desc_table_invalid <= 0;
+        desc_table_data_written <= 0;
+        desc_table_desc_fetched <= 0;
+        desc_table_is_msg <= 0;
+        desc_table_msg_entry_expired <= 0;
+
+        // desc_active op
+        cpl_rxe_status_desc_table_active_reg <= 0;
+    end
+end
+
+//=====================================================
+// clear out hard timeout msg entries
+localparam US_CYCLE = 250;
+reg [7:0] cnt_cycle = 0;
+
+reg [CL_CPL_DESC_TABLE_SIZE-1:0] chk_entry_index = 0, chk_entry_index_next;
+
+always @(*) begin
+    chk_entry_index_next = chk_entry_index;
+
+    invalidate_rx_msg_entry_valid_next = invalidate_rx_msg_entry_valid_reg & !invalidate_rx_msg_cpl_ready;
+    invalidate_rx_msg_entry_ptr_next = invalidate_rx_msg_entry_ptr_reg;
+
+    if (desc_table_active[chk_entry_index]
+            && desc_table_is_msg[chk_entry_index]
+            && !desc_table_msg_entry_expired[chk_entry_index]) begin
+
+        if (desc_table_invalid[chk_entry_index]) begin
+            chk_entry_index_next = (chk_entry_index+1) & RXCPL_DESC_PTR_MASK;
+        end
+        else if (($unsigned(timeout_in_us - desc_table_desc_timeout_in_us[chk_entry_index])>=rxcpl_hard_timeout_in_us)
+                    && (!invalidate_rx_msg_entry_valid || invalidate_rx_msg_cpl_ready)) begin
+            invalidate_rx_msg_entry_valid_next = 1'b1;
+            invalidate_rx_msg_entry_ptr_next = chk_entry_index & RXCPL_DESC_PTR_MASK;
+
+            chk_entry_index_next = (chk_entry_index+1) & RXCPL_DESC_PTR_MASK;
+        end
+    end
+    else begin
+        chk_entry_index_next = (chk_entry_index+1) & RXCPL_DESC_PTR_MASK;
+    end
+end
+
+always @(posedge clk) begin
+
+
+    // timeout
+    timeout_in_us <= timeout_in_us + (cnt_cycle==US_CYCLE);
+
+    if (cnt_cycle < US_CYCLE) begin
+        cnt_cycle <= cnt_cycle + 1;
+    end
+    else if (cnt_cycle == US_CYCLE) begin
+        cnt_cycle <= 0;
+    end
+
+    //
+    chk_entry_index                     <= chk_entry_index_next;
+    invalidate_rx_msg_entry_valid_reg   <= invalidate_rx_msg_entry_valid_next;
+    invalidate_rx_msg_entry_ptr_reg     <= invalidate_rx_msg_entry_ptr_next;
+    invalidate_rx_msg_cpl_ready_reg     <= invalidate_rx_msg_cpl_ready_next;
+
+    // reset
+    if (rst) begin
+        timeout_in_us <= 0;
+        cnt_cycle <= 0;
+        chk_entry_index <= 0;
+        invalidate_rx_msg_entry_valid_reg   <= 0;
+        invalidate_rx_msg_entry_ptr_reg     <= 0;
+
+        invalidate_rx_msg_cpl_ready_reg     <= 0;
+    end
+end
+
+//[END] hard timeout of entry=====================================================
+
+// CAM
+//  32-bit MSG_ID --> RX_CPL_DESC_TABLE index
+
+cam_srl #(
+    .DATA_WIDTH(CAM_DATA_WDITH),
+    .ADDR_WIDTH(CL_CPL_DESC_TABLE_SIZE)
+)
+cam_ins (
+    .clk            (clk),
+    .rst            (rst),
+    .write_addr     (cam_wr_addr_reg),
+    .write_data     (cam_wr_data_reg),
+    .write_delete   (1'b0),
+    .write_enable   (cam_wr_en_reg),
+    .write_busy     (cam_wr_busy),
+    .compare_data   (cam_compare_data),
+    .match_many     (),
+    .match_single   (),
+    .match_addr     (cam_match_addr),
+    .match          (cam_match)
+);
+
+
+always @(posedge clk) begin
+    cam_match_addr_reg <= cam_match_addr;
+    for (i=0; i<PIPELINE; i=i+1) begin
+        cam_match_pipe_reg[i] <= cam_match_pipe_next[i];
+    end
+    if (rst) begin
+        cam_match_addr_reg <= 0;
+        for (i=0; i<PIPELINE; i=i+1) begin
+            cam_match_pipe_reg[i] <= 0;
+        end
+    end
+end
+
+endmodule
+
+
+
+`resetall
diff --color -burN ./corundum-rtl/rx_engine.v ./hp-rtl/rx_engine.v
--- ./corundum-rtl/rx_engine.v	2024-09-12 17:15:07.565794868 -0400
+++ ./hp-rtl/rx_engine.v	2024-09-12 17:14:43.149796023 -0400
@@ -113,7 +113,20 @@
     // AXI stream tdest signal width
     parameter AXIS_RX_DEST_WIDTH = QUEUE_INDEX_WIDTH,
     // AXI stream tuser signal width
-    parameter AXIS_RX_USER_WIDTH = (PTP_TS_ENABLE ? PTP_TS_WIDTH : 0) + 1
+    parameter AXIS_RX_USER_WIDTH = (PTP_TS_ENABLE ? PTP_TS_WIDTH : 0) + 1,
+    //===================================================
+    parameter AXIS_DATA_WIDTH = 512,
+    parameter AXIS_KEEP_WIDTH = AXIS_DATA_WIDTH/8,
+    parameter AXIS_TX_ID_WIDTH = 16,
+    parameter AXIS_TX_DEST_WIDTH = 16,
+    parameter AXIS_TX_USER_WIDTH = 16,
+    parameter MSG_ID_WIDTH = 32,
+    parameter MSG_OFF_WIDTH = 8,
+    parameter RX_CPL_DESC_TABLE_SIZE = 1024,
+    parameter RX_CPL_DESC_REQ_TAG_WIDTH = $clog2(RX_CPL_DESC_TABLE_SIZE),
+    parameter RX_ROUTING_ENABLE = 1,
+    parameter RX_ROUTING_WIDTH = 32,
+    parameter TIMEOUT_WIDTH = 16
 )
 (
     input  wire                             clk,
@@ -144,6 +157,7 @@
     /*
      * Receive request status output
      */
+    // NOTE: this set of signals is non-sense now
     output wire [DMA_CLIENT_LEN_WIDTH-1:0]  m_axis_rx_req_status_len,
     output wire [REQ_TAG_WIDTH-1:0]         m_axis_rx_req_status_tag,
     output wire                             m_axis_rx_req_status_valid,
@@ -181,19 +195,19 @@
     /*
      * Completion request output
      */
-    output wire [CPL_QUEUE_INDEX_WIDTH-1:0] m_axis_cpl_req_queue,
-    output wire [CPL_REQ_TAG_WIDTH-1:0]     m_axis_cpl_req_tag,
-    output wire [CPL_SIZE*8-1:0]            m_axis_cpl_req_data,
-    output wire                             m_axis_cpl_req_valid,
-    input  wire                             m_axis_cpl_req_ready,
+    // output wire [CPL_QUEUE_INDEX_WIDTH-1:0] m_axis_cpl_req_queue,
+    // output wire [CPL_REQ_TAG_WIDTH-1:0]     m_axis_cpl_req_tag,
+    // output wire [CPL_SIZE*8-1:0]            m_axis_cpl_req_data,
+    // output wire                             m_axis_cpl_req_valid,
+    // input  wire                             m_axis_cpl_req_ready,
 
     /*
      * Completion request status input
      */
-    input  wire [CPL_REQ_TAG_WIDTH-1:0]     s_axis_cpl_req_status_tag,
-    input  wire                             s_axis_cpl_req_status_full,
-    input  wire                             s_axis_cpl_req_status_error,
-    input  wire                             s_axis_cpl_req_status_valid,
+    // input  wire [CPL_REQ_TAG_WIDTH-1:0]     s_axis_cpl_req_status_tag,
+    // input  wire                             s_axis_cpl_req_status_full,
+    // input  wire                             s_axis_cpl_req_status_error,
+    // input  wire                             s_axis_cpl_req_status_valid,
 
     /*
      * DMA write descriptor output
@@ -239,6 +253,89 @@
     input  wire                             s_axis_rx_csum_valid,
     output wire                             s_axis_rx_csum_ready,
 
+    //==============================================================
+    // req to rxcpl
+    output wire                                         m_axis_rxe_req_valid,
+    output wire [DESC_REQ_TAG_WIDTH-1:0]                m_axis_rxe_req_tag,       // ptr in desc_table
+    output wire                                         m_axis_rxe_req_is_msg,
+    output wire [MSG_ID_WIDTH-1:0]                      m_axis_rxe_req_msg_id,
+    output wire [MSG_OFF_WIDTH-1:0]                     m_axis_rxe_req_msg_len,
+    output wire [MSG_OFF_WIDTH-1:0]                     m_axis_rxe_req_msg_off,
+    input  wire                                         m_axis_rxe_req_ready,
+    // resp from rxcpl
+    input  wire [RX_CPL_DESC_REQ_TAG_WIDTH-1:0]         s_axis_rxcpl_resp_queue,
+    input  wire [DESC_REQ_TAG_WIDTH-1:0]                s_axis_rxcpl_resp_tag,
+    input  wire                                         s_axis_rxcpl_resp_valid,
+    input  wire                                         s_axis_rxcpl_resp_desc_exist,
+    input  wire                                         s_axis_rxcpl_resp_desc_error,
+    input  wire                                         s_axis_rxcpl_resp_is_msg_exist,
+
+    // invalidate rxcpl entry
+    output wire [RX_CPL_DESC_REQ_TAG_WIDTH-1:0]         m_axis_rxe_rxcpl_invalidate_entry_index,
+    output wire                                         m_axis_rxe_rxcpl_invalidate_entry_valid,
+
+    // ACK to egress
+    // output wire [AXIS_DATA_WIDTH-1:0]                   m_axis_ack_tdata,
+    // output wire [AXIS_KEEP_WIDTH-1:0]                   m_axis_ack_tkeep,
+    // output wire                                         m_axis_ack_tvalid,
+    // input  wire                                         m_axis_ack_tready,
+    // output wire                                         m_axis_ack_tlast,
+    // output wire [AXIS_TX_ID_WIDTH-1:0]                  m_axis_ack_tid,
+    // output wire [AXIS_TX_DEST_WIDTH-1:0]                m_axis_ack_tdest,
+    // output wire [AXIS_TX_USER_WIDTH-1:0]                m_axis_ack_tuser,
+
+
+    // update desc info to rxcpl, if incoming data is message
+    output wire [AXIS_DESC_DATA_WIDTH-1:0]              m_axis_rxe_rxcpl_update_desc_tdata,
+    output wire [DESC_REQ_TAG_WIDTH-1:0]                m_axis_rxe_rxcpl_update_desc_index,
+    output wire [RX_CPL_DESC_REQ_TAG_WIDTH-1:0]         m_axis_rxe_rxcpl_update_desc_tag,
+    output wire [QUEUE_INDEX_WIDTH-1:0]                 m_axis_rxe_rxcpl_update_desc_queue,
+    output wire [QUEUE_PTR_WIDTH-1:0]                   m_axis_rxe_rxcpl_update_desc_queue_ptr,
+    output wire [AXIS_RX_ID_WIDTH-1:0]                  m_axis_rxe_rxcpl_update_desc_id,
+    output wire                                         m_axis_rxe_rxcpl_update_desc_tvalid,
+    input  wire                                         m_axis_rxe_rxcpl_update_desc_tready,
+
+    // update desc info resp
+    input  wire [DESC_REQ_TAG_WIDTH-1:0]                s_axis_rxcpl_rxe_update_desc_resp_tag,
+    input  wire                                         s_axis_rxcpl_rxe_update_desc_resp_valid,
+
+    // if message exists, request rxcpl for desc info, rather than desc fetch
+    output wire [DESC_REQ_TAG_WIDTH-1:0]                m_axis_rxe_rxcpl_req_desc_tag,
+    output wire [RX_CPL_DESC_REQ_TAG_WIDTH-1:0]         m_axis_rxe_rxcpl_req_desc_queue,
+    output wire                                         m_axis_rxe_rxcpl_req_desc_valid,
+    input  wire                                         m_axis_rxe_rxcpl_req_desc_ready,
+
+    // desc info for DMA
+    input  wire [DESC_REQ_TAG_WIDTH-1:0]                s_axis_rxcpl_rxe_resp_desc_tag,
+    input  wire [AXIS_DESC_DATA_WIDTH-1:0]              s_axis_rxcpl_rxe_resp_desc_tdata,
+    input  wire                                         s_axis_rxcpl_rxe_resp_desc_fetched,
+    input  wire [QUEUE_INDEX_WIDTH-1:0]                 s_axis_rxcpl_rxe_resp_desc_queue,
+    input  wire [QUEUE_PTR_WIDTH-1:0]                   s_axis_rxcpl_rxe_resp_desc_queue_ptr,
+    input  wire [AXIS_RX_ID_WIDTH-1:0]                  s_axis_rxcpl_rxe_resp_desc_id,
+    input  wire                                         s_axis_rxcpl_rxe_resp_desc_error,
+    input  wire                                         s_axis_rxcpl_rxe_resp_desc_valid,
+    // cpl request to rxcpl
+    output wire [CPL_QUEUE_INDEX_WIDTH-1:0]             m_axis_rxe_cpl_req_queue,
+    output wire [CPL_REQ_TAG_WIDTH-1:0]                 m_axis_rxe_cpl_req_tag,     // CPL_REQ_TAG_WIDTH should be RX_CPL_DESC_REQ_TAG_WIDTH
+    output wire [CPL_REQ_TAG_WIDTH-1:0]                 m_axis_rxe_cpl_req_cpl_desc_ptr,
+    output wire [CPL_SIZE*8-1:0]                        m_axis_rxe_cpl_req_data,
+    output wire                                         m_axis_rxe_cpl_req_valid,
+    input  wire                                         m_axis_rxe_cpl_req_ready,
+    output wire [MSG_OFF_WIDTH-1:0]                     m_axis_rxe_cpl_req_msg_off,
+    output wire [MSG_OFF_WIDTH-1:0]                     m_axis_rxe_cpl_req_msg_len,
+    output wire                                         m_axis_rxe_cpl_req_is_msg,
+    output wire                                         m_axis_rxe_cpl_req_is_msg_exist,
+    output wire [DESC_REQ_TAG_WIDTH-1:0]                m_axis_rxe_cpl_req_desc_table_ptr,
+    // cpl complete resp from rxcpl
+    input  wire [DESC_REQ_TAG_WIDTH-1:0]                s_axis_cpl_rxe_status_tag,
+    input  wire                                         s_axis_cpl_rxe_status_valid,
+    //==============================================================
+
+
+    // additional control signals
+    output wire                             ingress_enable,
+    output wire [31:0]                      rxcpl_hard_timeout_in_us,
+    input  wire [31:0]                      ctrl_cnt,
     /*
      * Configuration
      */
@@ -263,7 +360,8 @@
 localparam TUSER_PTP_TS_OFFSET = 1;
 localparam TUSER_HASH_OFFSET = TUSER_PTP_TS_OFFSET + (PTP_TS_ENABLE ? PTP_TS_WIDTH : 0);
 localparam TUSER_HASH_TYPE_OFFSET = TUSER_HASH_OFFSET + (RX_HASH_ENABLE ? RX_HASH_WIDTH : 0);
-localparam INT_TUSER_WIDTH = TUSER_HASH_TYPE_OFFSET + (RX_HASH_ENABLE ? RX_HASH_TYPE_WIDTH : 0);
+localparam TUSER_ROUTING_OFFSET = TUSER_HASH_TYPE_OFFSET + (RX_HASH_ENABLE ? RX_HASH_TYPE_WIDTH : 0);
+localparam INT_TUSER_WIDTH = TUSER_ROUTING_OFFSET + (RX_ROUTING_ENABLE ? RX_ROUTING_WIDTH : 0);
 
 // bus width assertions
 initial begin
@@ -305,18 +403,22 @@
 
 reg s_axis_desc_tready_reg = 1'b0, s_axis_desc_tready_next;
 
-reg [CPL_QUEUE_INDEX_WIDTH-1:0] m_axis_cpl_req_queue_reg = {CPL_QUEUE_INDEX_WIDTH{1'b0}}, m_axis_cpl_req_queue_next;
-reg [CPL_REQ_TAG_WIDTH-1:0] m_axis_cpl_req_tag_reg = {CPL_REQ_TAG_WIDTH{1'b0}}, m_axis_cpl_req_tag_next;
-reg [CPL_SIZE*8-1:0] m_axis_cpl_req_data_reg = {CPL_SIZE*8{1'b0}}, m_axis_cpl_req_data_next;
-reg m_axis_cpl_req_valid_reg = 1'b0, m_axis_cpl_req_valid_next;
+reg [CPL_QUEUE_INDEX_WIDTH-1:0] m_axis_rxe_cpl_req_queue_reg = {CPL_QUEUE_INDEX_WIDTH{1'b0}}, m_axis_rxe_cpl_req_queue_next;
+reg [CPL_REQ_TAG_WIDTH-1:0] m_axis_rxe_cpl_req_tag_reg = {CPL_REQ_TAG_WIDTH{1'b0}}, m_axis_rxe_cpl_req_tag_next;
+reg [CPL_REQ_TAG_WIDTH-1:0] m_axis_rxe_cpl_req_cpl_desc_ptr_reg = {CPL_REQ_TAG_WIDTH{1'b0}}, m_axis_rxe_cpl_req_cpl_desc_ptr_next;
+reg [CPL_SIZE*8-1:0] m_axis_rxe_cpl_req_data_reg = {CPL_SIZE*8{1'b0}}, m_axis_rxe_cpl_req_data_next;
+reg m_axis_rxe_cpl_req_valid_reg = 1'b0, m_axis_rxe_cpl_req_valid_next;
+reg [MSG_OFF_WIDTH-1:0] m_axis_rxe_cpl_req_msg_off_reg = 0, m_axis_rxe_cpl_req_msg_off_next;
+reg [MSG_OFF_WIDTH-1:0] m_axis_rxe_cpl_req_msg_len_reg = 0, m_axis_rxe_cpl_req_msg_len_next;
+reg m_axis_rxe_cpl_req_is_msg_reg = 1'b0, m_axis_rxe_cpl_req_is_msg_next;
+reg m_axis_rxe_cpl_req_is_msg_exist_reg = 1'b0, m_axis_rxe_cpl_req_is_msg_exist_next;
+reg [DESC_REQ_TAG_WIDTH-1:0] m_axis_rxe_cpl_req_desc_table_ptr_reg = 0, m_axis_rxe_cpl_req_desc_table_ptr_next;
 
 reg [RAM_ADDR_WIDTH-1:0] m_axis_rx_desc_addr_reg = {RAM_ADDR_WIDTH{1'b0}}, m_axis_rx_desc_addr_next;
 reg [DMA_CLIENT_LEN_WIDTH-1:0] m_axis_rx_desc_len_reg = {DMA_CLIENT_LEN_WIDTH{1'b0}}, m_axis_rx_desc_len_next;
 reg [DMA_CLIENT_TAG_WIDTH-1:0] m_axis_rx_desc_tag_reg = {DMA_CLIENT_TAG_WIDTH{1'b0}}, m_axis_rx_desc_tag_next;
 reg m_axis_rx_desc_valid_reg = 1'b0, m_axis_rx_desc_valid_next;
 
-reg s_axis_rx_hash_ready_reg = 1'b0, s_axis_rx_hash_ready_next;
-
 reg s_axis_rx_csum_ready_reg = 1'b0, s_axis_rx_csum_ready_next;
 
 reg [CL_MAX_RX_SIZE+1-1:0] mtu_reg = 0;
@@ -324,7 +426,6 @@
 reg [CL_RX_BUFFER_SIZE+1-1:0] buf_wr_ptr_reg = 0, buf_wr_ptr_next;
 reg [CL_RX_BUFFER_SIZE+1-1:0] buf_rd_ptr_reg = 0, buf_rd_ptr_next;
 
-reg desc_start_reg = 1'b1, desc_start_next;
 reg desc_done_reg = 1'b0, desc_done_next;
 reg [DMA_CLIENT_LEN_WIDTH-1:0] desc_len_reg = {DMA_CLIENT_LEN_WIDTH{1'b0}}, desc_len_next;
 
@@ -334,9 +435,11 @@
 reg dec_active_desc_req_2;
 
 reg [DESC_TABLE_SIZE-1:0] desc_table_active = 0;
+reg [DESC_TABLE_SIZE-1:0] desc_table_rx_finish = 0;
 reg [DESC_TABLE_SIZE-1:0] desc_table_rx_done = 0;
 reg [DESC_TABLE_SIZE-1:0] desc_table_invalid = 0;
 reg [DESC_TABLE_SIZE-1:0] desc_table_desc_fetched = 0;
+reg [DESC_TABLE_SIZE-1:0] desc_table_desc_from_rxcpl_fetched = 0;
 reg [DESC_TABLE_SIZE-1:0] desc_table_data_written = 0;
 reg [DESC_TABLE_SIZE-1:0] desc_table_cpl_write_done = 0;
 (* ram_style = "distributed", ramstyle = "no_rw_check, mlab" *)
@@ -352,6 +455,8 @@
 (* ram_style = "distributed", ramstyle = "no_rw_check, mlab" *)
 reg [DMA_CLIENT_LEN_WIDTH-1:0] desc_table_desc_len[DESC_TABLE_SIZE-1:0];
 (* ram_style = "distributed", ramstyle = "no_rw_check, mlab" *)
+reg [DMA_CLIENT_LEN_WIDTH-1:0] desc_table_desc_from_rxcpl_len[DESC_TABLE_SIZE-1:0];
+(* ram_style = "distributed", ramstyle = "no_rw_check, mlab" *)
 reg [AXIS_RX_ID_WIDTH-1:0] desc_table_id[DESC_TABLE_SIZE-1:0];
 (* ram_style = "distributed", ramstyle = "no_rw_check, mlab" *)
 reg [CL_RX_BUFFER_SIZE+1-1:0] desc_table_buf_ptr[DESC_TABLE_SIZE-1:0];
@@ -363,12 +468,24 @@
 reg [3:0] desc_table_hash_type[DESC_TABLE_SIZE-1:0];
 (* ram_style = "distributed", ramstyle = "no_rw_check, mlab" *)
 reg [15:0] desc_table_csum[DESC_TABLE_SIZE-1:0];
+//======================================
+reg [DESC_TABLE_SIZE-1:0] desc_table_cache_checked = 0;
+reg [DESC_TABLE_SIZE-1:0] desc_table_cache_exist = 0; reg [DESC_TABLE_SIZE-1:0] desc_table_is_msg = 0;
+reg [DESC_TABLE_SIZE-1:0] desc_table_rxcpl_desc_error = 0;
+reg [DESC_TABLE_SIZE-1:0] desc_table_rxcpl_read_desc_error = 0;
+reg [DESC_TABLE_SIZE-1:0] desc_table_cache_is_msg_exist = 0;
+reg [DESC_TABLE_SIZE-1:0] desc_table_desc_updated = 0;
+reg [DESC_TABLE_SIZE-1:0] desc_table_no_need_to_update_desc = 0;
+reg [RX_CPL_DESC_REQ_TAG_WIDTH-1:0] desc_table_rxcpl_desc_ptr[DESC_TABLE_SIZE-1:0];
 (* ram_style = "distributed", ramstyle = "no_rw_check, mlab" *)
-reg desc_table_read_commit[DESC_TABLE_SIZE-1:0];
+reg [MSG_ID_WIDTH-1:0] desc_table_msg_id[DESC_TABLE_SIZE-1:0];
 (* ram_style = "distributed", ramstyle = "no_rw_check, mlab" *)
-reg [DESC_TABLE_DMA_OP_COUNT_WIDTH-1:0] desc_table_write_count_start[DESC_TABLE_SIZE-1:0];
+reg [MSG_OFF_WIDTH-1:0] desc_table_msg_offset[DESC_TABLE_SIZE-1:0];
 (* ram_style = "distributed", ramstyle = "no_rw_check, mlab" *)
-reg [DESC_TABLE_DMA_OP_COUNT_WIDTH-1:0] desc_table_write_count_finish[DESC_TABLE_SIZE-1:0];
+reg [MSG_OFF_WIDTH-1:0] desc_table_msg_len[DESC_TABLE_SIZE-1:0];
+
+reg [AXIS_DESC_DATA_WIDTH-1:0]          desc_table_desc_info_tdata [DESC_TABLE_SIZE-1:0];
+//======================================
 
 reg [CL_DESC_TABLE_SIZE+1-1:0] desc_table_start_ptr_reg = 0;
 reg [REQ_TAG_WIDTH-1:0] desc_table_start_tag;
@@ -380,6 +497,10 @@
 reg [PTP_TS_WIDTH-1:0] desc_table_rx_finish_ptp_ts;
 reg [31:0] desc_table_rx_finish_hash;
 reg [3:0] desc_table_rx_finish_hash_type;
+reg desc_table_rx_finish_is_msg;
+reg [MSG_ID_WIDTH-1:0] desc_table_rx_finish_msg_id;
+reg [MSG_OFF_WIDTH-1:0] desc_table_rx_finish_msg_len;
+reg [MSG_OFF_WIDTH-1:0] desc_table_rx_finish_msg_offset;
 reg desc_table_rx_finish_en;
 reg [CL_DESC_TABLE_SIZE-1:0] desc_table_store_queue_ptr;
 reg [QUEUE_INDEX_WIDTH-1:0] desc_table_store_queue;
@@ -394,6 +515,11 @@
 reg [CL_DESC_TABLE_SIZE-1:0] desc_table_desc_fetched_ptr;
 reg [DMA_CLIENT_LEN_WIDTH-1:0] desc_table_desc_fetched_len;
 reg desc_table_desc_fetched_en;
+
+reg [CL_DESC_TABLE_SIZE-1:0] desc_table_desc_from_rxcpl_fetched_ptr;
+reg [DMA_CLIENT_LEN_WIDTH-1:0] desc_table_desc_from_rxcpl_fetched_len;
+reg desc_table_desc_from_rxcpl_fetched_en;
+
 reg [CL_DESC_TABLE_SIZE-1:0] desc_table_data_written_ptr;
 reg desc_table_data_written_en;
 reg [CL_DESC_TABLE_SIZE+1-1:0] desc_table_store_csum_ptr_reg = 0;
@@ -405,12 +531,43 @@
 reg desc_table_cpl_write_done_en;
 reg [CL_DESC_TABLE_SIZE+1-1:0] desc_table_finish_ptr_reg = 0;
 reg desc_table_finish_en;
-reg [CL_DESC_TABLE_SIZE+1-1:0] desc_table_write_start_ptr;
-reg desc_table_write_start_commit;
-reg desc_table_write_start_init;
-reg desc_table_write_start_en;
-reg [CL_DESC_TABLE_SIZE+1-1:0] desc_table_write_finish_ptr;
-reg desc_table_write_finish_en;
+
+//======================================
+reg [CL_DESC_TABLE_SIZE+1-1:0] desc_table_rxcpl_alloc_entry_start_ptr_reg = 0;
+reg desc_table_rxcpl_alloc_entry_start_en;
+reg [CL_DESC_TABLE_SIZE-1:0] desc_table_cache_check_ptr;
+reg [RX_CPL_DESC_REQ_TAG_WIDTH-1:0] desc_table_cache_check_rxcpl_desc_ptr;
+reg desc_table_cache_check_entry_exist;
+reg desc_table_cache_check_is_msg_exist;
+reg desc_table_cache_check_rxcpl_desc_error;
+reg desc_table_cache_check_en;
+reg desc_table_desc_updated_en;
+reg [CL_DESC_TABLE_SIZE-1:0] desc_table_desc_updated_ptr;
+reg rxcpl_read_desc_error_en;
+reg [CL_DESC_TABLE_SIZE-1:0] rxcpl_read_desc_error_ptr;
+reg no_need_to_update_desc_en;
+reg [CL_DESC_TABLE_SIZE-1:0] no_need_to_update_desc_ptr;
+
+reg [CL_DESC_TABLE_SIZE-1:0]                desc_table_update_ptr;
+reg [AXIS_DESC_DATA_WIDTH-1:0]              desc_table_update_desc_tdata;
+reg [QUEUE_INDEX_WIDTH-1:0]                 desc_table_update_desc_queue;
+reg [QUEUE_PTR_WIDTH-1:0]                   desc_table_update_desc_queue_ptr;
+reg [AXIS_RX_ID_WIDTH-1:0]                  desc_table_update_desc_id;
+reg                                         desc_table_update_en;
+
+
+reg [AXIS_DESC_DATA_WIDTH-1:0]              desc_table_store_desc_info_tdata;
+reg [CL_DESC_TABLE_SIZE-1:0]                desc_table_store_desc_info_ptr;
+reg                                         desc_table_store_desc_info_en;
+
+reg [CL_DESC_TABLE_SIZE:0]                  desc_table_update_desc_start_ptr_reg = 0;
+reg                                         desc_table_update_desc_start_en;
+
+reg [CL_DESC_TABLE_SIZE:0] desc_table_dma_transfer_start_ptr_reg = 0;
+reg desc_table_dma_transfer_start_en;
+
+reg dma_transfer_ready_reg = 0, dma_transfer_ready_next;
+//======================================
 
 // internal datapath
 reg  [DMA_ADDR_WIDTH-1:0]  m_axis_dma_write_desc_dma_addr_int;
@@ -433,10 +590,16 @@
 
 assign s_axis_desc_tready = s_axis_desc_tready_reg;
 
-assign m_axis_cpl_req_queue = m_axis_cpl_req_queue_reg;
-assign m_axis_cpl_req_tag = m_axis_cpl_req_tag_reg;
-assign m_axis_cpl_req_data = m_axis_cpl_req_data_reg;
-assign m_axis_cpl_req_valid = m_axis_cpl_req_valid_reg;
+assign m_axis_rxe_cpl_req_queue = m_axis_rxe_cpl_req_queue_reg;
+assign m_axis_rxe_cpl_req_tag   = m_axis_rxe_cpl_req_tag_reg;
+assign m_axis_rxe_cpl_req_cpl_desc_ptr = m_axis_rxe_cpl_req_cpl_desc_ptr_reg;
+assign m_axis_rxe_cpl_req_data  = m_axis_rxe_cpl_req_data_reg;
+assign m_axis_rxe_cpl_req_valid = m_axis_rxe_cpl_req_valid_reg;
+assign m_axis_rxe_cpl_req_msg_off = m_axis_rxe_cpl_req_msg_off_reg;
+assign m_axis_rxe_cpl_req_msg_len = m_axis_rxe_cpl_req_msg_len_reg;
+assign m_axis_rxe_cpl_req_is_msg = m_axis_rxe_cpl_req_is_msg_reg;
+assign m_axis_rxe_cpl_req_is_msg_exist = m_axis_rxe_cpl_req_is_msg_exist_reg;
+assign m_axis_rxe_cpl_req_desc_table_ptr = m_axis_rxe_cpl_req_desc_table_ptr_reg;
 
 assign m_axis_rx_desc_addr = m_axis_rx_desc_addr_reg;
 assign m_axis_rx_desc_len = m_axis_rx_desc_len_reg;
@@ -445,40 +608,85 @@
 
 assign s_axis_rx_csum_ready = s_axis_rx_csum_ready_reg;
 
-// reg [15:0] stall_cnt = 0;
-// wire stalled = stall_cnt[12];
-
-// // assign dbg = stalled;
-
-// always @(posedge clk) begin
-//     if (rst) begin
-//         stall_cnt <= 0;
-//     end else begin
-//         if (s_axis_rx_req_ready) begin
-//             stall_cnt <= 0;
-//         end else begin
-//             stall_cnt <= stall_cnt + 1;
-//         end
-//     end
-// end
-
-// ila_0 ila_inst (
-//     .clk(clk),
-//     .trig_out(),
-//     .trig_out_ack(1'b0),
-//     .trig_in(1'b0),
-//     .trig_in_ack(),
-//     .probe0({desc_table_active, desc_table_rx_done, desc_table_invalid, desc_table_desc_fetched, desc_table_data_written, desc_table_cpl_write_done, pkt_table_active,
-//         m_axis_dma_read_desc_len, m_axis_dma_read_desc_tag, m_axis_dma_read_desc_valid, m_axis_dma_read_desc_ready,
-//         s_axis_dma_read_desc_status_tag, s_axis_dma_read_desc_status_valid,
-//         m_axis_dma_write_desc_len, m_axis_dma_write_desc_tag, m_axis_dma_write_desc_valid, m_axis_dma_write_desc_ready,
-//         s_axis_dma_write_desc_status_tag, s_axis_dma_write_desc_status_valid}),
-//     .probe1(0),
-//     .probe2(0),
-//     .probe3(s_axis_rx_req_ready),
-//     .probe4({desc_table_start_ptr_reg, desc_table_rx_finish_ptr, desc_table_desc_read_start_ptr_reg, desc_table_data_write_start_ptr_reg, desc_table_cpl_enqueue_start_ptr_reg, desc_table_finish_ptr_reg, stall_cnt}),
-//     .probe5(0)
-// );
+//======================================
+reg m_axis_rxe_req_valid_reg = 0, m_axis_rxe_req_valid_next;
+reg [DESC_REQ_TAG_WIDTH-1:0] m_axis_rxe_req_tag_reg = 0, m_axis_rxe_req_tag_next;
+reg m_axis_rxe_req_is_msg_reg = 0, m_axis_rxe_req_is_msg_next;
+reg [MSG_ID_WIDTH-1:0] m_axis_rxe_req_msg_id_reg, m_axis_rxe_req_msg_id_next;
+reg [MSG_OFF_WIDTH-1:0] m_axis_rxe_req_msg_len_reg, m_axis_rxe_req_msg_len_next;
+reg [MSG_OFF_WIDTH-1:0] m_axis_rxe_req_msg_off_reg, m_axis_rxe_req_msg_off_next;
+
+assign m_axis_rxe_req_valid = m_axis_rxe_req_valid_reg;
+assign m_axis_rxe_req_tag = m_axis_rxe_req_tag_reg;
+assign m_axis_rxe_req_is_msg = m_axis_rxe_req_is_msg_reg;
+assign m_axis_rxe_req_msg_id = m_axis_rxe_req_msg_id_reg;
+assign m_axis_rxe_req_msg_len = m_axis_rxe_req_msg_len_reg;
+assign m_axis_rxe_req_msg_off = m_axis_rxe_req_msg_off_reg;
+
+reg [DESC_REQ_TAG_WIDTH-1:0]                m_axis_rxe_rxcpl_req_desc_tag_reg = 0, m_axis_rxe_rxcpl_req_desc_tag_next;
+reg [RX_CPL_DESC_REQ_TAG_WIDTH-1:0]         m_axis_rxe_rxcpl_req_desc_queue_reg = 0, m_axis_rxe_rxcpl_req_desc_queue_next;
+reg                                         m_axis_rxe_rxcpl_req_desc_valid_reg = 0 ,m_axis_rxe_rxcpl_req_desc_valid_next;
+
+assign m_axis_rxe_rxcpl_req_desc_valid = m_axis_rxe_rxcpl_req_desc_valid_reg;
+assign m_axis_rxe_rxcpl_req_desc_tag   = m_axis_rxe_rxcpl_req_desc_tag_reg;
+assign m_axis_rxe_rxcpl_req_desc_queue = m_axis_rxe_rxcpl_req_desc_queue_reg;
+
+reg [AXIS_DESC_DATA_WIDTH-1:0]              m_axis_rxe_rxcpl_update_desc_tdata_reg = 0, m_axis_rxe_rxcpl_update_desc_tdata_next;
+reg [RX_CPL_DESC_REQ_TAG_WIDTH-1:0]         m_axis_rxe_rxcpl_update_desc_tag_reg = 0, m_axis_rxe_rxcpl_update_desc_tag_next;
+reg [DESC_REQ_TAG_WIDTH-1:0]                m_axis_rxe_rxcpl_update_desc_index_reg = 0, m_axis_rxe_rxcpl_update_desc_index_next;
+reg [QUEUE_INDEX_WIDTH-1:0]                 m_axis_rxe_rxcpl_update_desc_queue_reg = 0, m_axis_rxe_rxcpl_update_desc_queue_next;
+reg [QUEUE_PTR_WIDTH-1:0]                   m_axis_rxe_rxcpl_update_desc_queue_ptr_reg = 0, m_axis_rxe_rxcpl_update_desc_queue_ptr_next;
+reg [AXIS_RX_ID_WIDTH-1:0]                  m_axis_rxe_rxcpl_update_desc_id_reg = 0, m_axis_rxe_rxcpl_update_desc_id_next;
+reg                                         m_axis_rxe_rxcpl_update_desc_tvalid_reg = 0, m_axis_rxe_rxcpl_update_desc_tvalid_next;
+
+assign m_axis_rxe_rxcpl_update_desc_tdata = m_axis_rxe_rxcpl_update_desc_tdata_reg;
+assign m_axis_rxe_rxcpl_update_desc_tag = m_axis_rxe_rxcpl_update_desc_tag_reg;
+assign m_axis_rxe_rxcpl_update_desc_index = m_axis_rxe_rxcpl_update_desc_index_reg;
+assign m_axis_rxe_rxcpl_update_desc_queue = m_axis_rxe_rxcpl_update_desc_queue_reg;
+assign m_axis_rxe_rxcpl_update_desc_queue_ptr = m_axis_rxe_rxcpl_update_desc_queue_ptr_reg;
+assign m_axis_rxe_rxcpl_update_desc_id = m_axis_rxe_rxcpl_update_desc_id_reg;
+assign m_axis_rxe_rxcpl_update_desc_tvalid = m_axis_rxe_rxcpl_update_desc_tvalid_reg;
+
+// ACK to egress
+// reg [CL_DESC_TABLE_SIZE:0]  desc_table_ack_to_egress_start_ptr_reg = 0;
+// reg desc_table_ack_to_egress_start_en;
+// 
+// 
+// reg [AXIS_DATA_WIDTH-1:0]                   m_axis_ack_tdata_reg = 0, m_axis_ack_tdata_next;
+// reg [AXIS_KEEP_WIDTH-1:0]                   m_axis_ack_tkeep_reg = 0, m_axis_ack_tkeep_next;
+// reg                                         m_axis_ack_tvalid_reg = 0, m_axis_ack_tvalid_next;
+// reg                                         m_axis_ack_tlast_reg = 0, m_axis_ack_tlast_next;
+// reg [AXIS_TX_ID_WIDTH-1:0]                  m_axis_ack_tid_reg = 0, m_axis_ack_tid_next;
+// reg [AXIS_TX_DEST_WIDTH-1:0]                m_axis_ack_tdest_reg = 0, m_axis_ack_tdest_next;
+// reg [AXIS_TX_USER_WIDTH-1:0]                m_axis_ack_tuser_reg = 0, m_axis_ack_tuser_next;
+// 
+// assign m_axis_ack_tdata = m_axis_ack_tdata_reg;
+// assign m_axis_ack_tkeep = m_axis_ack_tkeep_reg;
+// assign m_axis_ack_tvalid = m_axis_ack_tvalid_reg;
+// assign m_axis_ack_tlast = m_axis_ack_tlast_reg;
+// assign m_axis_ack_tid = m_axis_ack_tid_reg;
+// assign m_axis_ack_tdest = m_axis_ack_tdest_reg;
+// assign m_axis_ack_tuser = m_axis_ack_tuser_reg;
+
+// RXE invalidate RXCPL entry
+reg [RX_CPL_DESC_REQ_TAG_WIDTH-1:0] m_axis_rxe_rxcpl_invalidate_entry_index_reg = 0, m_axis_rxe_rxcpl_invalidate_entry_index_next;
+reg m_axis_rxe_rxcpl_invalidate_entry_valid_reg = 0, m_axis_rxe_rxcpl_invalidate_entry_valid_next;
+
+assign m_axis_rxe_rxcpl_invalidate_entry_index = m_axis_rxe_rxcpl_invalidate_entry_index_reg;
+assign m_axis_rxe_rxcpl_invalidate_entry_valid = m_axis_rxe_rxcpl_invalidate_entry_valid_reg;
+
+//======================================
+localparam META_WIDTH = MSG_ID_WIDTH + 1 + MSG_OFF_WIDTH*2;
+
+wire [MSG_ID_WIDTH-1:0]         s_axis_rx_desc_msg_id;
+wire                            s_axis_rx_desc_is_msg;
+wire [MSG_OFF_WIDTH-1:0]        s_axis_rx_desc_msg_len;
+wire [MSG_OFF_WIDTH-1:0]        s_axis_rx_desc_msg_offset;
+
+assign {s_axis_rx_desc_msg_id,
+    s_axis_rx_desc_is_msg,
+    s_axis_rx_desc_msg_len,
+    s_axis_rx_desc_msg_offset} = s_axis_rx_desc_status_user[AXIS_RX_USER_WIDTH-1 -: META_WIDTH];
 
 wire [QUEUE_INDEX_WIDTH-1:0] queue_map_resp_queue;
 wire [CL_DESC_TABLE_SIZE+1-1:0] queue_map_resp_tag;
@@ -516,12 +724,20 @@
     .reg_rd_wait(ctrl_reg_rd_wait),
     .reg_rd_ack(ctrl_reg_rd_ack),
 
+    .ingress_enable(ingress_enable),
+    .rxcpl_hard_timeout_in_us(rxcpl_hard_timeout_in_us),
+    .ctrl_cnt(ctrl_cnt),
+
     /*
      * Request input
      */
     .req_id(s_axis_rx_desc_status_id),
     .req_dest(s_axis_rx_desc_status_dest),
-    .req_hash(s_axis_rx_desc_status_user >> TUSER_HASH_OFFSET),
+    // .req_hash(s_axis_rx_desc_status_user >> TUSER_HASH_OFFSET),
+    .req_hash(0),
+    //
+    // .req_rx_routing(s_axis_rx_desc_status_user >> TUSER_ROUTING_OFFSET),
+    .req_rx_routing(s_axis_rx_desc_status_user[TUSER_ROUTING_OFFSET +: 32]),
     .req_tag(s_axis_rx_desc_status_tag),
     .req_valid(s_axis_rx_desc_status_valid),
 
@@ -533,6 +749,8 @@
     .resp_valid(queue_map_resp_valid)
 );
 
+//================================================
+
 integer i;
 
 initial begin
@@ -543,19 +761,26 @@
         desc_table_cpl_queue[i] = 0;
         desc_table_dma_len[i] = 0;
         desc_table_desc_len[i] = 0;
+        desc_table_desc_from_rxcpl_len[i] = 0;
         desc_table_id[i] = 0;
         desc_table_buf_ptr[i] = 0;
         desc_table_ptp_ts[i] = 0;
         desc_table_hash[i] = 0;
         desc_table_hash_type[i] = 0;
         desc_table_csum[i] = 0;
-        desc_table_read_commit[i] = 0;
-        desc_table_write_count_start[i] = 0;
-        desc_table_write_count_finish[i] = 0;
+        //=======================================
+        desc_table_rxcpl_desc_ptr[i] = 0;
+        desc_table_msg_id[i] = 0;
+        desc_table_msg_offset[i] = 0;
+        desc_table_msg_len[i] = 0;
+
+        desc_table_desc_info_tdata[i] = 0;
     end
 end
 
+
 always @* begin
+
     s_axis_rx_req_ready_next = 1'b0;
 
     m_axis_rx_req_status_len_next = m_axis_rx_req_status_len_reg;
@@ -568,24 +793,27 @@
 
     s_axis_desc_tready_next = 1'b0;
 
-    m_axis_cpl_req_queue_next = m_axis_cpl_req_queue_reg;
-    m_axis_cpl_req_tag_next = m_axis_cpl_req_tag_reg;
-    m_axis_cpl_req_data_next = m_axis_cpl_req_data_reg;
-    m_axis_cpl_req_valid_next = m_axis_cpl_req_valid_reg && !m_axis_cpl_req_ready;
+    m_axis_rxe_cpl_req_queue_next = m_axis_rxe_cpl_req_queue_reg;
+    m_axis_rxe_cpl_req_tag_next   = m_axis_rxe_cpl_req_tag_reg;
+    m_axis_rxe_cpl_req_cpl_desc_ptr_next = m_axis_rxe_cpl_req_cpl_desc_ptr_reg;
+    m_axis_rxe_cpl_req_data_next  = m_axis_rxe_cpl_req_data_reg;
+    m_axis_rxe_cpl_req_valid_next = m_axis_rxe_cpl_req_valid_reg && !m_axis_rxe_cpl_req_ready;
+    m_axis_rxe_cpl_req_is_msg_next = m_axis_rxe_cpl_req_is_msg_reg;
+    m_axis_rxe_cpl_req_is_msg_exist_next = m_axis_rxe_cpl_req_is_msg_exist_reg;
+    m_axis_rxe_cpl_req_msg_off_next = m_axis_rxe_cpl_req_msg_off_reg;
+    m_axis_rxe_cpl_req_msg_len_next = m_axis_rxe_cpl_req_msg_len_reg;
+    m_axis_rxe_cpl_req_desc_table_ptr_next = m_axis_rxe_cpl_req_desc_table_ptr_reg;
 
     m_axis_rx_desc_addr_next = m_axis_rx_desc_addr_reg;
     m_axis_rx_desc_len_next = m_axis_rx_desc_len_reg;
     m_axis_rx_desc_tag_next = m_axis_rx_desc_tag_reg;
     m_axis_rx_desc_valid_next = m_axis_rx_desc_valid_reg && !m_axis_rx_desc_ready;
 
-    s_axis_rx_hash_ready_next = 1'b0;
-
     s_axis_rx_csum_ready_next = 1'b0;
 
     buf_wr_ptr_next = buf_wr_ptr_reg;
     buf_rd_ptr_next = buf_rd_ptr_reg;
 
-    desc_start_next = desc_start_reg;
     desc_done_next = desc_done_reg;
     desc_len_next = desc_len_reg;
 
@@ -602,6 +830,10 @@
     desc_table_rx_finish_ptp_ts = s_axis_rx_desc_status_user >> TUSER_PTP_TS_OFFSET;
     desc_table_rx_finish_hash = s_axis_rx_desc_status_user >> TUSER_HASH_OFFSET;
     desc_table_rx_finish_hash_type = s_axis_rx_desc_status_user >> TUSER_HASH_TYPE_OFFSET;
+    desc_table_rx_finish_is_msg = s_axis_rx_desc_is_msg;
+    desc_table_rx_finish_msg_id = s_axis_rx_desc_msg_id;
+    desc_table_rx_finish_msg_len = s_axis_rx_desc_msg_len;
+    desc_table_rx_finish_msg_offset = s_axis_rx_desc_msg_offset;
     desc_table_rx_finish_en = 1'b0;
     desc_table_store_queue_ptr = queue_map_resp_tag;
     desc_table_store_queue = queue_map_resp_queue;
@@ -615,36 +847,106 @@
     desc_table_desc_fetched_ptr = s_axis_desc_tid & DESC_PTR_MASK;
     desc_table_desc_fetched_len = desc_len_reg + s_axis_desc_tdata[63:32];
     desc_table_desc_fetched_en = 1'b0;
+
+    desc_table_desc_from_rxcpl_fetched_ptr = s_axis_rxcpl_rxe_resp_desc_tag & DESC_PTR_MASK;
+    desc_table_desc_from_rxcpl_fetched_len = s_axis_rxcpl_rxe_resp_desc_tdata[63:32];
+    desc_table_desc_from_rxcpl_fetched_en = 1'b0;
+
+
     desc_table_data_written_ptr = s_axis_dma_write_desc_status_tag & DESC_PTR_MASK;
     desc_table_data_written_en = 1'b0;
     desc_table_store_csum = s_axis_rx_csum;
     desc_table_store_csum_en = 1'b0;
     desc_table_cpl_enqueue_start_en = 1'b0;
-    desc_table_cpl_write_done_ptr = s_axis_cpl_req_status_tag & DESC_PTR_MASK;
+    // desc_table_cpl_write_done_ptr = s_axis_cpl_req_status_tag & DESC_PTR_MASK;
+    desc_table_cpl_write_done_ptr = s_axis_cpl_rxe_status_tag & DESC_PTR_MASK;
     desc_table_cpl_write_done_en = 1'b0;
     desc_table_finish_en = 1'b0;
-    desc_table_write_start_ptr = s_axis_desc_tid;
-    desc_table_write_start_commit = 1'b0;
-    desc_table_write_start_init = 1'b0;
-    desc_table_write_start_en = 1'b0;
-    desc_table_write_finish_ptr = s_axis_dma_write_desc_status_tag;
-    desc_table_write_finish_en = 1'b0;
-
-    m_axis_dma_write_desc_dma_addr_int = s_axis_desc_tdata[127:64];
-    m_axis_dma_write_desc_ram_addr_int = (desc_table_buf_ptr[s_axis_desc_tid & DESC_PTR_MASK] & RX_BUFFER_PTR_MASK) + desc_len_reg + RX_BUFFER_OFFSET;
-    if (s_axis_desc_tdata[63:32] < (desc_table_dma_len[s_axis_desc_tid & DESC_PTR_MASK] - desc_len_reg)) begin
-        // limit write to length provided in descriptor
-        m_axis_dma_write_desc_len_int = s_axis_desc_tdata[63:32];
-    end else begin
-        // write actual packet length
-        m_axis_dma_write_desc_len_int = desc_table_dma_len[s_axis_desc_tid & DESC_PTR_MASK] - desc_len_reg;
-    end
-    m_axis_dma_write_desc_tag_int = s_axis_desc_tid & DESC_PTR_MASK;
+
+    //
+    desc_table_store_desc_info_en = 1'b0;
+    desc_table_store_desc_info_tdata = s_axis_desc_tdata;
+    desc_table_store_desc_info_ptr = s_axis_desc_tid & DESC_PTR_MASK;
+
+    desc_table_update_desc_start_en = 1'b0;
+
+
+    desc_table_desc_updated_en = 1'b0;
+    desc_table_desc_updated_ptr = 0;
+
+    rxcpl_read_desc_error_en = 1'b0;
+    rxcpl_read_desc_error_ptr = 0;
+
+    no_need_to_update_desc_en = 1'b0;
+    no_need_to_update_desc_ptr = 0;
+
+    m_axis_dma_write_desc_dma_addr_int = 0;
+    m_axis_dma_write_desc_ram_addr_int = 0;
+    m_axis_dma_write_desc_len_int = 0;
+    m_axis_dma_write_desc_tag_int = 0;
     m_axis_dma_write_desc_valid_int = 1'b0;
 
+    //==========================================
+    desc_table_cache_check_en = 1'b0;
+    desc_table_cache_check_entry_exist = 0;
+    desc_table_cache_check_is_msg_exist = 0;
+    desc_table_cache_check_ptr = 0;
+    desc_table_cache_check_rxcpl_desc_error = 0;
+    desc_table_cache_check_rxcpl_desc_ptr = 0;
+
+    // RXE invalidate RXCPL entry
+    m_axis_rxe_rxcpl_invalidate_entry_valid_next = 1'b0;
+    m_axis_rxe_rxcpl_invalidate_entry_index_next = 0;
+
+    // rxe-to-rxcpl request for entry allocation
+    m_axis_rxe_req_valid_next = m_axis_rxe_req_valid_reg & !m_axis_rxe_req_ready;
+    m_axis_rxe_req_tag_next = m_axis_rxe_req_tag_reg;
+    m_axis_rxe_req_is_msg_next = m_axis_rxe_req_is_msg_reg;
+    m_axis_rxe_req_msg_id_next = m_axis_rxe_req_msg_id_reg;
+    m_axis_rxe_req_msg_len_next = m_axis_rxe_req_msg_len_reg;
+    m_axis_rxe_req_msg_off_next = m_axis_rxe_req_msg_off_reg;
+    desc_table_rxcpl_alloc_entry_start_en = 1'b0;
+
+    m_axis_rxe_rxcpl_req_desc_valid_next = m_axis_rxe_rxcpl_req_desc_valid_reg & !m_axis_rxe_rxcpl_req_desc_ready;
+    m_axis_rxe_rxcpl_req_desc_tag_next = m_axis_rxe_rxcpl_req_desc_tag_reg;
+    m_axis_rxe_rxcpl_req_desc_queue_next = m_axis_rxe_rxcpl_req_desc_queue_reg;
+
+    m_axis_rxe_rxcpl_update_desc_tdata_next     = m_axis_rxe_rxcpl_update_desc_tdata_reg;
+    m_axis_rxe_rxcpl_update_desc_tag_next       = m_axis_rxe_rxcpl_update_desc_tag_reg;
+    m_axis_rxe_rxcpl_update_desc_index_next       = m_axis_rxe_rxcpl_update_desc_index_reg;
+    m_axis_rxe_rxcpl_update_desc_queue_next     = m_axis_rxe_rxcpl_update_desc_queue_reg;
+    m_axis_rxe_rxcpl_update_desc_queue_ptr_next = m_axis_rxe_rxcpl_update_desc_queue_ptr_reg;
+    m_axis_rxe_rxcpl_update_desc_id_next        = m_axis_rxe_rxcpl_update_desc_id_reg;
+    m_axis_rxe_rxcpl_update_desc_tvalid_next    = m_axis_rxe_rxcpl_update_desc_tvalid_reg && !m_axis_rxe_rxcpl_update_desc_tready;
+
+    desc_table_update_desc_tdata        = s_axis_rxcpl_rxe_resp_desc_tdata;
+    desc_table_update_ptr               = s_axis_rxcpl_rxe_resp_desc_tag & DESC_PTR_MASK;
+    desc_table_update_desc_queue        = s_axis_rxcpl_rxe_resp_desc_queue;
+    desc_table_update_desc_queue_ptr    = s_axis_rxcpl_rxe_resp_desc_queue_ptr;
+    desc_table_update_desc_id           = s_axis_rxcpl_rxe_resp_desc_id;
+    desc_table_update_en                = 1'b0;
+
+    desc_table_dma_transfer_start_en = 1'b0;
+    dma_transfer_ready_next = dma_transfer_ready_reg;
+    // ACK to egress
+    // desc_table_ack_to_egress_start_en = 1'b0;
+
+    // m_axis_ack_tdata_next = 0;
+    // m_axis_ack_tkeep_next = 0;
+    // m_axis_ack_tvalid_next = 1'b0;
+    // m_axis_ack_tlast_next = 1'b0;
+    // m_axis_ack_tuser_next = 0;
+    // m_axis_ack_tdest_next = 0;
+    // m_axis_ack_tid_next = 0;
+
+    //==========================================
+
     // receive packet
     // wait for receive request
-    s_axis_rx_req_ready_next = enable && ($unsigned(buf_wr_ptr_reg - buf_rd_ptr_reg) < RX_BUFFER_SIZE - MAX_RX_SIZE) && !desc_table_active[desc_table_start_ptr_reg & DESC_PTR_MASK] && ($unsigned(desc_table_start_ptr_reg - desc_table_finish_ptr_reg) < DESC_TABLE_SIZE) && (!m_axis_rx_desc_valid_reg || m_axis_rx_desc_ready);
+    s_axis_rx_req_ready_next = enable && ($unsigned(buf_wr_ptr_reg - buf_rd_ptr_reg) < RX_BUFFER_SIZE - MAX_RX_SIZE) 
+                                    && !desc_table_active[desc_table_start_ptr_reg & DESC_PTR_MASK] 
+                                    && ($unsigned(desc_table_start_ptr_reg - desc_table_finish_ptr_reg) < DESC_TABLE_SIZE) 
+                                    && (!m_axis_rx_desc_valid_reg || m_axis_rx_desc_ready);
     if (s_axis_rx_req_ready && s_axis_rx_req_valid) begin
         s_axis_rx_req_ready_next = 1'b0;
 
@@ -655,7 +957,7 @@
 
         // initiate receive operation
         m_axis_rx_desc_addr_next = (buf_wr_ptr_reg & RX_BUFFER_PTR_MASK) + RX_BUFFER_OFFSET;
-        m_axis_rx_desc_len_next = mtu_reg;
+        m_axis_rx_desc_len_next = mtu_reg; // TODO: we may need to change this?
         m_axis_rx_desc_tag_next = desc_table_start_ptr_reg & DESC_PTR_MASK;
         m_axis_rx_desc_valid_next = 1'b1;
 
@@ -665,42 +967,101 @@
         if ((buf_wr_ptr_reg & RX_BUFFER_PTR_MASK) + mtu_reg > RX_BUFFER_SIZE - MAX_RX_SIZE) begin
             buf_wr_ptr_next = ~buf_wr_ptr_reg & ~RX_BUFFER_PTR_MASK;
         end
+
     end
 
     // receive done
     // wait for DMA completion
+    // NOTE: data is stored in local RAM
     if (s_axis_rx_desc_status_valid) begin
         // update entry in descriptor table
         desc_table_rx_finish_ptr = s_axis_rx_desc_status_tag;
         desc_table_rx_finish_len = s_axis_rx_desc_status_len;
-        desc_table_rx_finish_id = s_axis_rx_desc_status_id;
+        desc_table_rx_finish_id = s_axis_rx_desc_status_id; // NOTE: port
         desc_table_rx_finish_ptp_ts = s_axis_rx_desc_status_user >> TUSER_PTP_TS_OFFSET;
         desc_table_rx_finish_hash = s_axis_rx_desc_status_user >> TUSER_HASH_OFFSET;
         desc_table_rx_finish_hash_type = s_axis_rx_desc_status_user >> TUSER_HASH_TYPE_OFFSET;
+        desc_table_rx_finish_msg_id = s_axis_rx_desc_msg_id;
+        desc_table_rx_finish_msg_len = s_axis_rx_desc_msg_len;
+        desc_table_rx_finish_msg_offset = s_axis_rx_desc_msg_offset;
+        desc_table_rx_finish_is_msg = s_axis_rx_desc_is_msg;
         desc_table_rx_finish_en = 1'b1;
     end
 
     // store queue
     if (queue_map_resp_valid) begin
+        // mark rx done for desc
         desc_table_store_queue_ptr = queue_map_resp_tag;
         desc_table_store_queue = queue_map_resp_queue;
         desc_table_store_queue_en = 1'b1;
     end
 
+    //===============================
+    if (desc_table_active[desc_table_rxcpl_alloc_entry_start_ptr_reg & DESC_PTR_MASK]
+        && desc_table_rxcpl_alloc_entry_start_ptr_reg != desc_table_start_ptr_reg
+        && desc_table_rx_finish[desc_table_rxcpl_alloc_entry_start_ptr_reg & DESC_PTR_MASK]
+        && desc_table_rx_done[desc_table_rxcpl_alloc_entry_start_ptr_reg & DESC_PTR_MASK]
+        && (!m_axis_rxe_req_valid_reg || m_axis_rxe_req_ready)) begin 
+        // request to rxcpl
+        m_axis_rxe_req_valid_next   = 1'b1;
+        m_axis_rxe_req_tag_next     = desc_table_rxcpl_alloc_entry_start_ptr_reg & DESC_PTR_MASK;
+        m_axis_rxe_req_is_msg_next  = desc_table_is_msg[desc_table_rxcpl_alloc_entry_start_ptr_reg & DESC_PTR_MASK];
+        m_axis_rxe_req_msg_id_next  = desc_table_msg_id[desc_table_rxcpl_alloc_entry_start_ptr_reg & DESC_PTR_MASK];
+        m_axis_rxe_req_msg_len_next = desc_table_msg_len[desc_table_rxcpl_alloc_entry_start_ptr_reg & DESC_PTR_MASK];
+        m_axis_rxe_req_msg_off_next = desc_table_msg_offset[desc_table_rxcpl_alloc_entry_start_ptr_reg & DESC_PTR_MASK];
+
+        desc_table_rxcpl_alloc_entry_start_en = 1'b1;
+    end
+
+    // handle rxcpl response
+    if (s_axis_rxcpl_resp_valid) begin
+        desc_table_cache_check_en = 1'b1;
+        desc_table_cache_check_ptr = s_axis_rxcpl_resp_tag & DESC_PTR_MASK;
+        desc_table_cache_check_rxcpl_desc_ptr = s_axis_rxcpl_resp_queue;
+        desc_table_cache_check_entry_exist = s_axis_rxcpl_resp_desc_exist;
+        desc_table_cache_check_is_msg_exist = s_axis_rxcpl_resp_is_msg_exist;
+        desc_table_cache_check_rxcpl_desc_error = s_axis_rxcpl_resp_desc_error;
+    end
+    //===============================
+
     // descriptor fetch
-    if (desc_table_active[desc_table_dequeue_start_ptr_reg & DESC_PTR_MASK] && desc_table_dequeue_start_ptr_reg != desc_table_start_ptr_reg) begin
-        if (desc_table_rx_done[desc_table_dequeue_start_ptr_reg & DESC_PTR_MASK] && !m_axis_desc_req_valid && active_desc_req_count_reg < MAX_DESC_REQ) begin
-            // update entry in descriptor table
-            desc_table_dequeue_start_en = 1'b1;
+    if (desc_table_active[desc_table_dequeue_start_ptr_reg & DESC_PTR_MASK] 
+        && desc_table_dequeue_start_ptr_reg != desc_table_rxcpl_alloc_entry_start_ptr_reg
+        && desc_table_dequeue_start_ptr_reg != desc_table_start_ptr_reg) begin
+        // NOTE: all the pkt frames stored in local RAM
+        // if (desc_table_rx_done[desc_table_dequeue_start_ptr_reg & DESC_PTR_MASK] 
+        if (desc_table_cache_checked[desc_table_dequeue_start_ptr_reg & DESC_PTR_MASK]) begin
+
+            if (desc_table_rxcpl_desc_error[desc_table_dequeue_start_ptr_reg & DESC_PTR_MASK]) begin
+                desc_table_dequeue_start_en = 1'b1; // --> update desc_table_dequeue_start_ptr_reg
+            end
+            // not cached, fetch from DESC FETCH module
+            else if (desc_table_cache_exist[desc_table_dequeue_start_ptr_reg & DESC_PTR_MASK] == 0) begin
+                if (!m_axis_desc_req_valid && active_desc_req_count_reg < MAX_DESC_REQ) begin
 
             // initiate descriptor fetch
             m_axis_desc_req_queue_next = desc_table_queue[desc_table_dequeue_start_ptr_reg & DESC_PTR_MASK];
             m_axis_desc_req_tag_next = desc_table_dequeue_start_ptr_reg & DESC_PTR_MASK;
             m_axis_desc_req_valid_next = 1'b1;
 
+                    // update entry in descriptor table
+                    desc_table_dequeue_start_en = 1'b1; // --> update desc_table_dequeue_start_ptr_reg
+                    //
             inc_active_desc_req = 1'b1;
         end
     end
+            else begin
+                if (!m_axis_rxe_rxcpl_req_desc_valid || m_axis_rxe_rxcpl_req_desc_ready) begin
+                    // desc info cached, ask rxcpl for the desc info
+                    m_axis_rxe_rxcpl_req_desc_valid_next = 1'b1;
+                    m_axis_rxe_rxcpl_req_desc_tag_next = desc_table_dequeue_start_ptr_reg & DESC_PTR_MASK;
+                    m_axis_rxe_rxcpl_req_desc_queue_next = desc_table_rxcpl_desc_ptr[desc_table_dequeue_start_ptr_reg & DESC_PTR_MASK];
+
+                    desc_table_dequeue_start_en = 1'b1; // --> update desc_table_dequeue_start_ptr_reg
+                end
+            end
+        end
+    end
 
     // descriptor fetch
     // wait for queue query response
@@ -721,6 +1082,9 @@
             desc_table_dequeue_invalid = 1'b1;
 
             dec_active_desc_req_1 = 1'b1;
+
+            m_axis_rxe_rxcpl_invalidate_entry_valid_next = 1'b1;
+            m_axis_rxe_rxcpl_invalidate_entry_index_next = desc_table_rxcpl_desc_ptr[s_axis_desc_req_status_tag & DESC_PTR_MASK];
         end else begin
             // descriptor available to dequeue
 
@@ -728,54 +1092,135 @@
         end
     end
 
+    // returned desc info from rxcpl
+    // initialize a DMA transfer
+    if (s_axis_rxcpl_rxe_resp_desc_valid) begin
+        if (!s_axis_rxcpl_rxe_resp_desc_error) begin
+            if (s_axis_rxcpl_rxe_resp_desc_fetched) begin
+                // update entry in descriptor table
+                desc_table_desc_from_rxcpl_fetched_ptr = s_axis_rxcpl_rxe_resp_desc_tag & DESC_PTR_MASK;
+                desc_table_desc_from_rxcpl_fetched_len = s_axis_rxcpl_rxe_resp_desc_tdata[63:32];
+                desc_table_desc_from_rxcpl_fetched_en = 1'b1;
+
+                // update some desc table info
+                desc_table_update_ptr               = s_axis_rxcpl_rxe_resp_desc_tag & DESC_PTR_MASK;
+                desc_table_update_desc_tdata        = s_axis_rxcpl_rxe_resp_desc_tdata;
+                desc_table_update_desc_queue        = s_axis_rxcpl_rxe_resp_desc_queue;
+                desc_table_update_desc_queue_ptr    = s_axis_rxcpl_rxe_resp_desc_queue_ptr;
+                desc_table_update_desc_id           = s_axis_rxcpl_rxe_resp_desc_id;
+                desc_table_update_en                = 1'b1;
+
+                // table entry update
+                no_need_to_update_desc_en = 1'b1;
+                no_need_to_update_desc_ptr = s_axis_rxcpl_rxe_resp_desc_tag & DESC_PTR_MASK;
+            end
+            else begin
+            end
+        end
+        else begin
+            rxcpl_read_desc_error_en = 1'b1;
+            rxcpl_read_desc_error_ptr = s_axis_rxcpl_rxe_resp_desc_tag & DESC_PTR_MASK;
+        end
+    end
+
     // descriptor processing and DMA request generation
     // TODO descriptor validation?
-    s_axis_desc_tready_next = m_axis_dma_write_desc_ready_int_early;
+    s_axis_desc_tready_next = 1'b1;
     if (s_axis_desc_tready && s_axis_desc_tvalid) begin
         if (desc_table_active[s_axis_desc_tid & DESC_PTR_MASK]) begin
-            desc_start_next = 1'b0;
-            desc_len_next = desc_len_reg + s_axis_desc_tdata[63:32];
+            // update entry in descriptor table
+            desc_table_desc_fetched_ptr = s_axis_desc_tid & DESC_PTR_MASK;
+            desc_table_desc_fetched_len = s_axis_desc_tdata[63:32];
+            desc_table_desc_fetched_en = 1'b1;
 
-            desc_table_write_start_init = desc_start_reg;
+            dec_active_desc_req_2 = 1'b1;
 
-            // initiate data write
-            m_axis_dma_write_desc_dma_addr_int = s_axis_desc_tdata[127:64];
-            m_axis_dma_write_desc_ram_addr_int = (desc_table_buf_ptr[s_axis_desc_tid & DESC_PTR_MASK] & RX_BUFFER_PTR_MASK) + desc_len_reg + RX_BUFFER_OFFSET;
-            if (s_axis_desc_tdata[63:32] < (desc_table_dma_len[s_axis_desc_tid & DESC_PTR_MASK] - desc_len_reg)) begin
-                // limit write to length provided in descriptor
-                m_axis_dma_write_desc_len_int = s_axis_desc_tdata[63:32];
-            end else begin
-                // write actual packet length
-                m_axis_dma_write_desc_len_int = desc_table_dma_len[s_axis_desc_tid & DESC_PTR_MASK] - desc_len_reg;
-                desc_done_next = 1'b1;
+            // cache the desc info, which will be sent to rxcpl
+            if (desc_table_is_msg[s_axis_desc_tid & DESC_PTR_MASK]) begin
+                if (desc_table_cache_checked[s_axis_desc_tid & DESC_PTR_MASK] 
+                    && !desc_table_cache_exist[s_axis_desc_tid & DESC_PTR_MASK]) begin
+
+                    desc_table_store_desc_info_en       = 1'b1;
+                    desc_table_store_desc_info_tdata    = s_axis_desc_tdata;
+                    desc_table_store_desc_info_ptr      = s_axis_desc_tid & DESC_PTR_MASK;
+                end
             end
-            m_axis_dma_write_desc_tag_int = s_axis_desc_tid & DESC_PTR_MASK;
+        end
+    end
+
 
-            desc_table_write_start_ptr = s_axis_desc_tid;
+    // initiate DMA transfer
+    dma_transfer_ready_next = m_axis_dma_write_desc_ready_int_early;
+    if (desc_table_active[desc_table_dma_transfer_start_ptr_reg & DESC_PTR_MASK]
+            && desc_table_dma_transfer_start_ptr_reg != desc_table_dequeue_start_ptr_reg
+            && desc_table_dma_transfer_start_ptr_reg != desc_table_start_ptr_reg) begin
+        if (desc_table_invalid[desc_table_dma_transfer_start_ptr_reg & DESC_PTR_MASK]
+            || desc_table_rxcpl_desc_error[desc_table_dma_transfer_start_ptr_reg & DESC_PTR_MASK]
+            || desc_table_rxcpl_read_desc_error[desc_table_dma_transfer_start_ptr_reg & DESC_PTR_MASK]) begin
+            desc_table_dma_transfer_start_en = 1'b1;
+        end
+        else begin
+            if (desc_table_desc_fetched[desc_table_dma_transfer_start_ptr_reg & DESC_PTR_MASK]
+                    || desc_table_desc_from_rxcpl_fetched[desc_table_dma_transfer_start_ptr_reg & DESC_PTR_MASK]) begin
+                if (dma_transfer_ready_reg) begin
+                    m_axis_dma_write_desc_dma_addr_int = desc_table_desc_info_tdata[desc_table_dma_transfer_start_ptr_reg & DESC_PTR_MASK][127:64] 
+                                                            + 1024*desc_table_msg_offset[desc_table_dma_transfer_start_ptr_reg & DESC_PTR_MASK];
+                    m_axis_dma_write_desc_ram_addr_int = (desc_table_buf_ptr[desc_table_dma_transfer_start_ptr_reg & DESC_PTR_MASK] & RX_BUFFER_PTR_MASK) + RX_BUFFER_OFFSET;
+                    m_axis_dma_write_desc_len_int = desc_table_dma_len[desc_table_dma_transfer_start_ptr_reg & DESC_PTR_MASK] - desc_len_reg;
+                    m_axis_dma_write_desc_tag_int = desc_table_dma_transfer_start_ptr_reg & DESC_PTR_MASK;
 
-            if (m_axis_dma_write_desc_len_int != 0 && !desc_done_reg) begin
                 m_axis_dma_write_desc_valid_int = 1'b1;
 
-                // write start
-                desc_table_write_start_en = 1'b1;
+                    desc_table_dma_transfer_start_en = 1'b1;
+                end
+            end
+        end
             end
 
-            if (s_axis_desc_tlast) begin
-                // update entry in descriptor table
-                desc_table_desc_fetched_ptr = s_axis_desc_tid & DESC_PTR_MASK;
-                desc_table_desc_fetched_len = desc_len_next;
-                desc_table_desc_fetched_en = 1'b1;
 
-                // write commit
-                desc_table_write_start_commit = 1'b1;
+    // update desc request
+    if (desc_table_active[desc_table_update_desc_start_ptr_reg & DESC_PTR_MASK]
+            && desc_table_update_desc_start_ptr_reg != desc_table_dequeue_start_ptr_reg  // ask for desc
+            && desc_table_update_desc_start_ptr_reg != desc_table_start_ptr_reg) begin
+        if (desc_table_invalid[desc_table_update_desc_start_ptr_reg & DESC_PTR_MASK]
+            || desc_table_rxcpl_desc_error[desc_table_update_desc_start_ptr_reg & DESC_PTR_MASK]
+            || desc_table_rxcpl_read_desc_error[desc_table_update_desc_start_ptr_reg & DESC_PTR_MASK]) begin
+            desc_table_update_desc_start_en = 1'b1;
+        end
+        else begin
+            if (desc_table_desc_fetched[desc_table_update_desc_start_ptr_reg & DESC_PTR_MASK]) begin
+
+                if (desc_table_is_msg[desc_table_update_desc_start_ptr_reg & DESC_PTR_MASK]
+                    && !desc_table_cache_exist[desc_table_update_desc_start_ptr_reg & DESC_PTR_MASK]) begin
+                    if (!m_axis_rxe_rxcpl_update_desc_tvalid_reg || m_axis_rxe_rxcpl_update_desc_tready) begin
 
-                dec_active_desc_req_2 = 1'b1;
+                        m_axis_rxe_rxcpl_update_desc_tdata_next     = desc_table_desc_info_tdata[desc_table_update_desc_start_ptr_reg & DESC_PTR_MASK];
+                        m_axis_rxe_rxcpl_update_desc_tag_next       = desc_table_rxcpl_desc_ptr[desc_table_update_desc_start_ptr_reg & DESC_PTR_MASK];
+                        m_axis_rxe_rxcpl_update_desc_index_next     = desc_table_update_desc_start_ptr_reg & DESC_PTR_MASK;
+                        m_axis_rxe_rxcpl_update_desc_queue_next     = desc_table_cpl_queue[desc_table_update_desc_start_ptr_reg & DESC_PTR_MASK];
+                        m_axis_rxe_rxcpl_update_desc_queue_ptr_next = desc_table_queue_ptr[desc_table_update_desc_start_ptr_reg & DESC_PTR_MASK];
+                        m_axis_rxe_rxcpl_update_desc_id_next        = desc_table_id[desc_table_update_desc_start_ptr_reg & DESC_PTR_MASK];
+                        m_axis_rxe_rxcpl_update_desc_tvalid_next    = 1'b1;
 
-                desc_start_next = 1'b1;
-                desc_done_next = 1'b0;
-                desc_len_next = 0;
+                        desc_table_update_desc_start_en = 1'b1;
+                    end
+                end
+                else begin
+                    desc_table_update_desc_start_en = 1'b1;
+                end
+            end
+            else if (desc_table_desc_from_rxcpl_fetched[desc_table_update_desc_start_ptr_reg & DESC_PTR_MASK]
+                        && desc_table_cache_exist[desc_table_update_desc_start_ptr_reg & DESC_PTR_MASK]) begin
+                desc_table_update_desc_start_en = 1'b1;
+            end
             end
         end
+
+    // update desc response
+    if (s_axis_rxcpl_rxe_update_desc_resp_valid) begin
+        // table entry update
+        desc_table_desc_updated_en = 1'b1;
+        desc_table_desc_updated_ptr = s_axis_rxcpl_rxe_update_desc_resp_tag & DESC_PTR_MASK;
     end
 
     // data write completion
@@ -784,14 +1229,11 @@
         // update entry in descriptor table
         desc_table_data_written_ptr = s_axis_dma_write_desc_status_tag & DESC_PTR_MASK;
         desc_table_data_written_en = 1'b1;
-
-        // write finish
-        desc_table_write_finish_ptr = s_axis_dma_write_desc_status_tag;
-        desc_table_write_finish_en = 1'b1;
     end
 
     // store RX checksum
-    if (desc_table_active[desc_table_store_csum_ptr_reg & DESC_PTR_MASK] && desc_table_store_csum_ptr_reg != desc_table_start_ptr_reg && RX_CHECKSUM_ENABLE) begin
+    if (desc_table_active[desc_table_store_csum_ptr_reg & DESC_PTR_MASK] 
+        && desc_table_store_csum_ptr_reg != desc_table_start_ptr_reg && RX_CHECKSUM_ENABLE) begin
         s_axis_rx_csum_ready_next = 1'b1;
         if (desc_table_invalid[desc_table_store_csum_ptr_reg & DESC_PTR_MASK]) begin
             // invalid entry; skip
@@ -811,8 +1253,12 @@
     if (desc_table_active[desc_table_cpl_enqueue_start_ptr_reg & DESC_PTR_MASK] &&
             desc_table_cpl_enqueue_start_ptr_reg != desc_table_start_ptr_reg &&
             desc_table_cpl_enqueue_start_ptr_reg != desc_table_dequeue_start_ptr_reg &&
+            // desc_table_cpl_enqueue_start_ptr_reg != desc_table_ack_to_egress_start_ptr_reg &&
+            desc_table_cpl_enqueue_start_ptr_reg != desc_table_update_desc_start_ptr_reg &&
             (desc_table_cpl_enqueue_start_ptr_reg != desc_table_store_csum_ptr_reg || !RX_CHECKSUM_ENABLE)) begin
-        if (desc_table_invalid[desc_table_cpl_enqueue_start_ptr_reg & DESC_PTR_MASK]) begin
+        if (desc_table_invalid[desc_table_cpl_enqueue_start_ptr_reg & DESC_PTR_MASK]
+            || desc_table_rxcpl_desc_error[desc_table_cpl_enqueue_start_ptr_reg & DESC_PTR_MASK]
+            || desc_table_rxcpl_read_desc_error[desc_table_cpl_enqueue_start_ptr_reg & DESC_PTR_MASK]) begin
             // invalid entry; skip
             desc_table_cpl_enqueue_start_en = 1'b1;
 
@@ -823,7 +1269,9 @@
                 buf_rd_ptr_next = ~desc_table_buf_ptr[desc_table_cpl_enqueue_start_ptr_reg & DESC_PTR_MASK] & ~RX_BUFFER_PTR_MASK;
             end
 
-        end else if (desc_table_data_written[desc_table_cpl_enqueue_start_ptr_reg & DESC_PTR_MASK] && !m_axis_cpl_req_valid_next) begin
+        end else if (desc_table_data_written[desc_table_cpl_enqueue_start_ptr_reg & DESC_PTR_MASK]
+                && (desc_table_desc_updated[desc_table_cpl_enqueue_start_ptr_reg & DESC_PTR_MASK] || desc_table_no_need_to_update_desc[desc_table_cpl_enqueue_start_ptr_reg & DESC_PTR_MASK])
+                && !m_axis_rxe_cpl_req_valid_next) begin
             // update entry in descriptor table
             desc_table_cpl_enqueue_start_en = 1'b1;
 
@@ -835,38 +1283,53 @@
             end
 
             // initiate completion write
-            m_axis_cpl_req_queue_next = desc_table_cpl_queue[desc_table_cpl_enqueue_start_ptr_reg & DESC_PTR_MASK];
-            m_axis_cpl_req_tag_next = desc_table_cpl_enqueue_start_ptr_reg & DESC_PTR_MASK;
-            m_axis_cpl_req_data_next = 0;
-            m_axis_cpl_req_data_next[15:0]  = desc_table_queue[desc_table_cpl_enqueue_start_ptr_reg & DESC_PTR_MASK];
-            m_axis_cpl_req_data_next[31:16] = desc_table_queue_ptr[desc_table_cpl_enqueue_start_ptr_reg & DESC_PTR_MASK];
-            m_axis_cpl_req_data_next[47:32] = desc_table_dma_len[desc_table_cpl_enqueue_start_ptr_reg & DESC_PTR_MASK];
+            m_axis_rxe_cpl_req_queue_next = desc_table_cpl_queue[desc_table_cpl_enqueue_start_ptr_reg & DESC_PTR_MASK];
+            // m_axis_rxe_cpl_req_tag_next = desc_table_cpl_enqueue_start_ptr_reg & DESC_PTR_MASK;
+            m_axis_rxe_cpl_req_tag_next = desc_table_rxcpl_desc_ptr[desc_table_cpl_enqueue_start_ptr_reg & DESC_PTR_MASK];
+            m_axis_rxe_cpl_req_data_next = 0;
+            m_axis_rxe_cpl_req_data_next[15:0]  = desc_table_queue[desc_table_cpl_enqueue_start_ptr_reg & DESC_PTR_MASK];
+            m_axis_rxe_cpl_req_data_next[31:16] = desc_table_queue_ptr[desc_table_cpl_enqueue_start_ptr_reg & DESC_PTR_MASK];
+            m_axis_rxe_cpl_req_data_next[47:32] = desc_table_dma_len[desc_table_cpl_enqueue_start_ptr_reg & DESC_PTR_MASK];
             if (PTP_TS_ENABLE) begin
                 //m_axis_cpl_req_data_next[127:64] = desc_table_ptp_ts[desc_table_cpl_enqueue_start_ptr_reg & DESC_PTR_MASK] >> 16;
-                m_axis_cpl_req_data_next[111:64] = desc_table_ptp_ts[desc_table_cpl_enqueue_start_ptr_reg & DESC_PTR_MASK] >> 16;
+                m_axis_rxe_cpl_req_data_next[111:64] = desc_table_ptp_ts[desc_table_cpl_enqueue_start_ptr_reg & DESC_PTR_MASK] >> 16;
             end
             if (RX_HASH_ENABLE) begin
-                m_axis_cpl_req_data_next[159:128] = desc_table_hash[desc_table_cpl_enqueue_start_ptr_reg & DESC_PTR_MASK];
-                m_axis_cpl_req_data_next[167:160] = desc_table_hash_type[desc_table_cpl_enqueue_start_ptr_reg & DESC_PTR_MASK];
+                m_axis_rxe_cpl_req_data_next[159:128] = desc_table_hash[desc_table_cpl_enqueue_start_ptr_reg & DESC_PTR_MASK];
+                m_axis_rxe_cpl_req_data_next[167:160] = desc_table_hash_type[desc_table_cpl_enqueue_start_ptr_reg & DESC_PTR_MASK];
             end
             if (RX_CHECKSUM_ENABLE) begin
-                m_axis_cpl_req_data_next[127:112] = desc_table_csum[desc_table_cpl_enqueue_start_ptr_reg & DESC_PTR_MASK];
+                m_axis_rxe_cpl_req_data_next[127:112] = desc_table_csum[desc_table_cpl_enqueue_start_ptr_reg & DESC_PTR_MASK];
             end
-            m_axis_cpl_req_data_next[176:168] = desc_table_id[desc_table_cpl_enqueue_start_ptr_reg & DESC_PTR_MASK];
-            m_axis_cpl_req_valid_next = 1'b1;
+            m_axis_rxe_cpl_req_data_next[176:168] = desc_table_id[desc_table_cpl_enqueue_start_ptr_reg & DESC_PTR_MASK];
+            m_axis_rxe_cpl_req_valid_next = 1'b1;
+
+            // additional info for rxcpl
+            m_axis_rxe_cpl_req_is_msg_next = desc_table_is_msg[desc_table_cpl_enqueue_start_ptr_reg & DESC_PTR_MASK];
+            m_axis_rxe_cpl_req_is_msg_exist_next = desc_table_cache_is_msg_exist[desc_table_cpl_enqueue_start_ptr_reg & DESC_PTR_MASK];
+            m_axis_rxe_cpl_req_msg_off_next = desc_table_msg_offset[desc_table_cpl_enqueue_start_ptr_reg & DESC_PTR_MASK];
+            m_axis_rxe_cpl_req_msg_len_next = desc_table_msg_len[desc_table_cpl_enqueue_start_ptr_reg & DESC_PTR_MASK];
+            m_axis_rxe_cpl_req_desc_table_ptr_next = desc_table_cpl_enqueue_start_ptr_reg & DESC_PTR_MASK;
         end
     end
 
     // start completion write
     // wait for queue query response
-    if (s_axis_cpl_req_status_valid) begin
-        // update entry in descriptor table
-        desc_table_cpl_write_done_ptr = s_axis_cpl_req_status_tag & DESC_PTR_MASK;
+    // if (s_axis_cpl_req_status_valid) begin
+    //     // update entry in descriptor table
+    //     desc_table_cpl_write_done_ptr = s_axis_cpl_req_status_tag & DESC_PTR_MASK;
+    //     desc_table_cpl_write_done_en = 1'b1;
+    // end
+    //
+    // NOTE:
+    if (s_axis_cpl_rxe_status_valid) begin
+        desc_table_cpl_write_done_ptr = s_axis_cpl_rxe_status_tag & DESC_PTR_MASK;
         desc_table_cpl_write_done_en = 1'b1;
     end
 
     // operation complete
     if (desc_table_active[desc_table_finish_ptr_reg & DESC_PTR_MASK] && desc_table_finish_ptr_reg != desc_table_start_ptr_reg && desc_table_finish_ptr_reg != desc_table_cpl_enqueue_start_ptr_reg) begin
+    // if (desc_table_active[desc_table_finish_ptr_reg & DESC_PTR_MASK] && desc_table_finish_ptr_reg != desc_table_start_ptr_reg) begin
         if (desc_table_invalid[desc_table_finish_ptr_reg & DESC_PTR_MASK]) begin
             // invalidate entry in descriptor table
             desc_table_finish_en = 1'b1;
@@ -875,6 +1338,11 @@
             m_axis_rx_req_status_len_next = 0;
             m_axis_rx_req_status_tag_next = desc_table_tag[desc_table_finish_ptr_reg & DESC_PTR_MASK];
             m_axis_rx_req_status_valid_next = 1'b1;
+        end else if (desc_table_rxcpl_desc_error[desc_table_finish_ptr_reg & DESC_PTR_MASK]
+                        || desc_table_rxcpl_read_desc_error[desc_table_finish_ptr_reg & DESC_PTR_MASK]) begin
+            // invalidate entry in descriptor table
+            desc_table_finish_en = 1'b1;
+
         end else if (desc_table_cpl_write_done[desc_table_finish_ptr_reg & DESC_PTR_MASK]) begin
             // invalidate entry in descriptor table
             desc_table_finish_en = 1'b1;
@@ -888,6 +1356,7 @@
 end
 
 always @(posedge clk) begin
+
     s_axis_rx_req_ready_reg <= s_axis_rx_req_ready_next;
 
     m_axis_rx_req_status_len_reg <= m_axis_rx_req_status_len_next;
@@ -900,18 +1369,22 @@
 
     s_axis_desc_tready_reg <= s_axis_desc_tready_next;
 
-    m_axis_cpl_req_queue_reg <= m_axis_cpl_req_queue_next;
-    m_axis_cpl_req_tag_reg <= m_axis_cpl_req_tag_next;
-    m_axis_cpl_req_data_reg <= m_axis_cpl_req_data_next;
-    m_axis_cpl_req_valid_reg <= m_axis_cpl_req_valid_next;
+    m_axis_rxe_cpl_req_queue_reg <= m_axis_rxe_cpl_req_queue_next;
+    m_axis_rxe_cpl_req_tag_reg   <= m_axis_rxe_cpl_req_tag_next;
+    m_axis_rxe_cpl_req_cpl_desc_ptr_reg <= m_axis_rxe_cpl_req_cpl_desc_ptr_next;
+    m_axis_rxe_cpl_req_data_reg  <= m_axis_rxe_cpl_req_data_next;
+    m_axis_rxe_cpl_req_valid_reg <= m_axis_rxe_cpl_req_valid_next;
+    m_axis_rxe_cpl_req_msg_off_reg <= m_axis_rxe_cpl_req_msg_off_next;
+    m_axis_rxe_cpl_req_msg_len_reg <= m_axis_rxe_cpl_req_msg_len_next;
+    m_axis_rxe_cpl_req_is_msg_reg <= m_axis_rxe_cpl_req_is_msg_next;
+    m_axis_rxe_cpl_req_is_msg_exist_reg <= m_axis_rxe_cpl_req_is_msg_exist_next;
+    m_axis_rxe_cpl_req_desc_table_ptr_reg <= m_axis_rxe_cpl_req_desc_table_ptr_next;
 
     m_axis_rx_desc_addr_reg <= m_axis_rx_desc_addr_next;
     m_axis_rx_desc_len_reg <= m_axis_rx_desc_len_next;
     m_axis_rx_desc_tag_reg <= m_axis_rx_desc_tag_next;
     m_axis_rx_desc_valid_reg <= m_axis_rx_desc_valid_next;
 
-    s_axis_rx_hash_ready_reg <= s_axis_rx_hash_ready_next;
-
     s_axis_rx_csum_ready_reg <= s_axis_rx_csum_ready_next;
 
     mtu_reg <= mtu > MAX_RX_SIZE ? MAX_RX_SIZE : mtu;
@@ -919,22 +1392,47 @@
     buf_wr_ptr_reg <= buf_wr_ptr_next;
     buf_rd_ptr_reg <= buf_rd_ptr_next;
 
-    desc_start_reg <= desc_start_next;
     desc_done_reg <= desc_done_next;
     desc_len_reg <= desc_len_next;
 
     active_desc_req_count_reg <= active_desc_req_count_reg + inc_active_desc_req - dec_active_desc_req_1 - dec_active_desc_req_2;
 
+    //==========================
+    m_axis_rxe_req_valid_reg    <= m_axis_rxe_req_valid_next;
+    m_axis_rxe_req_tag_reg      <= m_axis_rxe_req_tag_next;
+    m_axis_rxe_req_is_msg_reg   <= m_axis_rxe_req_is_msg_next;
+    m_axis_rxe_req_msg_id_reg   <= m_axis_rxe_req_msg_id_next;
+    m_axis_rxe_req_msg_len_reg  <= m_axis_rxe_req_msg_len_next;
+    m_axis_rxe_req_msg_off_reg  <= m_axis_rxe_req_msg_off_next;
+    //==========================
+
+
+    dma_transfer_ready_reg <= dma_transfer_ready_next;
+
     // descriptor table operations
     if (desc_table_start_en) begin
         desc_table_active[desc_table_start_ptr_reg & DESC_PTR_MASK] <= 1'b1;
+        desc_table_rx_finish[desc_table_start_ptr_reg & DESC_PTR_MASK] <= 1'b0;
         desc_table_rx_done[desc_table_start_ptr_reg & DESC_PTR_MASK] <= 1'b0;
         desc_table_invalid[desc_table_start_ptr_reg & DESC_PTR_MASK] <= 1'b0;
         desc_table_desc_fetched[desc_table_start_ptr_reg & DESC_PTR_MASK] <= 1'b0;
+        desc_table_desc_from_rxcpl_fetched[desc_table_start_ptr_reg & DESC_PTR_MASK] <= 1'b0;
         desc_table_data_written[desc_table_start_ptr_reg & DESC_PTR_MASK] <= 1'b0;
         desc_table_cpl_write_done[desc_table_start_ptr_reg & DESC_PTR_MASK] <= 1'b0;
         desc_table_tag[desc_table_start_ptr_reg & DESC_PTR_MASK] <= desc_table_start_tag;
         desc_table_buf_ptr[desc_table_start_ptr_reg & DESC_PTR_MASK] <= desc_table_start_buf_ptr;
+
+        //======
+        desc_table_desc_updated[desc_table_start_ptr_reg & DESC_PTR_MASK] <= 1'b0;
+        desc_table_no_need_to_update_desc[desc_table_start_ptr_reg & DESC_PTR_MASK] <= 1'b0;
+
+        desc_table_cache_checked[desc_table_start_ptr_reg & DESC_PTR_MASK] <= 1'b0;
+        desc_table_cache_exist[desc_table_start_ptr_reg & DESC_PTR_MASK] <= 1'b0;
+        desc_table_rxcpl_desc_ptr[desc_table_start_ptr_reg & DESC_PTR_MASK] <= 1'b0;
+        desc_table_cache_is_msg_exist[desc_table_start_ptr_reg & DESC_PTR_MASK] <= 1'b0;
+        desc_table_rxcpl_desc_error[desc_table_start_ptr_reg & DESC_PTR_MASK] <= 1'b0;
+        desc_table_rxcpl_read_desc_error[desc_table_start_ptr_reg & DESC_PTR_MASK] <= 1'b0;
+
         desc_table_start_ptr_reg <= desc_table_start_ptr_reg + 1;
     end
 
@@ -944,6 +1442,11 @@
         desc_table_ptp_ts[desc_table_rx_finish_ptr & DESC_PTR_MASK] <= desc_table_rx_finish_ptp_ts;
         desc_table_hash[desc_table_rx_finish_ptr & DESC_PTR_MASK] <= desc_table_rx_finish_hash;
         desc_table_hash_type[desc_table_rx_finish_ptr & DESC_PTR_MASK] <= desc_table_rx_finish_hash_type;
+        desc_table_is_msg[desc_table_rx_finish_ptr & DESC_PTR_MASK] <= desc_table_rx_finish_is_msg;
+        desc_table_msg_id[desc_table_rx_finish_ptr & DESC_PTR_MASK] <= desc_table_rx_finish_msg_id;
+        desc_table_msg_offset[desc_table_rx_finish_ptr & DESC_PTR_MASK] <= desc_table_rx_finish_msg_offset;
+        desc_table_msg_len[desc_table_rx_finish_ptr & DESC_PTR_MASK] <= desc_table_rx_finish_msg_len;
+        desc_table_rx_finish[desc_table_rx_finish_ptr & DESC_PTR_MASK] <= 1'b1;
     end
 
     if (desc_table_store_queue_en) begin
@@ -968,6 +1471,12 @@
         desc_table_desc_fetched[desc_table_desc_fetched_ptr & DESC_PTR_MASK] <= 1'b1;
     end
 
+    if (desc_table_desc_from_rxcpl_fetched_en) begin
+        desc_table_desc_from_rxcpl_len[desc_table_desc_from_rxcpl_fetched_ptr & DESC_PTR_MASK] <= desc_table_desc_from_rxcpl_fetched_len;
+        desc_table_desc_from_rxcpl_fetched[desc_table_desc_from_rxcpl_fetched_ptr & DESC_PTR_MASK] <= 1'b1;
+    end
+
+
     if (desc_table_data_written_en) begin
         desc_table_data_written[desc_table_data_written_ptr & DESC_PTR_MASK] <= 1'b1;
     end
@@ -990,38 +1499,92 @@
         desc_table_finish_ptr_reg <= desc_table_finish_ptr_reg + 1;
     end
 
-    if (desc_table_write_start_en) begin
-        desc_table_read_commit[desc_table_write_start_ptr] <= desc_table_write_start_commit;
-        if (desc_table_write_start_init) begin
-            desc_table_write_count_start[desc_table_write_start_ptr] <= desc_table_write_count_finish[desc_table_write_start_ptr] + 1;
-        end else begin
-            desc_table_write_count_start[desc_table_write_start_ptr] <= desc_table_write_count_start[desc_table_write_start_ptr] + 1;
+    //============================================
+    if (desc_table_cache_check_en) begin
+        desc_table_cache_checked[desc_table_cache_check_ptr] <= 1'b1;
+        desc_table_cache_exist[desc_table_cache_check_ptr] <= desc_table_cache_check_entry_exist;
+        desc_table_rxcpl_desc_ptr[desc_table_cache_check_ptr] <= desc_table_cache_check_rxcpl_desc_ptr;
+        desc_table_cache_is_msg_exist[desc_table_cache_check_ptr] <= desc_table_cache_check_is_msg_exist;
+        desc_table_rxcpl_desc_error[desc_table_cache_check_ptr] <= desc_table_cache_check_rxcpl_desc_error;
+    end
+
+    if (desc_table_update_en) begin
+        desc_table_desc_info_tdata[desc_table_update_ptr] <= desc_table_update_desc_tdata;
+        desc_table_cpl_queue[desc_table_update_ptr] <= desc_table_update_desc_queue;
+        desc_table_queue_ptr[desc_table_update_ptr] <= desc_table_update_desc_queue_ptr;
+        desc_table_id[desc_table_update_ptr] <= desc_table_update_desc_id;
+    end
+
+    if (desc_table_rxcpl_alloc_entry_start_en) begin
+        desc_table_rxcpl_alloc_entry_start_ptr_reg <= desc_table_rxcpl_alloc_entry_start_ptr_reg + 1;
+    end
+
+    if (desc_table_desc_updated_en) begin
+        desc_table_desc_updated[desc_table_desc_updated_ptr] <= 1'b1;
+    end
+
+    if (rxcpl_read_desc_error_en) begin
+        desc_table_rxcpl_read_desc_error[rxcpl_read_desc_error_ptr] <= 1'b1;
+    end
+
+    if (no_need_to_update_desc_en) begin
+        desc_table_no_need_to_update_desc[no_need_to_update_desc_ptr] <= 1'b1;
         end
-    end else if (desc_table_write_start_commit || desc_table_write_start_init) begin
-        desc_table_read_commit[desc_table_write_start_ptr] <= desc_table_write_start_commit;
-        if (desc_table_write_start_init) begin
-            desc_table_write_count_start[desc_table_write_start_ptr] <= desc_table_write_count_finish[desc_table_write_start_ptr];
+
+    if (desc_table_store_desc_info_en) begin
+        desc_table_desc_info_tdata[desc_table_store_desc_info_ptr] <= desc_table_store_desc_info_tdata;
         end
+
+    if (desc_table_update_desc_start_en) begin
+        desc_table_update_desc_start_ptr_reg <= desc_table_update_desc_start_ptr_reg + 1;
     end
 
-    if (desc_table_write_finish_en) begin
-        desc_table_write_count_finish[desc_table_write_finish_ptr] <= desc_table_write_count_finish[desc_table_write_finish_ptr] + 1;
+    if (desc_table_dma_transfer_start_en) begin
+        desc_table_dma_transfer_start_ptr_reg <= desc_table_dma_transfer_start_ptr_reg + 1;
     end
+    // ACK to egress
+    // if (desc_table_ack_to_egress_start_en) begin
+    //     desc_table_ack_to_egress_start_ptr_reg <= desc_table_ack_to_egress_start_ptr_reg + 1;
+    // end
+
+    // m_axis_ack_tdata_reg    <= m_axis_ack_tdata_next;
+    // m_axis_ack_tkeep_reg    <= m_axis_ack_tkeep_next;
+    // m_axis_ack_tvalid_reg   <= m_axis_ack_tvalid_next;
+    // m_axis_ack_tlast_reg    <= m_axis_ack_tlast_next;
+    // m_axis_ack_tuser_reg    <= m_axis_ack_tuser_next;
+    // m_axis_ack_tid_reg      <= m_axis_ack_tid_next;
+    // m_axis_ack_tdest_reg    <= m_axis_ack_tdest_next;
+
+    m_axis_rxe_rxcpl_req_desc_valid_reg <= m_axis_rxe_rxcpl_req_desc_valid_next;
+    m_axis_rxe_rxcpl_req_desc_tag_reg   <= m_axis_rxe_rxcpl_req_desc_tag_next;
+    m_axis_rxe_rxcpl_req_desc_queue_reg <= m_axis_rxe_rxcpl_req_desc_queue_next;
+
+    m_axis_rxe_rxcpl_update_desc_tdata_reg      <= m_axis_rxe_rxcpl_update_desc_tdata_next;
+    m_axis_rxe_rxcpl_update_desc_tag_reg        <= m_axis_rxe_rxcpl_update_desc_tag_next;
+    m_axis_rxe_rxcpl_update_desc_index_reg      <= m_axis_rxe_rxcpl_update_desc_index_next;
+    m_axis_rxe_rxcpl_update_desc_queue_reg      <= m_axis_rxe_rxcpl_update_desc_queue_next;
+    m_axis_rxe_rxcpl_update_desc_queue_ptr_reg  <= m_axis_rxe_rxcpl_update_desc_queue_ptr_next;
+    m_axis_rxe_rxcpl_update_desc_id_reg         <= m_axis_rxe_rxcpl_update_desc_id_next;
+    m_axis_rxe_rxcpl_update_desc_tvalid_reg     <= m_axis_rxe_rxcpl_update_desc_tvalid_next;
+
+    // RXE invalidate RXCPL entry
+    m_axis_rxe_rxcpl_invalidate_entry_index_reg <= m_axis_rxe_rxcpl_invalidate_entry_index_next;
+    m_axis_rxe_rxcpl_invalidate_entry_valid_reg <= m_axis_rxe_rxcpl_invalidate_entry_valid_next;
+
+    //============================================
 
     if (rst) begin
         s_axis_rx_req_ready_reg <= 1'b0;
         m_axis_rx_req_status_valid_reg <= 1'b0;
         m_axis_desc_req_valid_reg <= 1'b0;
         s_axis_desc_tready_reg <= 1'b0;
-        m_axis_cpl_req_valid_reg <= 1'b0;
+        m_axis_rxe_cpl_req_valid_reg <= 1'b0;
         m_axis_rx_desc_valid_reg <= 1'b0;
-        s_axis_rx_hash_ready_reg <= 1'b0;
         s_axis_rx_csum_ready_reg <= 1'b0;
 
         buf_wr_ptr_reg <= 0;
         buf_rd_ptr_reg <= 0;
 
-        desc_start_reg <= 1'b1;
         desc_done_reg <= 1'b0;
         desc_len_reg <= 0;
 
@@ -1030,7 +1593,9 @@
         desc_table_active <= 0;
         desc_table_invalid <= 0;
         desc_table_desc_fetched <= 0;
+        desc_table_desc_from_rxcpl_fetched <= 0;
         desc_table_data_written <= 0;
+        desc_table_rx_finish <= 0;
         desc_table_rx_done <= 0;
 
         desc_table_start_ptr_reg <= 0;
@@ -1038,6 +1603,61 @@
         desc_table_store_csum_ptr_reg <= 0;
         desc_table_cpl_enqueue_start_ptr_reg <= 0;
         desc_table_finish_ptr_reg <= 0;
+        //===============
+
+        desc_table_rxcpl_alloc_entry_start_ptr_reg <= 0;
+        desc_table_update_desc_start_ptr_reg <= 0;
+
+        m_axis_rxe_req_valid_reg    <= 0;
+        m_axis_rxe_req_tag_reg      <= 0;
+        m_axis_rxe_req_is_msg_reg   <= 0;
+        m_axis_rxe_req_msg_id_reg   <= 0;
+        m_axis_rxe_req_msg_len_reg  <= 0;
+        m_axis_rxe_req_msg_off_reg  <= 0;
+        m_axis_rxe_rxcpl_req_desc_valid_reg <= 0;
+        m_axis_rxe_rxcpl_req_desc_tag_reg   <= 0;
+        m_axis_rxe_rxcpl_req_desc_queue_reg <= 0;
+
+
+        m_axis_rxe_rxcpl_update_desc_tdata_reg      <= 0;
+        m_axis_rxe_rxcpl_update_desc_tag_reg        <= 0;
+        m_axis_rxe_rxcpl_update_desc_index_reg      <= 0;
+        m_axis_rxe_rxcpl_update_desc_queue_reg      <= 0;
+        m_axis_rxe_rxcpl_update_desc_queue_ptr_reg  <= 0;
+        m_axis_rxe_rxcpl_update_desc_id_reg         <= 0;
+        m_axis_rxe_rxcpl_update_desc_tvalid_reg     <= 0;
+
+        m_axis_rxe_cpl_req_is_msg_reg <= 0;
+        m_axis_rxe_cpl_req_is_msg_exist_reg <= 0;
+        m_axis_rxe_cpl_req_msg_off_reg <= 0;
+        m_axis_rxe_cpl_req_msg_len_reg <= 0;
+        m_axis_rxe_cpl_req_desc_table_ptr_reg <= 0;
+        m_axis_rxe_cpl_req_cpl_desc_ptr_reg <= 0;
+
+        // ACK to egress
+        // desc_table_ack_to_egress_start_ptr_reg <= 0;
+
+        // m_axis_ack_tdata_reg <= 0;
+        // m_axis_ack_tkeep_reg <= 0;
+        // m_axis_ack_tvalid_reg <= 0;
+        // m_axis_ack_tlast_reg <= 0;
+        // m_axis_ack_tuser_reg <= 0;
+        // m_axis_ack_tid_reg <= 0;
+        // m_axis_ack_tdest_reg <= 0;
+
+        // RXE invalidate RXCPL entry
+        m_axis_rxe_rxcpl_invalidate_entry_index_reg <= 0;
+        m_axis_rxe_rxcpl_invalidate_entry_valid_reg <= 0;
+
+        // table initialization
+        desc_table_cache_checked <= 0;
+        desc_table_cache_exist <= 0;
+        desc_table_is_msg <= 0;
+        desc_table_rxcpl_desc_error <= 0;
+        desc_table_rxcpl_read_desc_error <= 0;
+        desc_table_cache_is_msg_exist <= 0;
+        desc_table_desc_updated <= 0;
+        desc_table_no_need_to_update_desc <= 0;
     end
 end
 
@@ -1066,7 +1686,8 @@
 assign m_axis_dma_write_desc_valid     = m_axis_dma_write_desc_valid_reg;
 
 // enable ready input next cycle if output is ready or the temp reg will not be filled on the next cycle (output reg empty or no input)
-assign m_axis_dma_write_desc_ready_int_early = m_axis_dma_write_desc_ready || (!temp_m_axis_dma_write_desc_valid_reg && (!m_axis_dma_write_desc_valid_reg || !m_axis_dma_write_desc_valid_int));
+assign m_axis_dma_write_desc_ready_int_early = (m_axis_dma_write_desc_ready || (!temp_m_axis_dma_write_desc_valid_reg && (!m_axis_dma_write_desc_valid_reg || !m_axis_dma_write_desc_valid_int)));
+                                                                                // && (!m_axis_rxe_rxcpl_update_desc_tvalid_reg||m_axis_rxe_rxcpl_update_desc_tready);
 
 always @* begin
     // transfer sink ready state to source
@@ -1131,3 +1752,58 @@
 endmodule
 
 `resetall
+
+
+
+
+
+    // ACK to egress
+    // if (desc_table_active[desc_table_ack_to_egress_start_ptr_reg & DESC_PTR_MASK]
+    //         && desc_table_ack_to_egress_start_ptr_reg != desc_table_dequeue_start_ptr_reg
+    //         && desc_table_ack_to_egress_start_ptr_reg != desc_table_start_ptr_reg) begin
+
+    //     if (desc_table_invalid[desc_table_ack_to_egress_start_ptr_reg & DESC_PTR_MASK]) begin
+    //         desc_table_ack_to_egress_start_en = 1'b1;
+    //     end
+    //     else begin
+    //         if (desc_table_is_msg[desc_table_ack_to_egress_start_ptr_reg & DESC_PTR_MASK]) begin
+    //             if (!m_axis_ack_tvalid_reg || m_axis_ack_tready) begin
+    //                 m_axis_ack_tdata_next = {
+    //                     96'd0,
+    //                     8'h01,
+    //                     desc_table_msg_offset[desc_table_ack_to_egress_start_ptr_reg & DESC_PTR_MASK],
+    //                     desc_table_msg_len[desc_table_ack_to_egress_start_ptr_reg & DESC_PTR_MASK],
+    //                     8'h00,
+    //                     16'h0000,
+    //                     desc_table_msg_id[desc_table_ack_to_egress_start_ptr_reg & DESC_PTR_MASK][0 +: 8], // should be LE
+    //                     desc_table_msg_id[desc_table_ack_to_egress_start_ptr_reg & DESC_PTR_MASK][8 +: 8], // should be LE
+    //                     desc_table_msg_id[desc_table_ack_to_egress_start_ptr_reg & DESC_PTR_MASK][16 +: 8], // should be LE
+    //                     desc_table_msg_id[desc_table_ack_to_egress_start_ptr_reg & DESC_PTR_MASK][24 +: 8], // should be LE
+    //                     16'h0000,
+    //                     16'h1e00,
+    //                     16'hf2f1,
+    //                     desc_table_desc_ip_udp_info[desc_table_ack_to_egress_start_ptr_reg & DESC_PTR_MASK],
+    //                     16'h0000,
+    //                     8'h11,
+    //                     8'h40,
+    //                     16'h0000,
+    //                     16'h0100,
+    //                     16'h3200,
+    //                     16'h0045,
+    //                     16'h0008,
+    //                     desc_table_desc_mac_info[desc_table_ack_to_egress_start_ptr_reg & DESC_PTR_MASK]};
+    //                 m_axis_ack_tkeep_next = {AXIS_KEEP_WIDTH{1'b1}};
+    //                 m_axis_ack_tid_next = 0;
+    //                 m_axis_ack_tdest_next = 0;
+    //                 m_axis_ack_tuser_next = 0;
+    //                 m_axis_ack_tlast_next = 1'b1;
+    //                 m_axis_ack_tvalid_next    = 1'b1;
+
+    //                 desc_table_ack_to_egress_start_en = 1'b1;
+    //             end
+    //         end
+    //         else begin
+    //             desc_table_ack_to_egress_start_en = 1'b1;
+    //         end
+    //     end
+    // end
diff --color -burN ./corundum-rtl/rx_routing.v ./hp-rtl/rx_routing.v
--- ./corundum-rtl/rx_routing.v	1969-12-31 19:00:00.000000000 -0500
+++ ./hp-rtl/rx_routing.v	2024-09-12 17:14:43.101796026 -0400
@@ -0,0 +1,1073 @@
+`resetall
+`timescale 1ns / 1ps
+`default_nettype none
+
+`define CASE_ASSIGN(ARG1, ARG2) \
+    case (``ARG1) \
+        0: ``ARG2 = 512'h0; \
+        1: ``ARG2 = 512'hff; \
+        2: ``ARG2 = 512'hffff; \
+        3: ``ARG2 = 512'hffffff; \
+        4: ``ARG2 = 512'hffffffff; \
+        5: ``ARG2 = 512'hffffffffff; \
+        6: ``ARG2 = 512'hffffffffffff; \
+        7: ``ARG2 = 512'hffffffffffffff; \
+        8: ``ARG2 = 512'hffffffffffffffff; \
+        9: ``ARG2 = 512'hffffffffffffffffff; \
+        10: ``ARG2 = 512'hffffffffffffffffffff; \
+        11: ``ARG2 = 512'hffffffffffffffffffffff; \
+        12: ``ARG2 = 512'hffffffffffffffffffffffff; \
+        13: ``ARG2 = 512'hffffffffffffffffffffffffff; \
+        14: ``ARG2 = 512'hffffffffffffffffffffffffffff; \
+        15: ``ARG2 = 512'hffffffffffffffffffffffffffffff; \
+        16: ``ARG2 = 512'hffffffffffffffffffffffffffffffff; \
+        17: ``ARG2 = 512'hffffffffffffffffffffffffffffffffff; \
+        18: ``ARG2 = 512'hffffffffffffffffffffffffffffffffffff; \
+        19: ``ARG2 = 512'hffffffffffffffffffffffffffffffffffffff; \
+        20: ``ARG2 = 512'hffffffffffffffffffffffffffffffffffffffff; \
+        21: ``ARG2 = 512'hffffffffffffffffffffffffffffffffffffffffff; \
+        22: ``ARG2 = 512'hffffffffffffffffffffffffffffffffffffffffffff; \
+        23: ``ARG2 = 512'hffffffffffffffffffffffffffffffffffffffffffffff; \
+        24: ``ARG2 = 512'hffffffffffffffffffffffffffffffffffffffffffffffff; \
+        25: ``ARG2 = 512'hffffffffffffffffffffffffffffffffffffffffffffffffff; \
+        26: ``ARG2 = 512'hffffffffffffffffffffffffffffffffffffffffffffffffffff; \
+        27: ``ARG2 = 512'hffffffffffffffffffffffffffffffffffffffffffffffffffffff; \
+        28: ``ARG2 = 512'hffffffffffffffffffffffffffffffffffffffffffffffffffffffff; \
+        29: ``ARG2 = 512'hffffffffffffffffffffffffffffffffffffffffffffffffffffffffff; \
+        30: ``ARG2 = 512'hffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff; \
+        31: ``ARG2 = 512'hffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff; \
+        32: ``ARG2 = 512'hffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff; \
+        33: ``ARG2 = 512'hffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff; \
+        34: ``ARG2 = 512'hffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff; \
+        35: ``ARG2 = 512'hffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff; \
+        36: ``ARG2 = 512'hffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff; \
+        37: ``ARG2 = 512'hffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff; \
+        38: ``ARG2 = 512'hffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff; \
+        39: ``ARG2 = 512'hffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff; \
+        40: ``ARG2 = 512'hffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff; \
+        41: ``ARG2 = 512'hffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff; \
+        42: ``ARG2 = 512'hffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff; \
+        43: ``ARG2 = 512'hffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff; \
+        44: ``ARG2 = 512'hffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff; \
+        45: ``ARG2 = 512'hffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff; \
+        46: ``ARG2 = 512'hffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff; \
+        47: ``ARG2 = 512'hffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff; \
+        48: ``ARG2 = 512'hffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff; \
+        default: ``ARG2 = 0; \
+    endcase
+
+module rx_routing #
+(
+    parameter DATA_WIDTH = 512,
+    parameter KEEP_WIDTH = DATA_WIDTH/8,
+    parameter RX_ROUTING_KEY_LEN = 32,
+    parameter MSG_ID_WIDTH = 32,
+    parameter MSG_OFF_WIDTH = 8,
+    parameter MSG_DST_PORT = 16'hf1f1,  // bigendian
+    parameter BIT_LEN_WIDTH = 16,
+    parameter NUM_FIFOS = 64,
+    parameter CL_NUM_FIFOS = $clog2(NUM_FIFOS),
+    parameter CAM_CMP_DATA_WIDTH = 64,
+    parameter CAM_RAM_ADDR_WIDTH = 9
+)
+(
+    // input data 
+    input  wire [DATA_WIDTH-1:0]                s_axis_tdata,
+    input  wire [KEEP_WIDTH-1:0]                s_axis_tkeep,
+    input  wire                                 s_axis_tvalid,
+    input  wire                                 s_axis_tlast,
+    output wire                                 s_axis_tready,
+
+    // output
+    output wire [RX_ROUTING_KEY_LEN-1:0]        m_axis_key,
+    output wire [MSG_ID_WIDTH-1:0]              m_axis_msg_id,
+    output wire                                 m_axis_key_valid,
+
+    output wire [31:0]                          ctrl_cnt,
+
+    // seperate AXIS signals for reconfiguration
+    input  wire [DATA_WIDTH-1:0]                s_ctrl_axis_tdata,
+    input  wire [KEEP_WIDTH-1:0]                s_ctrl_axis_tkeep,
+    input  wire                                 s_ctrl_axis_tvalid,
+    output wire                                 s_ctrl_axis_tready,
+
+    input  wire                                 clk,
+    input  wire                                 rst
+);
+
+
+function [15:0] byte_len (input [KEEP_WIDTH-1:0] keep);
+    integer i;
+    begin
+        byte_len = 0;
+        for (i = 0; i<KEEP_WIDTH; i=i+1) begin
+            if (keep[i] == 1'b1) begin
+                byte_len = byte_len + 1;
+            end
+        end
+    end
+endfunction
+
+initial begin
+    // initialization check
+    if (RX_ROUTING_KEY_LEN != 32) begin
+        $error("Error: rx routing key length should be 32 (instance %m)");
+        $finish;
+    end
+end
+
+// First 64B, check whether it is msg-pkt
+// (1) if no, wait till tlast and output and output key 
+// (2) if yes, input to memloader, and do the backpressure
+//      --> read from memloader to process application logic
+//      --> e.g., memcached, extract key
+
+// assumption: max key length 64B
+
+reg  [BIT_LEN_WIDTH-1:0] fifo_in_len_reg = 0, fifo_in_len_next;
+reg  [MSG_ID_WIDTH-1:0] fifo_in_msg_id_reg = 0, fifo_in_msg_id_next;
+reg  fifo_in_len_valid_reg = 0, fifo_in_len_valid_next;
+reg  [7:0] tot_seg_cnt = 0, tot_seg_cnt_next;
+reg  [7:0] cur_seg_cnt = 0, cur_seg_cnt_next;
+
+reg [7:0] st_app_id_reg = 0, st_app_id_next;
+reg [7:0] st_msg_type_reg = 0, st_msg_type_next;
+reg [7:0] st_ram_rd_addr_reg = 0, st_ram_rd_addr_next;
+
+wire [7:0] fifo_st_app_id, fifo_st_msg_type, fifo_st_ram_rd_addr;
+
+wire fifo_in_len_ready;
+wire [BIT_LEN_WIDTH-1:0] fifo_out_len;
+wire [MSG_ID_WIDTH-1:0] fifo_out_msg_id;
+wire fifo_out_len_valid;
+reg  fifo_out_len_ready;
+
+// TODO: check the fifo depth
+axis_fifo #(
+    // .DEPTH(BIT_LEN_WIDTH*32),
+    .DEPTH(40),
+    .DATA_WIDTH(BIT_LEN_WIDTH+MSG_ID_WIDTH+3*8),  // we use 16-bit bit len
+    .KEEP_ENABLE(0),
+    .LAST_ENABLE(0),
+    .ID_ENABLE(0),
+    .DEST_ENABLE(0),
+    .USER_ENABLE(0),
+    .FRAME_FIFO(0)
+)
+data_len_fifo (
+    .clk(clk),
+    .rst(rst),
+
+    // AXI input
+    .s_axis_tdata   ({fifo_in_len_reg, fifo_in_msg_id_reg, st_app_id_reg, st_msg_type_reg, st_ram_rd_addr_reg}),
+    .s_axis_tkeep   (0),
+    .s_axis_tvalid  (fifo_in_len_valid_reg),
+    .s_axis_tready  (fifo_in_len_ready),
+    .s_axis_tlast   (0),
+    .s_axis_tid     (0),
+    .s_axis_tdest   (0),
+    .s_axis_tuser   (0),
+
+    // AXI output
+    .m_axis_tdata   ({fifo_out_len, fifo_out_msg_id, fifo_st_app_id, fifo_st_msg_type, fifo_st_ram_rd_addr}),
+    .m_axis_tkeep   (),
+    .m_axis_tvalid  (fifo_out_len_valid),
+    .m_axis_tready  (fifo_out_len_ready),
+    .m_axis_tlast   (),
+    .m_axis_tid     (),
+    .m_axis_tdest   (),
+    .m_axis_tuser   (),
+
+    // Status
+    .status_overflow    (),
+    .status_bad_frame   (),
+    .status_good_frame  ()
+);
+
+// get data length to the FIFO
+
+localparam IP_ETHTYPE = 16'h0008;
+localparam UDP_IPPROTO = 8'h11;
+
+localparam S_DATALEN_WAIT_FIRST_SEG = 0;
+localparam S_DATALEN_WAIT_LAST_SEG = 1;
+
+wire [BIT_LEN_WIDTH-1:0] cur_bit_len;
+
+assign cur_bit_len = byte_len(s_axis_tkeep);
+
+reg  dl_state_reg = 0, dl_state_next; // compute data len state
+
+
+always @(*) begin
+
+    dl_state_next = dl_state_reg;
+
+    fifo_in_len_valid_next = 1'b0;
+    fifo_in_len_next = fifo_in_len_reg;
+    fifo_in_msg_id_next = fifo_in_msg_id_reg;
+    tot_seg_cnt_next = tot_seg_cnt;
+    cur_seg_cnt_next = cur_seg_cnt;
+
+    st_app_id_next = st_app_id_reg;
+    st_msg_type_next = st_msg_type_reg;
+    st_ram_rd_addr_next = st_ram_rd_addr_reg;
+
+    case (dl_state_reg)
+        S_DATALEN_WAIT_FIRST_SEG: begin
+            if (s_axis_tready && s_axis_tvalid) begin
+                fifo_in_msg_id_next = 0;
+
+                // if message packet
+                if (s_axis_tdata[12*8 +: 16] == IP_ETHTYPE &&
+                    s_axis_tdata[23*8 +: 8] == UDP_IPPROTO &&
+                    s_axis_tdata[36*8 +: 16] == MSG_DST_PORT) begin
+
+                    tot_seg_cnt_next = s_axis_tdata[46*8 +: 8];
+                    fifo_in_msg_id_next = {s_axis_tdata[59*8 +:8],
+                                                s_axis_tdata[58*8 +: 8],
+                                                s_axis_tdata[57*8 +: 8],
+                                                s_axis_tdata[56*8 +: 8]};
+                end
+                else begin
+                    tot_seg_cnt_next = 2;
+                end
+
+                fifo_in_len_next = cur_bit_len;
+                cur_seg_cnt_next = 1;
+
+                //
+                st_app_id_next = s_axis_tdata[42*8 +: 8];
+                st_msg_type_next = s_axis_tdata[47*8 +: 8];
+                st_ram_rd_addr_next = {s_axis_tdata[42*8 +: 4], s_axis_tdata[47*8 +: 4]};
+
+                if (s_axis_tlast) begin
+                    fifo_in_len_valid_next = 1'b1;
+                end
+                else begin
+                    dl_state_next = S_DATALEN_WAIT_LAST_SEG;
+                end
+            end
+        end
+        S_DATALEN_WAIT_LAST_SEG: begin
+            if (s_axis_tready && s_axis_tvalid) begin
+                cur_seg_cnt_next = cur_seg_cnt + 1;
+
+                fifo_in_len_next = fifo_in_len_reg + cur_bit_len;
+                if (cur_seg_cnt == tot_seg_cnt-1) begin
+                    fifo_in_len_valid_next = 1'b1;
+                end
+
+                if (s_axis_tlast) begin
+                    // zero out
+                    tot_seg_cnt_next = 0;
+                    cur_seg_cnt_next = 0;
+                    dl_state_next = S_DATALEN_WAIT_FIRST_SEG;
+                end
+            end
+        end
+    endcase
+end
+
+always @(posedge clk) begin
+    dl_state_reg <= dl_state_next;
+    fifo_in_len_reg <= fifo_in_len_next;
+    fifo_in_msg_id_reg <= fifo_in_msg_id_next;
+    fifo_in_len_valid_reg <= fifo_in_len_valid_next;
+    tot_seg_cnt <= tot_seg_cnt_next;
+    cur_seg_cnt <= cur_seg_cnt_next;
+
+    st_app_id_reg <= st_app_id_next;
+    st_msg_type_reg <= st_msg_type_next;
+    st_ram_rd_addr_reg <= st_ram_rd_addr_next;
+
+    if (rst) begin
+        dl_state_reg <= S_DATALEN_WAIT_FIRST_SEG;
+        fifo_in_len_reg <= 0;
+        fifo_in_msg_id_reg <= 0;
+        fifo_in_len_valid_reg <= 0;
+        tot_seg_cnt <= 0;
+        cur_seg_cnt <= 0;
+
+        st_app_id_reg <= 0;
+        st_msg_type_reg <= 0;
+        st_ram_rd_addr_reg <= 0;
+    end
+end
+
+// request processing logic
+
+reg  [RX_ROUTING_KEY_LEN-1:0] m_axis_key_reg = 0, m_axis_key_next;
+reg  [MSG_ID_WIDTH-1:0] m_axis_msg_id_reg = 0, m_axis_msg_id_next;
+reg  m_axis_key_valid_reg = 0, m_axis_key_valid_next;
+
+
+assign m_axis_key = m_axis_key_reg;
+assign m_axis_msg_id = m_axis_msg_id_reg;
+assign m_axis_key_valid = m_axis_key_valid_reg;
+
+// memloader manipulation
+wire memld_input_tready;
+reg  memld_output_tready;
+reg  [CL_NUM_FIFOS:0] memld_consumed_bytes;
+wire [CL_NUM_FIFOS:0] memld_available_bytes;
+wire [DATA_WIDTH-1:0] memld_output_tdata;
+wire memld_output_tvalid;
+wire memld_input_valid;
+
+assign s_axis_tready = memld_input_tready && fifo_in_len_ready;
+// assign memld_input_valid = dl_state_reg==S_DATALEN_WAIT_FIRST_SEG
+//                             || cur_seg_cnt<tot_seg_cnt;
+assign memld_input_valid = cur_seg_cnt<tot_seg_cnt;
+
+memloader #(
+    .FIFO_DEPTH(40)
+)
+memloader_ins (
+
+    // input
+    .s_input_tdata      (s_axis_tdata),
+    .s_input_tkeep      (s_axis_tkeep),
+    .s_input_tvalid     (s_axis_tvalid && s_axis_tready && memld_input_valid),
+    .s_input_tready     (memld_input_tready),
+
+    .m_output_tready    (memld_output_tready),
+    .m_consumed_bytes   (memld_consumed_bytes),
+    // output
+    .m_available_bytes  (memld_available_bytes),
+    .m_output_tvalid    (memld_output_tvalid),
+    .m_output_tdata     (memld_output_tdata),
+
+    .clk                (clk),
+    .rst                (rst)
+);
+
+
+localparam PE_DATA_WIDTH = DATA_WIDTH/8;
+localparam CL_PE_DATA_WIDTH = $clog2(PE_DATA_WIDTH);
+
+wire [7:0] delimiter = 8'h24;
+wire [PE_DATA_WIDTH-1:0] pe_input;
+
+wire delim_n_skip_valid;
+wire [CL_PE_DATA_WIDTH-1:0] delim_n_skip;
+
+generate
+    genvar j;
+    for (j=0; j<PE_DATA_WIDTH; j=j+1) begin: g_pe_input
+        assign pe_input[j] = (memld_output_tdata[j*8 +: 8]===delimiter)? 1'b1 : 1'b0;
+    end
+endgenerate
+
+
+// a priority encoder
+priority_encoder #(
+    .WIDTH(PE_DATA_WIDTH),
+    .LSB_HIGH_PRIORITY(1)
+)
+pe_inst (
+    .input_unencoded        (pe_input),
+    .output_valid           (delim_n_skip_valid),
+    .output_encoded         (delim_n_skip),
+    .output_unencoded       ()
+);
+
+// state machine controlling insertion to memloader
+
+localparam S_WAIT_FIRST_SEG                     = 0;
+localparam S_DUMMY_TWO_CYCLE_DONE_1             = 1;
+localparam S_DUMMY_TWO_CYCLE_DONE_2             = 2;
+localparam S_ENTER_PROCESSING_1                 = 3;
+localparam S_ENTER_PROCESSING_2                 = 4;
+localparam S_FLUSH_REST                         = 5;
+localparam S_DUMMY_TWO_CYCLE_FLUSH_1            = 6;
+localparam S_DUMMY_TWO_CYCLE_FLUSH_2            = 7;
+localparam S_SKIP_PART                          = 8;
+localparam S_SKIP_PART_DONE_1                   = 9;
+localparam S_SKIP_PART_DONE_2                   = 10;
+localparam S_MATCH_PART                         = 11;
+localparam S_MATCH_PART_DONE_1                  = 12;
+localparam S_MATCH_PART_DONE_2                  = 13;
+localparam S_MATCH_PART_DONE_3                  = 14;
+localparam S_MATCH_PART_DONE_4                  = 15;
+localparam S_FLUSH_SINGLE_FIELD                 = 16;
+localparam S_FLUSH_SINGLE_FIELD_DONE_1          = 17;
+localparam S_FLUSH_SINGLE_FIELD_DONE_2          = 18;
+
+reg [4:0] state_reg = 0, state_next;
+reg [7:0] remaining_field_len_reg = 0, remaining_field_len_next;
+reg [BIT_LEN_WIDTH-1:0] remaining_length_reg = 0, remaining_length_next;
+
+reg if_include_first_two_bytes_reg = 0, if_include_first_two_bytes_next;
+
+reg [DATA_WIDTH-1:0] app_key_reg = 0, app_key_next;
+
+// FIXME:
+// wire [RX_ROUTING_KEY_LEN-1:0] hashed_key = hash_toep(app_key_reg, app_key_len_reg, hash_key);
+// wire [RX_ROUTING_KEY_LEN-1:0] hashed_key = (app_key_reg[23:0]==24'h6F6F66) ? 1 :
+//                                             (app_key_reg[23:0]==24'h726162 ? 2 : 0);
+wire [RX_ROUTING_KEY_LEN-1:0] hashed_key = app_key_reg[31:0];
+
+// CAM and RAM
+// CAM
+//  appid + msg_type: 8
+//  field_index: 8
+//  cur state: 8
+//  key: 64b = 8B // CAM_CMP_DATA_WIDTH
+// RAM
+//  field_index: 8
+//  #bytes to skip: 8
+//  #bytes of key: 8
+//  next state: 8
+localparam CAM_DATA_WIDTH = 8+8+8+CAM_CMP_DATA_WIDTH;
+localparam RAM_DATA_WIDTH = 8+8+8+8;
+
+reg  [CAM_DATA_WIDTH-1:0] cam_compared_data_reg = 0, cam_compared_data_next;
+wire [CAM_RAM_ADDR_WIDTH-1:0] cam_match_addr;
+wire cam_match;
+reg  [CAM_RAM_ADDR_WIDTH-1:0] ram_rd_addr_reg = 0, ram_rd_addr_next;
+wire [RAM_DATA_WIDTH-1:0] ram_rd_data;
+
+wire [7:0] bytes_field_index = ram_rd_data[31:24];
+wire [7:0] bytes_to_skip = ram_rd_data[23:16];
+wire [7:0] bytes_of_key = ram_rd_data[15:8];
+wire [7:0] app_next_state = ram_rd_data[7:0];
+
+reg [7:0] app_id_reg = 0, app_id_next;
+reg [7:0] msg_type_reg = 0, msg_type_next;
+reg [7:0] field_ind_reg = 0, field_ind_next;
+reg [7:0] app_cur_state_reg = 0, app_cur_state_next;
+
+reg is_successfully_matched_reg = 0, is_successfully_matched_next;
+
+
+reg [CAM_CMP_DATA_WIDTH-1:0] cam_match_mask_reg = 0, cam_match_mask_next;
+reg [7:0] bytes_field_index_reg = 0, bytes_field_index_next;
+reg [7:0] bytes_to_skip_reg = 0, bytes_to_skip_next;
+reg [7:0] bytes_of_key_reg = 0, bytes_of_key_next;
+//
+wire [CAM_CMP_DATA_WIDTH-1:0] masked_key = memld_output_tdata[CAM_CMP_DATA_WIDTH-1:0] & cam_match_mask_reg[CAM_CMP_DATA_WIDTH-1:0];
+wire [7:0] bytes_to_skip_w = (bytes_to_skip_reg==8'hff)? (remaining_field_len_reg==0?delim_n_skip-1:delim_n_skip+1) : bytes_to_skip_reg;
+
+always @(*) begin
+
+    state_next = state_reg;
+    remaining_field_len_next = remaining_field_len_reg;
+    remaining_length_next = remaining_length_reg;
+
+    // key output
+    m_axis_key_next = 0;
+    m_axis_msg_id_next = m_axis_msg_id_reg;
+    m_axis_key_valid_next = 1'b0;
+
+    app_key_next = app_key_reg;
+
+    // data len fifo ctrl
+    fifo_out_len_ready = 1'b0;
+
+    // memloader ctrl
+    memld_consumed_bytes = 0;
+    memld_output_tready = 1'b0;
+
+    //
+    app_id_next = app_id_reg;
+    msg_type_next = msg_type_reg;
+    field_ind_next = field_ind_reg;
+
+    app_cur_state_next = app_cur_state_reg;
+    ram_rd_addr_next = ram_rd_addr_reg;
+
+    if_include_first_two_bytes_next = if_include_first_two_bytes_reg;
+
+    cam_match_mask_next = cam_match_mask_reg;
+    cam_compared_data_next = cam_compared_data_reg;
+    is_successfully_matched_next = is_successfully_matched_reg;
+    bytes_field_index_next = bytes_field_index_reg;
+    bytes_to_skip_next = bytes_to_skip_reg;
+    bytes_of_key_next = bytes_of_key_reg;
+    //
+
+    case (state_reg)
+        S_WAIT_FIRST_SEG: begin
+            if (fifo_out_len_valid) begin
+                m_axis_msg_id_next = fifo_out_msg_id;
+                fifo_out_len_ready = 1'b1;
+                remaining_length_next = fifo_out_len - 64;
+                // get
+                app_id_next = fifo_st_app_id;
+                msg_type_next = fifo_st_msg_type;
+                app_cur_state_next = 0;
+                ram_rd_addr_next = fifo_st_ram_rd_addr;
+
+                state_next = S_ENTER_PROCESSING_1;
+            end
+        end
+        S_DUMMY_TWO_CYCLE_DONE_1: begin
+            state_next = S_DUMMY_TWO_CYCLE_DONE_2;
+        end
+        S_DUMMY_TWO_CYCLE_DONE_2: begin
+            state_next = S_WAIT_FIRST_SEG;
+        end
+        // one cycle to get entry info from RAM
+        S_ENTER_PROCESSING_1: begin
+            state_next = S_ENTER_PROCESSING_2;
+        end
+        S_ENTER_PROCESSING_2: begin
+            `CASE_ASSIGN(bytes_of_key, cam_match_mask_next);
+
+            // read from RAM
+            bytes_field_index_next = bytes_field_index;
+            bytes_to_skip_next = bytes_to_skip;
+            bytes_of_key_next = bytes_of_key;
+            app_cur_state_next = app_next_state;
+
+            state_next = S_SKIP_PART;
+            is_successfully_matched_next = 1'b1;
+        end
+        S_FLUSH_REST : begin
+            if (memld_output_tvalid) begin
+                if (remaining_length_reg > 0) begin
+                    if (remaining_length_reg <= memld_available_bytes) begin
+                        memld_consumed_bytes = remaining_length_reg;
+                        memld_output_tready = 1'b1;
+
+                        state_next = S_DUMMY_TWO_CYCLE_DONE_1;
+
+                        if (is_successfully_matched_reg) begin
+                            m_axis_key_next = hashed_key;
+                            m_axis_key_valid_next = 1'b1;
+                        end
+                        else begin
+                            m_axis_key_next = 0;
+                            m_axis_key_valid_next = 1'b1;
+                        end
+                    end
+                    else begin
+                        state_next = S_DUMMY_TWO_CYCLE_FLUSH_1;
+                        memld_consumed_bytes = memld_available_bytes;
+                        memld_output_tready = 1'b1;
+
+                        remaining_length_next = remaining_length_reg - memld_available_bytes;
+                    end
+                end
+                else begin
+                    state_next = S_WAIT_FIRST_SEG;
+                    if (is_successfully_matched_reg) begin
+                        m_axis_key_next = hashed_key;
+                        m_axis_key_valid_next = 1'b1;
+                    end
+                    else begin
+                        m_axis_key_next = 0;
+                        m_axis_key_valid_next = 1'b1;
+                    end
+                end
+            end
+        end
+        S_DUMMY_TWO_CYCLE_FLUSH_1: begin
+            state_next = S_DUMMY_TWO_CYCLE_FLUSH_2;
+        end
+        S_DUMMY_TWO_CYCLE_FLUSH_2: begin
+            state_next = S_FLUSH_REST;
+        end
+        S_FLUSH_SINGLE_FIELD: begin
+            if (remaining_field_len_reg > 0) begin
+                if (memld_output_tvalid) begin
+                    if (memld_available_bytes >= remaining_field_len_reg) begin
+                        memld_consumed_bytes = remaining_field_len_reg;
+                        memld_output_tready = 1'b1;
+
+                        remaining_length_next = remaining_length_reg - remaining_field_len_reg;
+                        remaining_field_len_next = 0;
+                        state_next = S_FLUSH_SINGLE_FIELD_DONE_1;
+                    end
+                    else begin
+                        memld_consumed_bytes = memld_available_bytes;
+                        memld_output_tready = 1'b1;
+
+                        remaining_length_next = remaining_length_reg - memld_available_bytes;
+                        remaining_field_len_next = remaining_field_len_reg - memld_available_bytes;
+                        state_next = S_FLUSH_SINGLE_FIELD_DONE_1;
+                    end
+                end
+            end
+            else begin
+                state_next = S_SKIP_PART;
+            end
+        end
+        S_FLUSH_SINGLE_FIELD_DONE_1: begin
+            state_next = S_FLUSH_SINGLE_FIELD_DONE_2;
+        end
+        S_FLUSH_SINGLE_FIELD_DONE_2: begin
+            if (remaining_field_len_reg > 0) begin
+                state_next = S_FLUSH_SINGLE_FIELD;
+            end
+            else begin
+                if (remaining_length_reg > 0) begin
+                    // TODO: fix this issue later
+                    state_next = S_SKIP_PART;
+                end
+                else begin
+                    state_next = S_WAIT_FIRST_SEG;
+                    if (is_successfully_matched_reg) begin
+                        m_axis_key_next = hashed_key;
+                        m_axis_key_valid_next = 1'b1;
+                    end
+                    else begin
+                        m_axis_key_next = 0;
+                        m_axis_key_valid_next = 1'b1;
+                    end
+                end
+            end
+        end
+        // L7 processing
+        // Skip-and-Match abstraction
+        S_SKIP_PART: begin
+            if (memld_output_tvalid) begin
+                // has not parse the field len and index yet
+                if (remaining_field_len_reg == 0) begin
+                    // field_ind_next = memld_output_tdata[0 +: 8];
+                    // remaining_field_len_next = memld_output_tdata[8 +: 8];
+
+                    // if (bytes_field_index_reg != memld_output_tdata[0 +: 8]) begin
+                    //     if_include_first_two_bytes_next = 1'b1;
+                    //     state_next = S_FLUSH_SINGLE_FIELD;
+                    // end
+                    if (memld_available_bytes >= bytes_to_skip_w+2) begin
+                        memld_consumed_bytes = bytes_to_skip_w+2;
+                        memld_output_tready = 1'b1;
+
+                        field_ind_next = memld_output_tdata[0 +: 8];
+                        remaining_field_len_next = memld_output_tdata[8 +: 8] - bytes_to_skip_w;
+                        remaining_length_next = remaining_length_reg - (bytes_to_skip_w+2);
+
+                        bytes_to_skip_next = 0;
+                        state_next = S_SKIP_PART_DONE_1;
+                    end
+                end
+                else begin
+                    if (bytes_field_index_reg==field_ind_reg && (bytes_to_skip_w>0 || bytes_of_key_reg>0)) begin
+                        // assume that #bytes_to_skip + #bytes_of_key <= 64
+                        if (bytes_to_skip_w>0) begin
+                            if (memld_available_bytes>=bytes_to_skip_w + bytes_of_key_reg) begin
+                                memld_consumed_bytes = bytes_to_skip_w;
+                                memld_output_tready = 1'b1;
+                                remaining_field_len_next = remaining_field_len_reg - bytes_to_skip_w;
+                                remaining_length_next = remaining_length_reg - bytes_to_skip_w;
+
+                                // construct the matched key
+                                // matched_key_next = memld_output_tdata >> (8*bytes_to_skip_w);
+                                bytes_to_skip_next = 0;
+                                state_next = S_SKIP_PART_DONE_1;
+                            end
+                        end
+                        else if (bytes_of_key_reg > 0) begin
+                            state_next = S_MATCH_PART;
+                        end
+                        // else begin
+                        //     memld_consumed_bytes = memld_available_bytes;
+                        //     memld_output_tready = 1'b1;
+                        //     remaining_field_len_next = remaining_field_len_reg - memld_available_bytes;
+                        //     remaining_length_next = remaining_length_reg - memld_available_bytes;
+
+                        //     bytes_to_skip_next = bytes_to_skip_w - memld_available_bytes;
+                        //     state_next = S_SKIP_PART_DUMMY_1;
+                        // end
+                    end
+                    else begin
+                        state_next = S_FLUSH_SINGLE_FIELD;
+                    end
+                end
+            end
+        end
+        S_SKIP_PART_DONE_1: begin
+            state_next = S_SKIP_PART_DONE_2;
+        end
+        S_SKIP_PART_DONE_2: begin
+            state_next = S_MATCH_PART;
+        end
+        S_MATCH_PART: begin
+            if (memld_output_tvalid && memld_available_bytes>=bytes_of_key_reg) begin
+                memld_output_tready = bytes_of_key_reg>0? 1'b1 : 1'b0;
+                memld_consumed_bytes = bytes_of_key_reg;
+
+                remaining_field_len_next = remaining_field_len_reg - bytes_of_key_reg;
+                remaining_length_next = remaining_length_reg - bytes_of_key_reg;
+
+                // 8+8+64;
+                cam_compared_data_next = {app_id_reg[3:0], msg_type_reg[3:0], field_ind_reg, app_cur_state_reg, masked_key};
+
+                state_next = S_MATCH_PART_DONE_1;
+            end
+        end
+        S_MATCH_PART_DONE_1: begin
+            state_next = S_MATCH_PART_DONE_2;
+        end
+        S_MATCH_PART_DONE_2: begin
+
+            if (cam_match) begin
+                is_successfully_matched_next = 1'b1;
+
+                ram_rd_addr_next = cam_match_addr;
+                state_next = S_MATCH_PART_DONE_3;
+            end
+            else begin
+                is_successfully_matched_next = 1'b0;
+                state_next = S_FLUSH_REST;
+            end
+        end
+        S_MATCH_PART_DONE_3: begin
+            state_next = S_MATCH_PART_DONE_4;
+        end
+        S_MATCH_PART_DONE_4: begin
+            state_next = S_SKIP_PART;
+
+            bytes_field_index_next = bytes_field_index;
+            bytes_to_skip_next = bytes_to_skip;
+            bytes_of_key_next = bytes_of_key;
+            app_cur_state_next = app_next_state;
+
+            // cam_match_mask_next = {CAM_DATA_WIDTH{1'h0}} | ((1<<(8*bytes_of_key)) - 1);
+            `CASE_ASSIGN(bytes_of_key, cam_match_mask_next);
+
+            if (bytes_to_skip==0 && bytes_of_key==0) begin
+                app_key_next = app_next_state; // final result
+            end
+        end
+    endcase
+end
+
+
+always @(posedge clk) begin
+
+    state_reg <= state_next;
+    remaining_field_len_reg <= remaining_field_len_next;
+    remaining_length_reg    <= remaining_length_next;
+
+    m_axis_key_reg <= m_axis_key_next;
+    m_axis_msg_id_reg <= m_axis_msg_id_next;
+    m_axis_key_valid_reg <= m_axis_key_valid_next;
+
+    app_key_reg <= app_key_next;
+
+    if_include_first_two_bytes_reg <= if_include_first_two_bytes_next;
+    //
+    app_id_reg                      <= app_id_next;
+    msg_type_reg                    <= msg_type_next;
+    field_ind_reg                   <= field_ind_next;
+    app_cur_state_reg               <= app_cur_state_next;
+    ram_rd_addr_reg                 <= ram_rd_addr_next;
+
+    cam_match_mask_reg              <= cam_match_mask_next;
+    cam_compared_data_reg           <= cam_compared_data_next;
+    is_successfully_matched_reg     <= is_successfully_matched_next;
+    bytes_field_index_reg           <= bytes_field_index_next;
+    bytes_to_skip_reg               <= bytes_to_skip_next;
+    bytes_of_key_reg                <= bytes_of_key_next;
+
+    if (rst) begin
+        state_reg <= S_WAIT_FIRST_SEG;
+        remaining_field_len_reg <= 0;
+        remaining_length_reg    <= 0;
+
+        m_axis_key_reg <= 0;
+        m_axis_msg_id_reg <= 0;
+        m_axis_key_valid_reg <= 0;
+
+        app_key_reg <= 0;
+
+        if_include_first_two_bytes_reg <= 0;
+        //
+        app_id_reg                      <= 0;
+        msg_type_reg                    <= 0;
+        field_ind_reg                   <= 0;
+        app_cur_state_reg               <= 0;
+        ram_rd_addr_reg                 <= 0;
+
+        cam_match_mask_reg              <= 0;
+        is_successfully_matched_reg     <= 0;
+        bytes_field_index_reg           <= 0;
+        bytes_to_skip_reg               <= 0;
+        bytes_of_key_reg                <= 0;
+    end
+end
+
+//=================================================
+// configuration update
+
+wire [DATA_WIDTH-1:0] s_ctrl_axis_tdata_swapped;
+
+// convert to human-readable endianess
+assign s_ctrl_axis_tdata_swapped = {
+    s_ctrl_axis_tdata[0+:8],
+    s_ctrl_axis_tdata[8+:8],
+    s_ctrl_axis_tdata[16+:8],
+    s_ctrl_axis_tdata[24+:8],
+    s_ctrl_axis_tdata[32+:8],
+    s_ctrl_axis_tdata[40+:8],
+    s_ctrl_axis_tdata[48+:8],
+    s_ctrl_axis_tdata[56+:8],
+    s_ctrl_axis_tdata[64+:8],
+    s_ctrl_axis_tdata[72+:8],
+    s_ctrl_axis_tdata[80+:8],
+    s_ctrl_axis_tdata[88+:8],
+    s_ctrl_axis_tdata[96+:8],
+    s_ctrl_axis_tdata[104+:8],
+    s_ctrl_axis_tdata[112+:8],
+    s_ctrl_axis_tdata[120+:8],
+    s_ctrl_axis_tdata[128+:8],
+    s_ctrl_axis_tdata[136+:8],
+    s_ctrl_axis_tdata[144+:8],
+    s_ctrl_axis_tdata[152+:8],
+    s_ctrl_axis_tdata[160+:8],
+    s_ctrl_axis_tdata[168+:8],
+    s_ctrl_axis_tdata[176+:8],
+    s_ctrl_axis_tdata[184+:8],
+    s_ctrl_axis_tdata[192+:8],
+    s_ctrl_axis_tdata[200+:8],
+    s_ctrl_axis_tdata[208+:8],
+    s_ctrl_axis_tdata[216+:8],
+    s_ctrl_axis_tdata[224+:8],
+    s_ctrl_axis_tdata[232+:8],
+    s_ctrl_axis_tdata[240+:8],
+    s_ctrl_axis_tdata[248+:8],
+    s_ctrl_axis_tdata[256+:8],
+    s_ctrl_axis_tdata[264+:8],
+    s_ctrl_axis_tdata[272+:8],
+    s_ctrl_axis_tdata[280+:8],
+    s_ctrl_axis_tdata[288+:8],
+    s_ctrl_axis_tdata[296+:8],
+    s_ctrl_axis_tdata[304+:8],
+    s_ctrl_axis_tdata[312+:8],
+    s_ctrl_axis_tdata[320+:8],
+    s_ctrl_axis_tdata[328+:8],
+    s_ctrl_axis_tdata[336+:8],
+    s_ctrl_axis_tdata[344+:8],
+    s_ctrl_axis_tdata[352+:8],
+    s_ctrl_axis_tdata[360+:8],
+    s_ctrl_axis_tdata[368+:8],
+    s_ctrl_axis_tdata[376+:8],
+    s_ctrl_axis_tdata[384+:8],
+    s_ctrl_axis_tdata[392+:8],
+    s_ctrl_axis_tdata[400+:8],
+    s_ctrl_axis_tdata[408+:8],
+    s_ctrl_axis_tdata[416+:8],
+    s_ctrl_axis_tdata[424+:8],
+    s_ctrl_axis_tdata[432+:8],
+    s_ctrl_axis_tdata[440+:8],
+    s_ctrl_axis_tdata[448+:8],
+    s_ctrl_axis_tdata[456+:8],
+    s_ctrl_axis_tdata[464+:8],
+    s_ctrl_axis_tdata[472+:8],
+    s_ctrl_axis_tdata[480+:8],
+    s_ctrl_axis_tdata[488+:8],
+    s_ctrl_axis_tdata[496+:8],
+    s_ctrl_axis_tdata[504+:8]
+};
+
+wire [DATA_WIDTH-1:0] conf_fifo_tdata;
+wire conf_fifo_tvalid;
+reg  conf_fifo_tready;
+
+axis_fifo #(
+    .DEPTH(64*(DATA_WIDTH)/8),
+    .DATA_WIDTH(DATA_WIDTH),
+    .KEEP_ENABLE(1),
+    .KEEP_WIDTH(DATA_WIDTH/8),
+    .LAST_ENABLE(0),
+    .ID_ENABLE(0),
+    .DEST_ENABLE(0),
+    .USER_ENABLE(0),
+    // .PIPELINE_OUTPUT(1),
+    .FRAME_FIFO(0)
+)
+conf_fifo (
+    .clk                    (clk),
+    .rst                    (rst),
+    // input
+    .s_axis_tdata           (s_ctrl_axis_tdata_swapped),
+    .s_axis_tkeep           (),
+    .s_axis_tvalid          (s_ctrl_axis_tvalid && s_ctrl_axis_tready),
+    .s_axis_tready          (s_ctrl_axis_tready),
+    .s_axis_tlast           (),
+    .s_axis_tid             (),
+    .s_axis_tdest           (),
+    .s_axis_tuser           (),
+    // output
+    .m_axis_tdata           (conf_fifo_tdata),
+    .m_axis_tkeep           (),
+    .m_axis_tvalid          (conf_fifo_tvalid),
+    .m_axis_tready          (conf_fifo_tready),
+    .m_axis_tlast           (),
+    .m_axis_tid             (),
+    .m_axis_tdest           (),
+    .m_axis_tuser           (),
+    
+    // status
+    .status_overflow        (),
+    .status_bad_frame       (),
+    .status_good_frame      ()
+);
+
+// CAM + RAM for matching state transitions
+// one single packet is enough
+// CAM
+//  appid + msg_type: 8
+//  field_index: 8
+//  cur state: 8
+//  key: 64b = 8B
+// RAM
+//  field_index: 8
+//  #bytes to skip: 8
+//  #bytes of key: 8
+//  next state: 8
+
+localparam RC_WAIT_CONFPKT = 0;
+localparam RC_ST_WRITE_CAM = 1;
+localparam RC_WAIT_CAM_FINISH = 2;
+
+reg [31:0] ctrl_cnt_reg = 0, ctrl_cnt_next;
+
+assign ctrl_cnt = ctrl_cnt_reg;
+
+// CAM write
+wire cam_wr_busy;
+reg [CAM_DATA_WIDTH-1:0] cam_wr_data_reg = 0, cam_wr_data_next;
+reg [15:0] cam_wr_addr_reg = 0, cam_wr_addr_next;
+reg cam_wr_en_reg = 0, cam_wr_en_next;
+
+// RAM write
+reg [RAM_DATA_WIDTH-1:0] ram_wr_data_reg = 0, ram_wr_data_next;
+reg [15:0] ram_wr_addr_reg = 0, ram_wr_addr_next;
+reg ram_wr_en_reg = 0, ram_wr_en_next;
+
+reg [3:0] rc_state_reg = RC_WAIT_CONFPKT, rc_state_next;
+
+always @(*) begin
+
+    rc_state_next = rc_state_reg;
+
+    ctrl_cnt_next = ctrl_cnt_reg;
+
+    cam_wr_en_next   = 1'b0;
+    cam_wr_data_next = cam_wr_data_reg;
+    cam_wr_addr_next = cam_wr_addr_reg;
+
+    ram_wr_en_next   = 1'b0;
+    ram_wr_data_next = ram_wr_data_reg;
+    ram_wr_addr_next = ram_wr_addr_reg;
+
+    conf_fifo_tready = 1'b0;
+
+    case(rc_state_reg)
+        RC_WAIT_CONFPKT: begin
+            // NOTE: 1-cycle pkt is enough
+            if (conf_fifo_tvalid) begin
+                conf_fifo_tready = 1'b1;
+                ctrl_cnt_next = ctrl_cnt_reg+1;
+                if (conf_fifo_tdata[511 -: 8] == 0) begin
+                    // cam write
+                    cam_wr_en_next   = 1'b1;
+                    cam_wr_addr_next = conf_fifo_tdata[503 -: 16];
+                    cam_wr_data_next = conf_fifo_tdata[487 -: CAM_DATA_WIDTH];
+                    rc_state_next = RC_ST_WRITE_CAM; // TODO: maybe not neccesary due to backpressure
+                end
+                else if (conf_fifo_tdata[511 -: 8] == 1) begin
+                    // ram write
+                    ram_wr_en_next   = 1'b1;
+                    ram_wr_addr_next = conf_fifo_tdata[503 -: 16];
+                    ram_wr_data_next = conf_fifo_tdata[487 -: RAM_DATA_WIDTH];
+                end
+                else begin
+                    // do nothing
+                end
+            end
+        end
+        RC_ST_WRITE_CAM: begin
+            rc_state_next = RC_WAIT_CAM_FINISH;
+        end
+        RC_WAIT_CAM_FINISH: begin
+            if (cam_wr_busy == 1'b0) begin
+                rc_state_next = RC_WAIT_CONFPKT;
+            end
+        end
+    endcase
+end
+
+always @(posedge clk) begin
+
+    rc_state_reg <= rc_state_next;
+    ctrl_cnt_reg <= ctrl_cnt_next;
+
+    // cam write
+    cam_wr_en_reg   <= cam_wr_en_next;
+    cam_wr_data_reg <= cam_wr_data_next;
+    cam_wr_addr_reg <= cam_wr_addr_next;
+
+    // ram write
+    ram_wr_en_reg   <= ram_wr_en_next;
+    ram_wr_data_reg <= ram_wr_data_next;
+    ram_wr_addr_reg <= ram_wr_addr_next;
+
+    if (rst) begin
+        rc_state_reg <= RC_WAIT_CONFPKT;
+        ctrl_cnt_reg <= 0;
+
+        // cam write
+        cam_wr_en_reg   <= 0;
+        cam_wr_data_reg <= 0;
+        cam_wr_addr_reg <= 0;
+
+        // ram write
+        ram_wr_en_reg   <= 0;
+        ram_wr_data_reg <= 0;
+        ram_wr_addr_reg <= 0;
+    end
+end
+
+cam_srl #(
+    .DATA_WIDTH (CAM_DATA_WIDTH),
+    .ADDR_WIDTH (CAM_RAM_ADDR_WIDTH)
+)
+cam_ins (
+    .clk            (clk),
+    .rst            (rst),
+
+    .write_addr     (cam_wr_addr_reg[CAM_RAM_ADDR_WIDTH-1:0]),
+    .write_data     (cam_wr_data_reg),
+    .write_delete   (1'b0), // TODO: no need to delete entries
+    .write_enable   (cam_wr_en_reg),
+    .write_busy     (cam_wr_busy),
+
+    .compare_data   (cam_compared_data_reg),
+    .match_many     (),
+    .match_single   (),
+    .match_addr     (cam_match_addr),
+    .match          (cam_match)
+);
+
+
+// one-clock read latency
+state_ram #(
+    .DATA_WIDTH (RAM_DATA_WIDTH),
+    .ADDR_WIDTH (CAM_RAM_ADDR_WIDTH)
+)
+state_ram_ins (
+    // write port
+    .ena            (1'b1),
+    .wr_en          (ram_wr_en_reg),
+    .wr_data        (ram_wr_data_reg),
+    .wr_addr        (ram_wr_addr_reg[CAM_RAM_ADDR_WIDTH-1:0]),
+
+    // read port
+    .rd_en          (1'b1),
+    .rd_addr        (ram_rd_addr_reg),
+    // .rd_addr        (ram_rd_addr_next),
+    .rd_data        (ram_rd_data),
+    //
+    .clk            (clk),
+    .rst            (rst)
+);
+
+endmodule
+
+`resetall
diff --color -burN ./corundum-rtl/state_ram.v ./hp-rtl/state_ram.v
--- ./corundum-rtl/state_ram.v	1969-12-31 19:00:00.000000000 -0500
+++ ./hp-rtl/state_ram.v	2024-09-12 17:14:43.149796023 -0400
@@ -0,0 +1,65 @@
+`resetall
+`timescale 1ns / 1ps
+`default_nettype none
+
+module state_ram #(
+    parameter DATA_WIDTH = 32,
+    parameter ADDR_WIDTH = 8,
+    parameter NUM_ENTRIES = 2**ADDR_WIDTH
+)
+(
+    // write port
+    input  wire                             ena,
+    input  wire                             wr_en,
+    input  wire [DATA_WIDTH-1:0]            wr_data,
+    input  wire [ADDR_WIDTH-1:0]            wr_addr,
+
+    // read port
+    input  wire                             rd_en,
+    input  wire [ADDR_WIDTH-1:0]            rd_addr,
+    output wire [DATA_WIDTH-1:0]            rd_data,
+
+    //
+    input  wire              clk,
+    input  wire              rst
+);
+
+// one-cycle read
+reg [DATA_WIDTH-1:0] mem [(2**ADDR_WIDTH)-1:0];
+// reg [DATA_WIDTH-1:0] rd_data_reg = 0, rd_data_out_reg = 0;
+reg [DATA_WIDTH-1:0] rd_data_reg = 0;
+
+integer i;
+// TODO: initialization
+initial begin
+    for (i=0; i<NUM_ENTRIES; i=i+1) begin
+        mem[i] = 4;
+    end
+end
+
+// assign rd_data = rd_data_out_reg;
+assign rd_data = rd_data_reg;
+
+always @(posedge clk) begin
+    if (ena) begin
+        if (wr_en) begin
+            mem[wr_addr] <= wr_data;
+        end
+    end
+
+    if (rd_en) begin
+        rd_data_reg <= mem[rd_addr];
+        // rd_data_out_reg <= rd_data_reg;
+    end
+
+    if (rst) begin
+        rd_data_reg <= 0;
+        // rd_data_out_reg <= 0;
+    end
+end
+
+endmodule
+
+
+
+`resetall
diff --color -burN ./corundum-rtl/two_q_arbiter.v ./hp-rtl/two_q_arbiter.v
--- ./corundum-rtl/two_q_arbiter.v	1969-12-31 19:00:00.000000000 -0500
+++ ./hp-rtl/two_q_arbiter.v	2024-09-12 17:14:43.149796023 -0400
@@ -0,0 +1,235 @@
+`resetall
+`timescale 1ns / 1ps
+`default_nettype none
+
+module two_q_arbiter #(
+    parameter NUM_FIFOS = 2,
+    parameter FIFO_DEPTH = 128,
+    parameter AXIS_TAG_WIDTH = 8, // default as DESC transmission
+    parameter AXIS_DATA_WIDTH = 128,
+    parameter AXIS_KEEP_WIDTH = AXIS_DATA_WIDTH/8,
+    parameter AXIS_USER_WIDTH = 1,
+    parameter AXIS_DEST_WIDTH = 1,
+    parameter KEEP_ENABLE = 1,
+    parameter LAST_ENABLE = 1,
+    parameter ID_ENABLE = 1,
+    parameter DEST_ENABLE = 0,
+    parameter USER_ENABLE = 0,
+    parameter PIPELINE_OUTPUT = 2
+)
+(
+    input  wire                             clk,
+    input  wire                             rst,
+
+    // input desc info from desc fetch
+    input  wire [AXIS_DATA_WIDTH-1:0]       s_axis_tdata_0,
+    input  wire [AXIS_KEEP_WIDTH-1:0]       s_axis_tkeep_0,
+    input  wire                             s_axis_tvalid_0,
+    output wire                             s_axis_tready_0,
+    input  wire                             s_axis_tlast_0,
+    input  wire [AXIS_TAG_WIDTH-1:0]        s_axis_tid_0,
+    input  wire [AXIS_USER_WIDTH-1:0]       s_axis_tuser_0,
+    input  wire [AXIS_DEST_WIDTH-1:0]       s_axis_tdest_0,
+    // second input
+    input  wire [AXIS_DATA_WIDTH-1:0]       s_axis_tdata_1,
+    input  wire [AXIS_KEEP_WIDTH-1:0]       s_axis_tkeep_1,
+    input  wire                             s_axis_tvalid_1,
+    output wire                             s_axis_tready_1,
+    input  wire                             s_axis_tlast_1,
+    input  wire [AXIS_TAG_WIDTH-1:0]        s_axis_tid_1,
+    input  wire [AXIS_USER_WIDTH-1:0]       s_axis_tuser_1,
+    input  wire [AXIS_DEST_WIDTH-1:0]       s_axis_tdest_1,
+    // output
+    output wire [AXIS_DATA_WIDTH-1:0]       m_axis_tdata,
+    output wire [AXIS_KEEP_WIDTH-1:0]       m_axis_tkeep,
+    output wire                             m_axis_tvalid,
+    input  wire                             m_axis_tready,
+    output wire                             m_axis_tlast,
+    output wire [AXIS_TAG_WIDTH-1:0]        m_axis_tid,
+    output wire [AXIS_USER_WIDTH-1:0]       m_axis_tuser,
+    output wire [AXIS_DEST_WIDTH-1:0]       m_axis_tdest
+);
+
+
+wire [AXIS_DATA_WIDTH-1:0]      in_data[NUM_FIFOS-1:0];
+wire [AXIS_KEEP_WIDTH-1:0]      in_keep[NUM_FIFOS-1:0];
+wire [AXIS_TAG_WIDTH-1:0]       in_tid[NUM_FIFOS-1:0];
+wire [AXIS_USER_WIDTH-1:0]      in_user[NUM_FIFOS-1:0];
+wire [AXIS_DEST_WIDTH-1:0]      in_dest[NUM_FIFOS-1:0];
+wire                            in_valid[NUM_FIFOS-1:0];
+wire                            in_last[NUM_FIFOS-1:0];
+wire                            in_ready[NUM_FIFOS-1:0];
+
+wire [AXIS_DATA_WIDTH-1:0]      fifo_out_data[NUM_FIFOS-1:0];
+wire [AXIS_KEEP_WIDTH-1:0]      fifo_out_keep[NUM_FIFOS-1:0];
+wire [AXIS_TAG_WIDTH-1:0]       fifo_out_tid[NUM_FIFOS-1:0];
+wire [AXIS_USER_WIDTH-1:0]      fifo_out_user[NUM_FIFOS-1:0];
+wire [AXIS_DEST_WIDTH-1:0]      fifo_out_dest[NUM_FIFOS-1:0];
+wire                            fifo_out_valid[NUM_FIFOS-1:0];
+wire                            fifo_out_last[NUM_FIFOS-1:0];
+reg                             fifo_out_ready[NUM_FIFOS-1:0];
+
+parameter NUM_FIFOS_BITS = $clog2(NUM_FIFOS);
+parameter NUM_STATES_BITS = 4;
+reg  [NUM_FIFOS_BITS-1:0] cur_q, cur_q_next;
+wire [NUM_FIFOS_BITS-1:0] cur_q_plus1;
+assign cur_q_plus1 = (cur_q == NUM_FIFOS-1) ? 0 : cur_q+1;
+
+reg [NUM_STATES_BITS-1:0] state, state_next;
+
+assign in_data[0]   = s_axis_tdata_0;
+assign in_keep[0]   = s_axis_tkeep_0;
+assign in_tid[0]    = s_axis_tid_0;
+assign in_user[0]   = s_axis_tuser_0;
+assign in_dest[0]   = s_axis_tdest_0;
+assign in_valid[0]  = s_axis_tvalid_0;
+assign in_last[0]   = s_axis_tlast_0;
+assign s_axis_tready_0 = in_ready[0];
+
+assign in_data[1]   = s_axis_tdata_1;
+assign in_keep[1]   = s_axis_tkeep_1;
+assign in_tid[1]    = s_axis_tid_1;
+assign in_user[1]   = s_axis_tuser_1;
+assign in_dest[1]   = s_axis_tdest_1;
+assign in_valid[1]  = s_axis_tvalid_1;
+assign in_last[1]   = s_axis_tlast_1;
+assign s_axis_tready_1 = in_ready[1];
+
+generate 
+    genvar i;
+    for (i=0; i<NUM_FIFOS; i=i+1) begin: input_fifos
+        axis_fifo #(
+            .DEPTH(FIFO_DEPTH*AXIS_DATA_WIDTH/8),
+            .DATA_WIDTH(AXIS_DATA_WIDTH),
+            .KEEP_WIDTH(AXIS_KEEP_WIDTH),
+            .KEEP_ENABLE(KEEP_ENABLE),
+            .LAST_ENABLE(LAST_ENABLE),
+            .ID_ENABLE(ID_ENABLE),
+            .ID_WIDTH(AXIS_TAG_WIDTH),
+            .DEST_ENABLE(DEST_ENABLE),
+            .USER_ENABLE(USER_ENABLE),
+            .PIPELINE_OUTPUT(PIPELINE_OUTPUT),
+            .FRAME_FIFO(0)
+        )
+        tx_desc_fifo (
+            .clk                    (clk),
+            .rst                    (rst),
+            // input
+            .s_axis_tdata           (in_data[i]),
+            .s_axis_tkeep           (in_keep[i]),
+            .s_axis_tvalid          (in_valid[i]),
+            .s_axis_tready          (in_ready[i]),
+            .s_axis_tlast           (in_last[i]),
+            .s_axis_tid             (in_tid[i]),
+            .s_axis_tdest           (in_dest[i]),
+            .s_axis_tuser           (in_user[i]),
+            // output
+            .m_axis_tdata           (fifo_out_data[i]),
+            .m_axis_tkeep           (fifo_out_keep[i]),
+            .m_axis_tvalid          (fifo_out_valid[i]),
+            .m_axis_tready          (fifo_out_ready[i]),
+            .m_axis_tlast           (fifo_out_last[i]),
+            .m_axis_tid             (fifo_out_tid[i]),
+            .m_axis_tdest           (fifo_out_dest[i]),
+            .m_axis_tuser           (fifo_out_user[i]),
+        
+            // status
+            .status_overflow        (),
+            .status_bad_frame       (), 
+            .status_good_frame      ()
+        );
+    end
+endgenerate
+
+assign m_axis_tdata     = fifo_out_data[cur_q];
+assign m_axis_tkeep     = fifo_out_keep[cur_q];
+assign m_axis_tuser     = fifo_out_user[cur_q];
+assign m_axis_tid       = fifo_out_tid[cur_q];
+assign m_axis_tdest     = fifo_out_dest[cur_q];
+assign m_axis_tvalid    = fifo_out_valid[cur_q];
+assign m_axis_tlast     = fifo_out_last[cur_q];
+
+// STATE
+parameter IDLE  = 0;
+parameter FLUSH = 1;
+
+integer j;
+
+generate 
+    if (LAST_ENABLE) begin
+        always @(*) begin
+            state_next = state;
+            cur_q_next = cur_q;
+        
+            for (j=0; j<NUM_FIFOS; j=j+1) begin
+                fifo_out_ready[j] = 0;
+            end
+        
+            case (state)
+                IDLE: begin
+                    if (fifo_out_valid[cur_q]) begin
+                        if (m_axis_tready) begin
+                            fifo_out_ready[cur_q] = 1'b1;
+        
+                            if (!fifo_out_last[cur_q]) begin
+                                state_next = FLUSH;
+                            end
+                            else begin
+                                cur_q_next = cur_q_plus1;
+                            end
+                        end
+                    end
+                    else begin
+                        cur_q_next = cur_q_plus1;
+                    end
+                end
+                FLUSH: begin
+                    if (fifo_out_valid[cur_q]) begin
+                        if (m_axis_tready) begin
+                            fifo_out_ready[cur_q] = 1'b1;
+        
+                            if (fifo_out_last[cur_q]) begin
+                                state_next = IDLE;
+                                cur_q_next = cur_q_plus1;
+                            end
+                        end
+                    end
+                end
+            endcase
+        end
+    end
+    else begin
+        always @(*) begin
+            state_next = state;
+            cur_q_next = cur_q;
+
+            for (j=0; j<NUM_FIFOS; j=j+1) begin
+                fifo_out_ready[j] = 0;
+            end
+
+            if (fifo_out_valid[cur_q]) begin
+                if (m_axis_tready) begin
+                    fifo_out_ready[cur_q] = 1'b1;
+
+                    cur_q_next = cur_q_plus1;
+                end
+            end
+            else begin
+                cur_q_next = cur_q_plus1;
+            end
+        end
+    end
+endgenerate
+
+always @(posedge clk) begin
+    if (rst) begin
+        state <= IDLE;
+        cur_q <= 0;
+    end
+    else begin
+        state <= state_next;
+        cur_q <= cur_q_next;
+    end
+end
+
+endmodule
